
rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006880  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800698c  0800698c  0000798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb4  08006eb4  00008084  2**0
                  CONTENTS
  4 .ARM          00000000  08006eb4  08006eb4  00008084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006eb4  08006eb4  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb4  08006eb4  00007eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eb8  08006eb8  00007eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006ebc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000088  08006f40  00008088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08006f40  00008220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ee4  00000000  00000000  000080ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299e  00000000  00000000  00018f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0001b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f51  00000000  00000000  0001cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f27  00000000  00000000  0001dbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001571e  00000000  00000000  00036b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f929  00000000  00000000  0004c226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbb4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005280  00000000  00000000  000dbb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000e0e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08006974 	.word	0x08006974

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08006974 	.word	0x08006974

0800014c <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000154:	f003 ffa4 	bl	80040a0 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000158:	2301      	movs	r3, #1
 800015a:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 800015c:	2301      	movs	r3, #1
 800015e:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000164:	2300      	movs	r3, #0
 8000166:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000168:	f107 020c 	add.w	r2, r7, #12
 800016c:	f107 0310 	add.w	r3, r7, #16
 8000170:	4611      	mov	r1, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f004 f87c 	bl	8004270 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000178:	f003 ffb8 	bl	80040ec <HAL_FLASH_Lock>
}
 800017c:	bf00      	nop
 800017e:	3720      	adds	r7, #32
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000184:	b5b0      	push	{r4, r5, r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000190:	f003 ff86 	bl	80040a0 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000194:	887b      	ldrh	r3, [r7, #2]
 8000196:	2200      	movs	r2, #0
 8000198:	461c      	mov	r4, r3
 800019a:	4615      	mov	r5, r2
 800019c:	4622      	mov	r2, r4
 800019e:	462b      	mov	r3, r5
 80001a0:	6879      	ldr	r1, [r7, #4]
 80001a2:	2001      	movs	r0, #1
 80001a4:	f003 ff0c 	bl	8003fc0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80001a8:	f003 ffa0 	bl	80040ec <HAL_FLASH_Lock>
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bdb0      	pop	{r4, r5, r7, pc}

080001b4 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4613      	mov	r3, r2
 80001c0:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80001c2:	f003 ff6d 	bl	80040a0 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001c6:	2300      	movs	r3, #0
 80001c8:	82fb      	strh	r3, [r7, #22]
 80001ca:	e00c      	b.n	80001e6 <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 80001cc:	8afa      	ldrh	r2, [r7, #22]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	18d0      	adds	r0, r2, r3
 80001d2:	8afb      	ldrh	r3, [r7, #22]
 80001d4:	68ba      	ldr	r2, [r7, #8]
 80001d6:	4413      	add	r3, r2
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	4619      	mov	r1, r3
 80001dc:	f7ff ffd2 	bl	8000184 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001e0:	8afb      	ldrh	r3, [r7, #22]
 80001e2:	3302      	adds	r3, #2
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	8afa      	ldrh	r2, [r7, #22]
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d3ee      	bcc.n	80001cc <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 80001ee:	f003 ff7d 	bl	80040ec <HAL_FLASH_Lock>
}
 80001f2:	bf00      	nop
 80001f4:	3718      	adds	r7, #24
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 80001fa:	b480      	push	{r7}
 80001fc:	b083      	sub	sp, #12
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr

08000212 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000212:	b480      	push	{r7}
 8000214:	b083      	sub	sp, #12
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	b29b      	uxth	r3, r3
}
 8000220:	4618      	mov	r0, r3
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000238:	4610      	mov	r0, r2
 800023a:	4619      	mov	r1, r3
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000244:	b480      	push	{r7}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	4613      	mov	r3, r2
 8000250:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000252:	2300      	movs	r3, #0
 8000254:	82fb      	strh	r3, [r7, #22]
 8000256:	e00c      	b.n	8000272 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000258:	8afa      	ldrh	r2, [r7, #22]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	4413      	add	r3, r2
 800025e:	4619      	mov	r1, r3
 8000260:	8afb      	ldrh	r3, [r7, #22]
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	4413      	add	r3, r2
 8000266:	780a      	ldrb	r2, [r1, #0]
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 800026c:	8afb      	ldrh	r3, [r7, #22]
 800026e:	3301      	adds	r3, #1
 8000270:	82fb      	strh	r3, [r7, #22]
 8000272:	8afa      	ldrh	r2, [r7, #22]
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	429a      	cmp	r2, r3
 8000278:	d3ee      	bcc.n	8000258 <Flash_Read_Array+0x14>
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	371c      	adds	r7, #28
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr

08000286 <CLCD_I2C_Init>:
{
	HAL_Delay(Time);

}
void CLCD_I2C_Init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b084      	sub	sp, #16
 800028a:	af00      	add	r7, sp, #0
 800028c:	60f8      	str	r0, [r7, #12]
 800028e:	60b9      	str	r1, [r7, #8]
 8000290:	4611      	mov	r1, r2
 8000292:	461a      	mov	r2, r3
 8000294:	460b      	mov	r3, r1
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	4613      	mov	r3, r2
 800029a:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	7e3a      	ldrb	r2, [r7, #24]
 80002a0:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	2208      	movs	r2, #8
 80002a6:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	79fa      	ldrb	r2, [r7, #7]
 80002ac:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	2204      	movs	r2, #4
 80002be:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	HAL_Delay(40); 	//waiting for > 40ms
 80002c0:	2028      	movs	r0, #40	@ 0x28
 80002c2:	f003 fd4b 	bl	8003d5c <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 80002c6:	2130      	movs	r1, #48	@ 0x30
 80002c8:	68f8      	ldr	r0, [r7, #12]
 80002ca:	f000 f847 	bl	800035c <lcd_send_cmd>
	HAL_Delay(5);  // waiting for >4.1ms
 80002ce:	2005      	movs	r0, #5
 80002d0:	f003 fd44 	bl	8003d5c <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 80002d4:	2130      	movs	r1, #48	@ 0x30
 80002d6:	68f8      	ldr	r0, [r7, #12]
 80002d8:	f000 f840 	bl	800035c <lcd_send_cmd>
	HAL_Delay(1);  // waiting for >100us
 80002dc:	2001      	movs	r0, #1
 80002de:	f003 fd3d 	bl	8003d5c <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 80002e2:	2130      	movs	r1, #48	@ 0x30
 80002e4:	68f8      	ldr	r0, [r7, #12]
 80002e6:	f000 f839 	bl	800035c <lcd_send_cmd>
	HAL_Delay(10);
 80002ea:	200a      	movs	r0, #10
 80002ec:	f003 fd36 	bl	8003d5c <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 80002f0:	2120      	movs	r1, #32
 80002f2:	68f8      	ldr	r0, [r7, #12]
 80002f4:	f000 f832 	bl	800035c <lcd_send_cmd>
	HAL_Delay(10);
 80002f8:	200a      	movs	r0, #10
 80002fa:	f003 fd2f 	bl	8003d5c <HAL_Delay>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002fe:	2128      	movs	r1, #40	@ 0x28
 8000300:	68f8      	ldr	r0, [r7, #12]
 8000302:	f000 f82b 	bl	800035c <lcd_send_cmd>
	HAL_Delay(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f003 fd28 	bl	8003d5c <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 800030c:	2108      	movs	r1, #8
 800030e:	68f8      	ldr	r0, [r7, #12]
 8000310:	f000 f824 	bl	800035c <lcd_send_cmd>
	HAL_Delay(1);
 8000314:	2001      	movs	r0, #1
 8000316:	f003 fd21 	bl	8003d5c <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 800031a:	2101      	movs	r1, #1
 800031c:	68f8      	ldr	r0, [r7, #12]
 800031e:	f000 f81d 	bl	800035c <lcd_send_cmd>
	HAL_Delay(1);
 8000322:	2001      	movs	r0, #1
 8000324:	f003 fd1a 	bl	8003d5c <HAL_Delay>
	HAL_Delay(1);
 8000328:	2001      	movs	r0, #1
 800032a:	f003 fd17 	bl	8003d5c <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800032e:	2106      	movs	r1, #6
 8000330:	68f8      	ldr	r0, [r7, #12]
 8000332:	f000 f813 	bl	800035c <lcd_send_cmd>
	HAL_Delay(1);
 8000336:	2001      	movs	r0, #1
 8000338:	f003 fd10 	bl	8003d5c <HAL_Delay>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	791b      	ldrb	r3, [r3, #4]
 8000340:	f043 0308 	orr.w	r3, r3, #8
 8000344:	b2db      	uxtb	r3, r3
 8000346:	4619      	mov	r1, r3
 8000348:	68f8      	ldr	r0, [r7, #12]
 800034a:	f000 f807 	bl	800035c <lcd_send_cmd>
	HAL_Delay(1);
 800034e:	2001      	movs	r0, #1
 8000350:	f003 fd04 	bl	8003d5c <HAL_Delay>
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af02      	add	r7, sp, #8
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	f023 030f 	bic.w	r3, r3, #15
 800036e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	011b      	lsls	r3, r3, #4
 8000374:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	f043 030c 	orr.w	r3, r3, #12
 800037c:	b2db      	uxtb	r3, r3
 800037e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	b2db      	uxtb	r3, r3
 8000388:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 800038a:	7bbb      	ldrb	r3, [r7, #14]
 800038c:	f043 030c 	orr.w	r3, r3, #12
 8000390:	b2db      	uxtb	r3, r3
 8000392:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 8000394:	7bbb      	ldrb	r3, [r7, #14]
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	b2db      	uxtb	r3, r3
 800039c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6898      	ldr	r0, [r3, #8]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	789b      	ldrb	r3, [r3, #2]
 80003a6:	4619      	mov	r1, r3
 80003a8:	f107 0208 	add.w	r2, r7, #8
 80003ac:	2364      	movs	r3, #100	@ 0x64
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	2304      	movs	r3, #4
 80003b2:	f004 fb15 	bl	80049e0 <HAL_I2C_Master_Transmit>
}
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af02      	add	r7, sp, #8
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	460b      	mov	r3, r1
 80003c8:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 80003ca:	78fb      	ldrb	r3, [r7, #3]
 80003cc:	f023 030f 	bic.w	r3, r3, #15
 80003d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	011b      	lsls	r3, r3, #4
 80003d6:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	f043 030d 	orr.w	r3, r3, #13
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	f043 0309 	orr.w	r3, r3, #9
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 80003ec:	7bbb      	ldrb	r3, [r7, #14]
 80003ee:	f043 030d 	orr.w	r3, r3, #13
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 80003f6:	7bbb      	ldrb	r3, [r7, #14]
 80003f8:	f043 0309 	orr.w	r3, r3, #9
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6898      	ldr	r0, [r3, #8]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	789b      	ldrb	r3, [r3, #2]
 8000408:	4619      	mov	r1, r3
 800040a:	f107 0208 	add.w	r2, r7, #8
 800040e:	2364      	movs	r3, #100	@ 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2304      	movs	r3, #4
 8000414:	f004 fae4 	bl	80049e0 <HAL_I2C_Master_Transmit>
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
 800042c:	4613      	mov	r3, r2
 800042e:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <lcd_set_cursor+0x50>)
 8000432:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	785b      	ldrb	r3, [r3, #1]
 8000438:	78ba      	ldrb	r2, [r7, #2]
 800043a:	429a      	cmp	r2, r3
 800043c:	d903      	bls.n	8000446 <lcd_set_cursor+0x26>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	3b01      	subs	r3, #1
 8000444:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 8000446:	78bb      	ldrb	r3, [r7, #2]
 8000448:	3310      	adds	r3, #16
 800044a:	443b      	add	r3, r7
 800044c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000450:	78fb      	ldrb	r3, [r7, #3]
 8000452:	4413      	add	r3, r2
 8000454:	b2db      	uxtb	r3, r3
 8000456:	b25b      	sxtb	r3, r3
 8000458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800045c:	b25b      	sxtb	r3, r3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ff7a 	bl	800035c <lcd_send_cmd>
}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	54144000 	.word	0x54144000

08000474 <CLCD_SetCursor>:

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
}
void CLCD_SetCursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	70fb      	strb	r3, [r7, #3]
 8000480:	4613      	mov	r3, r2
 8000482:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <CLCD_SetCursor+0x50>)
 8000486:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	785b      	ldrb	r3, [r3, #1]
 800048c:	78ba      	ldrb	r2, [r7, #2]
 800048e:	429a      	cmp	r2, r3
 8000490:	d903      	bls.n	800049a <CLCD_SetCursor+0x26>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	3b01      	subs	r3, #1
 8000498:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 800049a:	78bb      	ldrb	r3, [r7, #2]
 800049c:	3310      	adds	r3, #16
 800049e:	443b      	add	r3, r7
 80004a0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80004a4:	78fb      	ldrb	r3, [r7, #3]
 80004a6:	4413      	add	r3, r2
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	b25b      	sxtb	r3, r3
 80004ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004b0:	b25b      	sxtb	r3, r3
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff ff50 	bl	800035c <lcd_send_cmd>
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	54144000 	.word	0x54144000

080004c8 <CLCD_WriteChar>:
void CLCD_WriteChar(LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	f023 030f 	bic.w	r3, r3, #15
 80004da:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	f043 030d 	orr.w	r3, r3, #13
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	f043 0309 	orr.w	r3, r3, #9
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 80004f6:	7bbb      	ldrb	r3, [r7, #14]
 80004f8:	f043 030d 	orr.w	r3, r3, #13
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8000500:	7bbb      	ldrb	r3, [r7, #14]
 8000502:	f043 0309 	orr.w	r3, r3, #9
 8000506:	b2db      	uxtb	r3, r3
 8000508:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6898      	ldr	r0, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	789b      	ldrb	r3, [r3, #2]
 8000512:	4619      	mov	r1, r3
 8000514:	f107 0208 	add.w	r2, r7, #8
 8000518:	2364      	movs	r3, #100	@ 0x64
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2304      	movs	r3, #4
 800051e:	f004 fa5f 	bl	80049e0 <HAL_I2C_Master_Transmit>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <CLCD_WriteString>:
void CLCD_WriteString(LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 8000534:	e007      	b.n	8000546 <CLCD_WriteString+0x1c>
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	1c5a      	adds	r2, r3, #1
 800053a:	603a      	str	r2, [r7, #0]
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	4619      	mov	r1, r3
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff ff3c 	bl	80003be <lcd_send_data>
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f3      	bne.n	8000536 <CLCD_WriteString+0xc>
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <CLCD_Clear>:
void CLCD_Clear(LCD_I2C_HandleTypeDef *p_LCD)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 8000560:	2101      	movs	r1, #1
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff fefa 	bl	800035c <lcd_send_cmd>
	HAL_Delay(5);
 8000568:	2005      	movs	r0, #5
 800056a:	f003 fbf7 	bl	8003d5c <HAL_Delay>
	lcd_set_cursor(p_LCD, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ff54 	bl	8000420 <lcd_set_cursor>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HAL_TIM_PeriodElapsedCallback>:
uint8_t CheckUID(uint8_t *data, uint32_t address);
uint8_t CheckListUID(uint8_t *data);
uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058c:	480a      	ldr	r0, [pc, #40]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800058e:	f004 f8ca 	bl	8004726 <HAL_GPIO_TogglePin>
	if(exitmenu > 0)
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <HAL_TIM_PeriodElapsedCallback+0x28>
		exitmenu --;
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3b01      	subs	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005a4:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 80005a6:	e002      	b.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x2e>
	else exitmenu = 0;
 80005a8:	4b04      	ldr	r3, [pc, #16]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40011000 	.word	0x40011000
 80005bc:	20000000 	.word	0x20000000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f003 fb67 	bl	8003c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f8ff 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 fa1f 	bl	8000a10 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005d2:	f000 f96f 	bl	80008b4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005d6:	f000 f9a3 	bl	8000920 <MX_TIM2_Init>
  MX_I2C2_Init();
 80005da:	f000 f93d 	bl	8000858 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005de:	f000 f9ed 	bl	80009bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  TM_MFRC522_Init();
 80005e2:	f002 ff47 	bl	8003474 <TM_MFRC522_Init>

  CLCD_I2C_Init(&LCD1, &hi2c2, 16, 2, 0x27<<1);
 80005e6:	234e      	movs	r3, #78	@ 0x4e
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	2210      	movs	r2, #16
 80005ee:	4968      	ldr	r1, [pc, #416]	@ (8000790 <main+0x1d0>)
 80005f0:	4868      	ldr	r0, [pc, #416]	@ (8000794 <main+0x1d4>)
 80005f2:	f7ff fe48 	bl	8000286 <CLCD_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);// khoi dong timer interrupt
 80005f6:	4868      	ldr	r0, [pc, #416]	@ (8000798 <main+0x1d8>)
 80005f8:	f005 fc2e 	bl	8005e58 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000602:	4866      	ldr	r0, [pc, #408]	@ (800079c <main+0x1dc>)
 8000604:	f004 f877 	bl	80046f6 <HAL_GPIO_WritePin>
	if (checkcountUID() == 0)
 8000608:	f002 fade 	bl	8002bc8 <checkcountUID>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <main+0x56>
	{
		startadd();
 8000612:	f002 fd51 	bl	80030b8 <startadd>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		CLCD_SetCursor(&LCD1, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	485e      	ldr	r0, [pc, #376]	@ (8000794 <main+0x1d4>)
 800061c:	f7ff ff2a 	bl	8000474 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, " SCAN YOUR CARD");
 8000620:	495f      	ldr	r1, [pc, #380]	@ (80007a0 <main+0x1e0>)
 8000622:	485c      	ldr	r0, [pc, #368]	@ (8000794 <main+0x1d4>)
 8000624:	f7ff ff81 	bl	800052a <CLCD_WriteString>
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000628:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800062c:	485d      	ldr	r0, [pc, #372]	@ (80007a4 <main+0x1e4>)
 800062e:	f000 fa8d 	bl	8000b4c <checkbuton>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d05d      	beq.n	80006f4 <main+0x134>
		{
			exitmenu = 15;
 8000638:	4b5b      	ldr	r3, [pc, #364]	@ (80007a8 <main+0x1e8>)
 800063a:	220f      	movs	r2, #15
 800063c:	701a      	strb	r2, [r3, #0]
			CLCD_SetCursor(&LCD1, 0, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	2100      	movs	r1, #0
 8000642:	4854      	ldr	r0, [pc, #336]	@ (8000794 <main+0x1d4>)
 8000644:	f7ff ff16 	bl	8000474 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, "   ADMIN CARD");
 8000648:	4958      	ldr	r1, [pc, #352]	@ (80007ac <main+0x1ec>)
 800064a:	4852      	ldr	r0, [pc, #328]	@ (8000794 <main+0x1d4>)
 800064c:	f7ff ff6d 	bl	800052a <CLCD_WriteString>
			uint8_t key = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	71fb      	strb	r3, [r7, #7]
			uint8_t stat ;
			while (exitmenu )
 8000654:	e029      	b.n	80006aa <main+0xea>
			{
				if (TM_MFRC522_Check(CardID) == MI_OK)
 8000656:	4856      	ldr	r0, [pc, #344]	@ (80007b0 <main+0x1f0>)
 8000658:	f002 ff30 	bl	80034bc <TM_MFRC522_Check>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d108      	bne.n	8000674 <main+0xb4>
				{
					key = CheckListUID(CardID);
 8000662:	4853      	ldr	r0, [pc, #332]	@ (80007b0 <main+0x1f0>)
 8000664:	f002 fa80 	bl	8002b68 <CheckListUID>
 8000668:	4603      	mov	r3, r0
 800066a:	71fb      	strb	r3, [r7, #7]
					key = key >> 4;
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	71fb      	strb	r3, [r7, #7]
					break;
 8000672:	e01e      	b.n	80006b2 <main+0xf2>
				}
				stat = checkbuton(MENU_GPIO_Port, MENU_Pin);
 8000674:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000678:	484a      	ldr	r0, [pc, #296]	@ (80007a4 <main+0x1e4>)
 800067a:	f000 fa67 	bl	8000b4c <checkbuton>
 800067e:	4603      	mov	r3, r0
 8000680:	71bb      	strb	r3, [r7, #6]
				switch(stat)
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00f      	beq.n	80006a8 <main+0xe8>
 8000688:	2b03      	cmp	r3, #3
 800068a:	d107      	bne.n	800069c <main+0xdc>
				{
				case 0:
					break;
				case 3:
					password_button();
 800068c:	f002 fdb8 	bl	8003200 <password_button>
					key = 99;
 8000690:	2363      	movs	r3, #99	@ 0x63
 8000692:	71fb      	strb	r3, [r7, #7]
					exitmenu = 0;
 8000694:	4b44      	ldr	r3, [pc, #272]	@ (80007a8 <main+0x1e8>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
					break;
 800069a:	e006      	b.n	80006aa <main+0xea>
				default :
					key = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	71fb      	strb	r3, [r7, #7]
					exitmenu = 0;
 80006a0:	4b41      	ldr	r3, [pc, #260]	@ (80007a8 <main+0x1e8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
					break;
 80006a6:	e000      	b.n	80006aa <main+0xea>
					break;
 80006a8:	bf00      	nop
			while (exitmenu )
 80006aa:	4b3f      	ldr	r3, [pc, #252]	@ (80007a8 <main+0x1e8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1d1      	bne.n	8000656 <main+0x96>
				}
			}
			switch (key){
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d002      	beq.n	80006be <main+0xfe>
 80006b8:	2b63      	cmp	r3, #99	@ 0x63
 80006ba:	d003      	beq.n	80006c4 <main+0x104>
 80006bc:	e006      	b.n	80006cc <main+0x10c>
			case 1:
				seclectmenu();
 80006be:	f000 fa93 	bl	8000be8 <seclectmenu>
				break;
 80006c2:	e017      	b.n	80006f4 <main+0x134>
			case 99:
				CLCD_Clear(&LCD1);
 80006c4:	4833      	ldr	r0, [pc, #204]	@ (8000794 <main+0x1d4>)
 80006c6:	f7ff ff47 	bl	8000558 <CLCD_Clear>
				break;
 80006ca:	e013      	b.n	80006f4 <main+0x134>
			default:
				CLCD_Clear(&LCD1);
 80006cc:	4831      	ldr	r0, [pc, #196]	@ (8000794 <main+0x1d4>)
 80006ce:	f7ff ff43 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	482f      	ldr	r0, [pc, #188]	@ (8000794 <main+0x1d4>)
 80006d8:	f7ff fecc 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "NOT ACCCESSIBLE");
 80006dc:	4935      	ldr	r1, [pc, #212]	@ (80007b4 <main+0x1f4>)
 80006de:	482d      	ldr	r0, [pc, #180]	@ (8000794 <main+0x1d4>)
 80006e0:	f7ff ff23 	bl	800052a <CLCD_WriteString>
				HAL_Delay(2000);
 80006e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006e8:	f003 fb38 	bl	8003d5c <HAL_Delay>
				CLCD_Clear(&LCD1);
 80006ec:	4829      	ldr	r0, [pc, #164]	@ (8000794 <main+0x1d4>)
 80006ee:	f7ff ff33 	bl	8000558 <CLCD_Clear>
				break;
 80006f2:	bf00      	nop
			}
		}
		if (TM_MFRC522_Check(CardID) == MI_OK)
 80006f4:	482e      	ldr	r0, [pc, #184]	@ (80007b0 <main+0x1f0>)
 80006f6:	f002 fee1 	bl	80034bc <TM_MFRC522_Check>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d18a      	bne.n	8000616 <main+0x56>
		{
//			sprintf(str, "ID: 0x%02X%02X%02X%02X%02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
			if (CheckListUID(CardID) != 0)
 8000700:	482b      	ldr	r0, [pc, #172]	@ (80007b0 <main+0x1f0>)
 8000702:	f002 fa31 	bl	8002b68 <CheckListUID>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d029      	beq.n	8000760 <main+0x1a0>
			{
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000712:	4822      	ldr	r0, [pc, #136]	@ (800079c <main+0x1dc>)
 8000714:	f003 ffef 	bl	80046f6 <HAL_GPIO_WritePin>
				CLCD_Clear(&LCD1);
 8000718:	481e      	ldr	r0, [pc, #120]	@ (8000794 <main+0x1d4>)
 800071a:	f7ff ff1d 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	481c      	ldr	r0, [pc, #112]	@ (8000794 <main+0x1d4>)
 8000724:	f7ff fea6 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    WELCOME");
 8000728:	4923      	ldr	r1, [pc, #140]	@ (80007b8 <main+0x1f8>)
 800072a:	481a      	ldr	r0, [pc, #104]	@ (8000794 <main+0x1d4>)
 800072c:	f7ff fefd 	bl	800052a <CLCD_WriteString>
				HAL_Delay(500);
 8000730:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000734:	f003 fb12 	bl	8003d5c <HAL_Delay>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800073e:	4817      	ldr	r0, [pc, #92]	@ (800079c <main+0x1dc>)
 8000740:	f003 ffd9 	bl	80046f6 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, opened, sizeof(opened)-1, HAL_MAX_DELAY);
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	2206      	movs	r2, #6
 800074a:	491c      	ldr	r1, [pc, #112]	@ (80007bc <main+0x1fc>)
 800074c:	481c      	ldr	r0, [pc, #112]	@ (80007c0 <main+0x200>)
 800074e:	f005 ff7a 	bl	8006646 <HAL_UART_Transmit>
				HAL_Delay(4000);
 8000752:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000756:	f003 fb01 	bl	8003d5c <HAL_Delay>
				checkuser();
 800075a:	f002 faff 	bl	8002d5c <checkuser>
 800075e:	e75a      	b.n	8000616 <main+0x56>
			}
			else
			{
				CLCD_Clear(&LCD1);
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <main+0x1d4>)
 8000762:	f7ff fef9 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	480a      	ldr	r0, [pc, #40]	@ (8000794 <main+0x1d4>)
 800076c:	f7ff fe82 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   WRONG CARD");
 8000770:	4914      	ldr	r1, [pc, #80]	@ (80007c4 <main+0x204>)
 8000772:	4808      	ldr	r0, [pc, #32]	@ (8000794 <main+0x1d4>)
 8000774:	f7ff fed9 	bl	800052a <CLCD_WriteString>
				HAL_UART_Transmit(&huart1, wrong, sizeof(wrong)-1, HAL_MAX_DELAY);
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	220a      	movs	r2, #10
 800077e:	4912      	ldr	r1, [pc, #72]	@ (80007c8 <main+0x208>)
 8000780:	480f      	ldr	r0, [pc, #60]	@ (80007c0 <main+0x200>)
 8000782:	f005 ff60 	bl	8006646 <HAL_UART_Transmit>
				HAL_Delay(3000);
 8000786:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800078a:	f003 fae7 	bl	8003d5c <HAL_Delay>
		CLCD_SetCursor(&LCD1, 0, 0);
 800078e:	e742      	b.n	8000616 <main+0x56>
 8000790:	200000a4 	.word	0x200000a4
 8000794:	200001ec 	.word	0x200001ec
 8000798:	20000150 	.word	0x20000150
 800079c:	40010c00 	.word	0x40010c00
 80007a0:	0800698c 	.word	0x0800698c
 80007a4:	40010800 	.word	0x40010800
 80007a8:	20000000 	.word	0x20000000
 80007ac:	0800699c 	.word	0x0800699c
 80007b0:	200001dc 	.word	0x200001dc
 80007b4:	080069ac 	.word	0x080069ac
 80007b8:	080069bc 	.word	0x080069bc
 80007bc:	20000014 	.word	0x20000014
 80007c0:	20000198 	.word	0x20000198
 80007c4:	080069c8 	.word	0x080069c8
 80007c8:	2000001c 	.word	0x2000001c

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b090      	sub	sp, #64	@ 0x40
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	2228      	movs	r2, #40	@ 0x28
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 f89e 	bl	800691c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000800:	2302      	movs	r3, #2
 8000802:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000804:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000808:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800080a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fbe9 	bl	8004fec <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000820:	f002 fdfa 	bl	8003418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f004 fe56 	bl	80054f0 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800084a:	f002 fde5 	bl	8003418 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3740      	adds	r7, #64	@ 0x40
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_I2C2_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <MX_I2C2_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_I2C2_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_I2C2_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_I2C2_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_I2C2_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_I2C2_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_I2C2_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_I2C2_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_I2C2_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_I2C2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_I2C2_Init+0x50>)
 8000896:	f003 ff5f 	bl	8004758 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f002 fdba 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000a4 	.word	0x200000a4
 80008ac:	40005800 	.word	0x40005800
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008ba:	4a18      	ldr	r2, [pc, #96]	@ (800091c <MX_SPI1_Init+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008e8:	2230      	movs	r2, #48	@ 0x30
 80008ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_SPI1_Init+0x64>)
 8000900:	220a      	movs	r2, #10
 8000902:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_SPI1_Init+0x64>)
 8000906:	f004 ff8b 	bl	8005820 <HAL_SPI_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000910:	f002 fd82 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000f8 	.word	0x200000f8
 800091c:	40013000 	.word	0x40013000

08000920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093c:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_TIM2_Init+0x98>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000946:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800094a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_TIM2_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000954:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_TIM2_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000966:	4814      	ldr	r0, [pc, #80]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000968:	f005 fa26 	bl	8005db8 <HAL_TIM_Base_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000972:	f002 fd51 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4619      	mov	r1, r3
 8000982:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <MX_TIM2_Init+0x98>)
 8000984:	f005 fbc2 	bl	800610c <HAL_TIM_ConfigClockSource>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800098e:	f002 fd43 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <MX_TIM2_Init+0x98>)
 80009a0:	f005 fd94 	bl	80064cc <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009aa:	f002 fd35 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000150 	.word	0x20000150

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f005 fdda 	bl	80065ac <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f002 fd0b 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000198 	.word	0x20000198
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b45      	ldr	r3, [pc, #276]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a44      	ldr	r2, [pc, #272]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b42      	ldr	r3, [pc, #264]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0310 	and.w	r3, r3, #16
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a3e      	ldr	r2, [pc, #248]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a42:	f043 0320 	orr.w	r3, r3, #32
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b3c      	ldr	r3, [pc, #240]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b39      	ldr	r3, [pc, #228]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a38      	ldr	r2, [pc, #224]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b36      	ldr	r3, [pc, #216]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b33      	ldr	r3, [pc, #204]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a32      	ldr	r2, [pc, #200]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b30      	ldr	r3, [pc, #192]	@ (8000b3c <MX_GPIO_Init+0x12c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a8a:	482d      	ldr	r0, [pc, #180]	@ (8000b40 <MX_GPIO_Init+0x130>)
 8000a8c:	f003 fe33 	bl	80046f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2110      	movs	r1, #16
 8000a94:	482b      	ldr	r0, [pc, #172]	@ (8000b44 <MX_GPIO_Init+0x134>)
 8000a96:	f003 fe2e 	bl	80046f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa0:	4829      	ldr	r0, [pc, #164]	@ (8000b48 <MX_GPIO_Init+0x138>)
 8000aa2:	f003 fe28 	bl	80046f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	4820      	ldr	r0, [pc, #128]	@ (8000b40 <MX_GPIO_Init+0x130>)
 8000ac0:	f003 fc7e 	bl	80043c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	481a      	ldr	r0, [pc, #104]	@ (8000b44 <MX_GPIO_Init+0x134>)
 8000adc:	f003 fc70 	bl	80043c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <MX_GPIO_Init+0x138>)
 8000afa:	f003 fc61 	bl	80043c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SELECCT_Pin */
  GPIO_InitStruct.Pin = SELECCT_Pin;
 8000afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SELECCT_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <MX_GPIO_Init+0x138>)
 8000b14:	f003 fc54 	bl	80043c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_Pin */
  GPIO_InitStruct.Pin = MENU_Pin;
 8000b18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_GPIO_Init+0x134>)
 8000b2e:	f003 fc47 	bl	80043c0 <HAL_GPIO_Init>

}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <checkbuton>:
		return 1;
	}
}

uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f003 fdb3 	bl	80046c8 <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d101      	bne.n	8000b6c <checkbuton+0x20>
		return 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e039      	b.n	8000be0 <checkbuton+0x94>
	else
	{
		HAL_Delay(50);
 8000b6c:	2032      	movs	r0, #50	@ 0x32
 8000b6e:	f003 f8f5 	bl	8003d5c <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)	return 0;
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	4619      	mov	r1, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f003 fda6 	bl	80046c8 <HAL_GPIO_ReadPin>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d101      	bne.n	8000b86 <checkbuton+0x3a>
 8000b82:	2300      	movs	r3, #0
 8000b84:	e02c      	b.n	8000be0 <checkbuton+0x94>
		uint8_t i = 50;
 8000b86:	2332      	movs	r3, #50	@ 0x32
 8000b88:	73fb      	strb	r3, [r7, #15]
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000b8a:	e020      	b.n	8000bce <checkbuton+0x82>
		{
			HAL_Delay(10);
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f003 f8e5 	bl	8003d5c <HAL_Delay>
			i--;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
			if (i == 0)
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d117      	bne.n	8000bce <checkbuton+0x82>
			{
				i = 250;
 8000b9e:	23fa      	movs	r3, #250	@ 0xfa
 8000ba0:	73fb      	strb	r3, [r7, #15]
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000ba2:	e00a      	b.n	8000bba <checkbuton+0x6e>
				{
					HAL_Delay(10);
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f003 f8d9 	bl	8003d5c <HAL_Delay>
					i--;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
					if(i == 0)	return 3;
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <checkbuton+0x6e>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e012      	b.n	8000be0 <checkbuton+0x94>
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f003 fd82 	bl	80046c8 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0ec      	beq.n	8000ba4 <checkbuton+0x58>
				}
				return 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e008      	b.n	8000be0 <checkbuton+0x94>
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f003 fd78 	bl	80046c8 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0d6      	beq.n	8000b8c <checkbuton+0x40>
			}
		}
		return 1;
 8000bde:	2301      	movs	r3, #1
	}
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <seclectmenu>:

void seclectmenu(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
	exitmenu = 15;
 8000bee:	4bb6      	ldr	r3, [pc, #728]	@ (8000ec8 <seclectmenu+0x2e0>)
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	75fb      	strb	r3, [r7, #23]
	CLCD_Clear(&LCD1);
 8000bf8:	48b4      	ldr	r0, [pc, #720]	@ (8000ecc <seclectmenu+0x2e4>)
 8000bfa:	f7ff fcad 	bl	8000558 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	48b2      	ldr	r0, [pc, #712]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c04:	f7ff fc36 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "  SELECT MENU");
 8000c08:	49b1      	ldr	r1, [pc, #708]	@ (8000ed0 <seclectmenu+0x2e8>)
 8000c0a:	48b0      	ldr	r0, [pc, #704]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c0c:	f7ff fc8d 	bl	800052a <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2100      	movs	r1, #0
 8000c14:	48ad      	ldr	r0, [pc, #692]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c16:	f7ff fc2d 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "PLEASE PRESS #");
 8000c1a:	49ae      	ldr	r1, [pc, #696]	@ (8000ed4 <seclectmenu+0x2ec>)
 8000c1c:	48ab      	ldr	r0, [pc, #684]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c1e:	f7ff fc84 	bl	800052a <CLCD_WriteString>
	while (exitmenu )
 8000c22:	f001 bf40 	b.w	8002aa6 <seclectmenu+0x1ebe>
	{
		if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 8000c26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c2a:	48ab      	ldr	r0, [pc, #684]	@ (8000ed8 <seclectmenu+0x2f0>)
 8000c2c:	f7ff ff8e 	bl	8000b4c <checkbuton>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d06e      	beq.n	8000d14 <seclectmenu+0x12c>
		{
			exitmenu = 15;
 8000c36:	4ba4      	ldr	r3, [pc, #656]	@ (8000ec8 <seclectmenu+0x2e0>)
 8000c38:	220f      	movs	r2, #15
 8000c3a:	701a      	strb	r2, [r3, #0]
			status++;
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d801      	bhi.n	8000c4c <seclectmenu+0x64>
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	e000      	b.n	8000c4e <seclectmenu+0x66>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d032      	beq.n	8000cbc <seclectmenu+0xd4>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	dc46      	bgt.n	8000ce8 <seclectmenu+0x100>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <seclectmenu+0x7c>
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d016      	beq.n	8000c90 <seclectmenu+0xa8>
 8000c62:	e041      	b.n	8000ce8 <seclectmenu+0x100>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000c64:	4899      	ldr	r0, [pc, #612]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c66:	f7ff fc77 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4897      	ldr	r0, [pc, #604]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c70:	f7ff fc00 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  ADD CARD");
 8000c74:	4999      	ldr	r1, [pc, #612]	@ (8000edc <seclectmenu+0x2f4>)
 8000c76:	4895      	ldr	r0, [pc, #596]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c78:	f7ff fc57 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4892      	ldr	r0, [pc, #584]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c82:	f7ff fbf7 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    REMOVE CARD");
 8000c86:	4996      	ldr	r1, [pc, #600]	@ (8000ee0 <seclectmenu+0x2f8>)
 8000c88:	4890      	ldr	r0, [pc, #576]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c8a:	f7ff fc4e 	bl	800052a <CLCD_WriteString>
				break;
 8000c8e:	e041      	b.n	8000d14 <seclectmenu+0x12c>
			case 1:
				CLCD_Clear(&LCD1);
 8000c90:	488e      	ldr	r0, [pc, #568]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c92:	f7ff fc61 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	488c      	ldr	r0, [pc, #560]	@ (8000ecc <seclectmenu+0x2e4>)
 8000c9c:	f7ff fbea 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    ADD CARD");
 8000ca0:	4990      	ldr	r1, [pc, #576]	@ (8000ee4 <seclectmenu+0x2fc>)
 8000ca2:	488a      	ldr	r0, [pc, #552]	@ (8000ecc <seclectmenu+0x2e4>)
 8000ca4:	f7ff fc41 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2100      	movs	r1, #0
 8000cac:	4887      	ldr	r0, [pc, #540]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cae:	f7ff fbe1 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  REMOVE CARD");
 8000cb2:	498d      	ldr	r1, [pc, #564]	@ (8000ee8 <seclectmenu+0x300>)
 8000cb4:	4885      	ldr	r0, [pc, #532]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cb6:	f7ff fc38 	bl	800052a <CLCD_WriteString>
				break;
 8000cba:	e02b      	b.n	8000d14 <seclectmenu+0x12c>
			case 2:
				CLCD_Clear(&LCD1);
 8000cbc:	4883      	ldr	r0, [pc, #524]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cbe:	f7ff fc4b 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4881      	ldr	r0, [pc, #516]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cc8:	f7ff fbd4 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    REMOVE CARD");
 8000ccc:	4984      	ldr	r1, [pc, #528]	@ (8000ee0 <seclectmenu+0x2f8>)
 8000cce:	487f      	ldr	r0, [pc, #508]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cd0:	f7ff fc2b 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	487c      	ldr	r0, [pc, #496]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cda:	f7ff fbcb 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  CHECK CARD");
 8000cde:	4983      	ldr	r1, [pc, #524]	@ (8000eec <seclectmenu+0x304>)
 8000ce0:	487a      	ldr	r0, [pc, #488]	@ (8000ecc <seclectmenu+0x2e4>)
 8000ce2:	f7ff fc22 	bl	800052a <CLCD_WriteString>
				break;
 8000ce6:	e015      	b.n	8000d14 <seclectmenu+0x12c>
			default:
				CLCD_Clear(&LCD1);
 8000ce8:	4878      	ldr	r0, [pc, #480]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cea:	f7ff fc35 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4876      	ldr	r0, [pc, #472]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cf4:	f7ff fbbe 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    CHECK CARD");
 8000cf8:	497d      	ldr	r1, [pc, #500]	@ (8000ef0 <seclectmenu+0x308>)
 8000cfa:	4874      	ldr	r0, [pc, #464]	@ (8000ecc <seclectmenu+0x2e4>)
 8000cfc:	f7ff fc15 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2100      	movs	r1, #0
 8000d04:	4871      	ldr	r0, [pc, #452]	@ (8000ecc <seclectmenu+0x2e4>)
 8000d06:	f7ff fbb5 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8000d0a:	497a      	ldr	r1, [pc, #488]	@ (8000ef4 <seclectmenu+0x30c>)
 8000d0c:	486f      	ldr	r0, [pc, #444]	@ (8000ecc <seclectmenu+0x2e4>)
 8000d0e:	f7ff fc0c 	bl	800052a <CLCD_WriteString>
				break;
 8000d12:	bf00      	nop
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000d14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d18:	4877      	ldr	r0, [pc, #476]	@ (8000ef8 <seclectmenu+0x310>)
 8000d1a:	f7ff ff17 	bl	8000b4c <checkbuton>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f001 86c0 	beq.w	8002aa6 <seclectmenu+0x1ebe>
		{
			exitmenu = 15;
 8000d26:	4b68      	ldr	r3, [pc, #416]	@ (8000ec8 <seclectmenu+0x2e0>)
 8000d28:	220f      	movs	r2, #15
 8000d2a:	701a      	strb	r2, [r3, #0]
			switch (status)
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	f001 869d 	beq.w	8002a6e <seclectmenu+0x1e86>
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	f301 86b2 	bgt.w	8002a9e <seclectmenu+0x1eb6>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <seclectmenu+0x160>
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	f000 85c1 	beq.w	80018c6 <seclectmenu+0xcde>
 8000d44:	f001 beab 	b.w	8002a9e <seclectmenu+0x1eb6>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000d48:	4860      	ldr	r0, [pc, #384]	@ (8000ecc <seclectmenu+0x2e4>)
 8000d4a:	f7ff fc05 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	485e      	ldr	r0, [pc, #376]	@ (8000ecc <seclectmenu+0x2e4>)
 8000d54:	f7ff fb8e 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    SELECT ");
 8000d58:	4968      	ldr	r1, [pc, #416]	@ (8000efc <seclectmenu+0x314>)
 8000d5a:	485c      	ldr	r0, [pc, #368]	@ (8000ecc <seclectmenu+0x2e4>)
 8000d5c:	f7ff fbe5 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2100      	movs	r1, #0
 8000d64:	4859      	ldr	r0, [pc, #356]	@ (8000ecc <seclectmenu+0x2e4>)
 8000d66:	f7ff fb85 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "PLEASE PRESS #");
 8000d6a:	495a      	ldr	r1, [pc, #360]	@ (8000ed4 <seclectmenu+0x2ec>)
 8000d6c:	4857      	ldr	r0, [pc, #348]	@ (8000ecc <seclectmenu+0x2e4>)
 8000d6e:	f7ff fbdc 	bl	800052a <CLCD_WriteString>
				uint8_t statusadd = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8000d7a:	f000 bd89 	b.w	8001890 <seclectmenu+0xca8>
				{
					if (exitmenu == 0)
 8000d7e:	4b52      	ldr	r3, [pc, #328]	@ (8000ec8 <seclectmenu+0x2e0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d108      	bne.n	8000d98 <seclectmenu+0x1b0>
					{
						CLCD_Clear(&LCD1);
 8000d86:	4851      	ldr	r0, [pc, #324]	@ (8000ecc <seclectmenu+0x2e4>)
 8000d88:	f7ff fbe6 	bl	8000558 <CLCD_Clear>
						HAL_Delay(1000);
 8000d8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d90:	f002 ffe4 	bl	8003d5c <HAL_Delay>
						return;
 8000d94:	f001 be93 	b.w	8002abe <seclectmenu+0x1ed6>
					}
					if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 8000d98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d9c:	484e      	ldr	r0, [pc, #312]	@ (8000ed8 <seclectmenu+0x2f0>)
 8000d9e:	f7ff fed5 	bl	8000b4c <checkbuton>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d054      	beq.n	8000e52 <seclectmenu+0x26a>
					{
						exitmenu = 15;
 8000da8:	4b47      	ldr	r3, [pc, #284]	@ (8000ec8 <seclectmenu+0x2e0>)
 8000daa:	220f      	movs	r2, #15
 8000dac:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8000dae:	7dbb      	ldrb	r3, [r7, #22]
 8000db0:	3301      	adds	r3, #1
 8000db2:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8000db4:	7dbb      	ldrb	r3, [r7, #22]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d801      	bhi.n	8000dbe <seclectmenu+0x1d6>
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	e000      	b.n	8000dc0 <seclectmenu+0x1d8>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8000dc2:	7dbb      	ldrb	r3, [r7, #22]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d002      	beq.n	8000dce <seclectmenu+0x1e6>
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d016      	beq.n	8000dfa <seclectmenu+0x212>
 8000dcc:	e02b      	b.n	8000e26 <seclectmenu+0x23e>
						{
						case 1:
							CLCD_Clear(&LCD1);
 8000dce:	483f      	ldr	r0, [pc, #252]	@ (8000ecc <seclectmenu+0x2e4>)
 8000dd0:	f7ff fbc2 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	483c      	ldr	r0, [pc, #240]	@ (8000ecc <seclectmenu+0x2e4>)
 8000dda:	f7ff fb4b 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8000dde:	4948      	ldr	r1, [pc, #288]	@ (8000f00 <seclectmenu+0x318>)
 8000de0:	483a      	ldr	r0, [pc, #232]	@ (8000ecc <seclectmenu+0x2e4>)
 8000de2:	f7ff fba2 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2100      	movs	r1, #0
 8000dea:	4838      	ldr	r0, [pc, #224]	@ (8000ecc <seclectmenu+0x2e4>)
 8000dec:	f7ff fb42 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   GUEST CARD");
 8000df0:	4944      	ldr	r1, [pc, #272]	@ (8000f04 <seclectmenu+0x31c>)
 8000df2:	4836      	ldr	r0, [pc, #216]	@ (8000ecc <seclectmenu+0x2e4>)
 8000df4:	f7ff fb99 	bl	800052a <CLCD_WriteString>
							break;
 8000df8:	e02b      	b.n	8000e52 <seclectmenu+0x26a>
						case 2:
							CLCD_Clear(&LCD1);
 8000dfa:	4834      	ldr	r0, [pc, #208]	@ (8000ecc <seclectmenu+0x2e4>)
 8000dfc:	f7ff fbac 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	4831      	ldr	r0, [pc, #196]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e06:	f7ff fb35 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   ADMIN CARD");
 8000e0a:	493f      	ldr	r1, [pc, #252]	@ (8000f08 <seclectmenu+0x320>)
 8000e0c:	482f      	ldr	r0, [pc, #188]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e0e:	f7ff fb8c 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2100      	movs	r1, #0
 8000e16:	482d      	ldr	r0, [pc, #180]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e18:	f7ff fb2c 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> GUEST CARD");
 8000e1c:	493b      	ldr	r1, [pc, #236]	@ (8000f0c <seclectmenu+0x324>)
 8000e1e:	482b      	ldr	r0, [pc, #172]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e20:	f7ff fb83 	bl	800052a <CLCD_WriteString>
							break;
 8000e24:	e015      	b.n	8000e52 <seclectmenu+0x26a>
						default:
							CLCD_Clear(&LCD1);
 8000e26:	4829      	ldr	r0, [pc, #164]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e28:	f7ff fb96 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4826      	ldr	r0, [pc, #152]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e32:	f7ff fb1f 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   GUEST CARD");
 8000e36:	4933      	ldr	r1, [pc, #204]	@ (8000f04 <seclectmenu+0x31c>)
 8000e38:	4824      	ldr	r0, [pc, #144]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e3a:	f7ff fb76 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2100      	movs	r1, #0
 8000e42:	4822      	ldr	r0, [pc, #136]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e44:	f7ff fb16 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 8000e48:	4931      	ldr	r1, [pc, #196]	@ (8000f10 <seclectmenu+0x328>)
 8000e4a:	4820      	ldr	r0, [pc, #128]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e4c:	f7ff fb6d 	bl	800052a <CLCD_WriteString>
							break;
 8000e50:	bf00      	nop
						}
					}
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e56:	4828      	ldr	r0, [pc, #160]	@ (8000ef8 <seclectmenu+0x310>)
 8000e58:	f7ff fe78 	bl	8000b4c <checkbuton>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8516 	beq.w	8001890 <seclectmenu+0xca8>
					{
						exitmenu = 15;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <seclectmenu+0x2e0>)
 8000e66:	220f      	movs	r2, #15
 8000e68:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d004      	beq.n	8000e7a <seclectmenu+0x292>
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	f000 8286 	beq.w	8001382 <seclectmenu+0x79a>
 8000e76:	f000 bd08 	b.w	800188a <seclectmenu+0xca2>
						{
						case 1:
							CLCD_Clear(&LCD1);
 8000e7a:	4814      	ldr	r0, [pc, #80]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e7c:	f7ff fb6c 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	4811      	ldr	r0, [pc, #68]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e86:	f7ff faf5 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8000e8a:	4922      	ldr	r1, [pc, #136]	@ (8000f14 <seclectmenu+0x32c>)
 8000e8c:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e8e:	f7ff fb4c 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2100      	movs	r1, #0
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <seclectmenu+0x2e4>)
 8000e98:	f7ff faec 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8000e9c:	491e      	ldr	r1, [pc, #120]	@ (8000f18 <seclectmenu+0x330>)
 8000e9e:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <seclectmenu+0x2e4>)
 8000ea0:	f7ff fb43 	bl	800052a <CLCD_WriteString>
							uint8_t statusadd1 = 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8000eac:	e24f      	b.n	800134e <seclectmenu+0x766>
							{
								if (exitmenu == 0)
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <seclectmenu+0x2e0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d132      	bne.n	8000f1c <seclectmenu+0x334>
								{
									CLCD_Clear(&LCD1);
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <seclectmenu+0x2e4>)
 8000eb8:	f7ff fb4e 	bl	8000558 <CLCD_Clear>
									HAL_Delay(1000);
 8000ebc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ec0:	f002 ff4c 	bl	8003d5c <HAL_Delay>
									return;
 8000ec4:	f001 bdfb 	b.w	8002abe <seclectmenu+0x1ed6>
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	200001ec 	.word	0x200001ec
 8000ed0:	080069d8 	.word	0x080069d8
 8000ed4:	080069e8 	.word	0x080069e8
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	080069f8 	.word	0x080069f8
 8000ee0:	08006a08 	.word	0x08006a08
 8000ee4:	08006a18 	.word	0x08006a18
 8000ee8:	08006a28 	.word	0x08006a28
 8000eec:	08006a38 	.word	0x08006a38
 8000ef0:	08006a48 	.word	0x08006a48
 8000ef4:	08006a58 	.word	0x08006a58
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	08006a64 	.word	0x08006a64
 8000f00:	08006a70 	.word	0x08006a70
 8000f04:	08006a80 	.word	0x08006a80
 8000f08:	0800699c 	.word	0x0800699c
 8000f0c:	08006a90 	.word	0x08006a90
 8000f10:	08006aa0 	.word	0x08006aa0
 8000f14:	08006aa8 	.word	0x08006aa8
 8000f18:	08006abc 	.word	0x08006abc
								}
								if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 8000f1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f20:	48a9      	ldr	r0, [pc, #676]	@ (80011c8 <seclectmenu+0x5e0>)
 8000f22:	f7ff fe13 	bl	8000b4c <checkbuton>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 808b 	beq.w	8001044 <seclectmenu+0x45c>
								{
									exitmenu = 15;
 8000f2e:	4ba7      	ldr	r3, [pc, #668]	@ (80011cc <seclectmenu+0x5e4>)
 8000f30:	220f      	movs	r2, #15
 8000f32:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 8000f34:	7d3b      	ldrb	r3, [r7, #20]
 8000f36:	3301      	adds	r3, #1
 8000f38:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8000f3a:	7d3b      	ldrb	r3, [r7, #20]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d801      	bhi.n	8000f44 <seclectmenu+0x35c>
 8000f40:	7d3b      	ldrb	r3, [r7, #20]
 8000f42:	e000      	b.n	8000f46 <seclectmenu+0x35e>
 8000f44:	2300      	movs	r3, #0
 8000f46:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 8000f48:	7d3b      	ldrb	r3, [r7, #20]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d863      	bhi.n	8001018 <seclectmenu+0x430>
 8000f50:	a201      	add	r2, pc, #4	@ (adr r2, 8000f58 <seclectmenu+0x370>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f69 	.word	0x08000f69
 8000f5c:	08000f95 	.word	0x08000f95
 8000f60:	08000fc1 	.word	0x08000fc1
 8000f64:	08000fed 	.word	0x08000fed
									{
									case 1:
										CLCD_Clear(&LCD1);
 8000f68:	4899      	ldr	r0, [pc, #612]	@ (80011d0 <seclectmenu+0x5e8>)
 8000f6a:	f7ff faf5 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	4897      	ldr	r0, [pc, #604]	@ (80011d0 <seclectmenu+0x5e8>)
 8000f74:	f7ff fa7e 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8000f78:	4996      	ldr	r1, [pc, #600]	@ (80011d4 <seclectmenu+0x5ec>)
 8000f7a:	4895      	ldr	r0, [pc, #596]	@ (80011d0 <seclectmenu+0x5e8>)
 8000f7c:	f7ff fad5 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2100      	movs	r1, #0
 8000f84:	4892      	ldr	r0, [pc, #584]	@ (80011d0 <seclectmenu+0x5e8>)
 8000f86:	f7ff fa75 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8000f8a:	4993      	ldr	r1, [pc, #588]	@ (80011d8 <seclectmenu+0x5f0>)
 8000f8c:	4890      	ldr	r0, [pc, #576]	@ (80011d0 <seclectmenu+0x5e8>)
 8000f8e:	f7ff facc 	bl	800052a <CLCD_WriteString>
										break;
 8000f92:	e057      	b.n	8001044 <seclectmenu+0x45c>
									case 2:
										CLCD_Clear(&LCD1);
 8000f94:	488e      	ldr	r0, [pc, #568]	@ (80011d0 <seclectmenu+0x5e8>)
 8000f96:	f7ff fadf 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	488c      	ldr	r0, [pc, #560]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fa0:	f7ff fa68 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 8000fa4:	498d      	ldr	r1, [pc, #564]	@ (80011dc <seclectmenu+0x5f4>)
 8000fa6:	488a      	ldr	r0, [pc, #552]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fa8:	f7ff fabf 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4887      	ldr	r0, [pc, #540]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fb2:	f7ff fa5f 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 8000fb6:	498a      	ldr	r1, [pc, #552]	@ (80011e0 <seclectmenu+0x5f8>)
 8000fb8:	4885      	ldr	r0, [pc, #532]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fba:	f7ff fab6 	bl	800052a <CLCD_WriteString>
										break;
 8000fbe:	e041      	b.n	8001044 <seclectmenu+0x45c>
									case 3:
										CLCD_Clear(&LCD1);
 8000fc0:	4883      	ldr	r0, [pc, #524]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fc2:	f7ff fac9 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4881      	ldr	r0, [pc, #516]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fcc:	f7ff fa52 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 8000fd0:	4984      	ldr	r1, [pc, #528]	@ (80011e4 <seclectmenu+0x5fc>)
 8000fd2:	487f      	ldr	r0, [pc, #508]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fd4:	f7ff faa9 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2100      	movs	r1, #0
 8000fdc:	487c      	ldr	r0, [pc, #496]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fde:	f7ff fa49 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8000fe2:	4981      	ldr	r1, [pc, #516]	@ (80011e8 <seclectmenu+0x600>)
 8000fe4:	487a      	ldr	r0, [pc, #488]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fe6:	f7ff faa0 	bl	800052a <CLCD_WriteString>
										break;
 8000fea:	e02b      	b.n	8001044 <seclectmenu+0x45c>
									case 4:
										CLCD_Clear(&LCD1);
 8000fec:	4878      	ldr	r0, [pc, #480]	@ (80011d0 <seclectmenu+0x5e8>)
 8000fee:	f7ff fab3 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4876      	ldr	r0, [pc, #472]	@ (80011d0 <seclectmenu+0x5e8>)
 8000ff8:	f7ff fa3c 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8000ffc:	497b      	ldr	r1, [pc, #492]	@ (80011ec <seclectmenu+0x604>)
 8000ffe:	4874      	ldr	r0, [pc, #464]	@ (80011d0 <seclectmenu+0x5e8>)
 8001000:	f7ff fa93 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	2100      	movs	r1, #0
 8001008:	4871      	ldr	r0, [pc, #452]	@ (80011d0 <seclectmenu+0x5e8>)
 800100a:	f7ff fa33 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 800100e:	4978      	ldr	r1, [pc, #480]	@ (80011f0 <seclectmenu+0x608>)
 8001010:	486f      	ldr	r0, [pc, #444]	@ (80011d0 <seclectmenu+0x5e8>)
 8001012:	f7ff fa8a 	bl	800052a <CLCD_WriteString>
										break;
 8001016:	e015      	b.n	8001044 <seclectmenu+0x45c>
									default:
										CLCD_Clear(&LCD1);
 8001018:	486d      	ldr	r0, [pc, #436]	@ (80011d0 <seclectmenu+0x5e8>)
 800101a:	f7ff fa9d 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	486b      	ldr	r0, [pc, #428]	@ (80011d0 <seclectmenu+0x5e8>)
 8001024:	f7ff fa26 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8001028:	496f      	ldr	r1, [pc, #444]	@ (80011e8 <seclectmenu+0x600>)
 800102a:	4869      	ldr	r0, [pc, #420]	@ (80011d0 <seclectmenu+0x5e8>)
 800102c:	f7ff fa7d 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	2100      	movs	r1, #0
 8001034:	4866      	ldr	r0, [pc, #408]	@ (80011d0 <seclectmenu+0x5e8>)
 8001036:	f7ff fa1d 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800103a:	496e      	ldr	r1, [pc, #440]	@ (80011f4 <seclectmenu+0x60c>)
 800103c:	4864      	ldr	r0, [pc, #400]	@ (80011d0 <seclectmenu+0x5e8>)
 800103e:	f7ff fa74 	bl	800052a <CLCD_WriteString>
										break;
 8001042:	bf00      	nop
									}
								}
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001044:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001048:	486b      	ldr	r0, [pc, #428]	@ (80011f8 <seclectmenu+0x610>)
 800104a:	f7ff fd7f 	bl	8000b4c <checkbuton>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 817c 	beq.w	800134e <seclectmenu+0x766>
								{
									exitmenu = 15;
 8001056:	4b5d      	ldr	r3, [pc, #372]	@ (80011cc <seclectmenu+0x5e4>)
 8001058:	220f      	movs	r2, #15
 800105a:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 800105c:	7dbb      	ldrb	r3, [r7, #22]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	b2da      	uxtb	r2, r3
 8001062:	7d3b      	ldrb	r3, [r7, #20]
 8001064:	4413      	add	r3, r2
 8001066:	70bb      	strb	r3, [r7, #2]
									switch (statusadd1)
 8001068:	7d3b      	ldrb	r3, [r7, #20]
 800106a:	3b01      	subs	r3, #1
 800106c:	2b03      	cmp	r3, #3
 800106e:	f200 816b 	bhi.w	8001348 <seclectmenu+0x760>
 8001072:	a201      	add	r2, pc, #4	@ (adr r2, 8001078 <seclectmenu+0x490>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001089 	.word	0x08001089
 800107c:	08001129 	.word	0x08001129
 8001080:	08001209 	.word	0x08001209
 8001084:	080012a9 	.word	0x080012a9
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 8001088:	78bb      	ldrb	r3, [r7, #2]
 800108a:	4618      	mov	r0, r3
 800108c:	f001 ffd8 	bl	8003040 <CheckKey>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d02e      	beq.n	80010f4 <seclectmenu+0x50c>
										{
											CLCD_Clear(&LCD1);
 8001096:	484e      	ldr	r0, [pc, #312]	@ (80011d0 <seclectmenu+0x5e8>)
 8001098:	f7ff fa5e 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	484b      	ldr	r0, [pc, #300]	@ (80011d0 <seclectmenu+0x5e8>)
 80010a2:	f7ff f9e7 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "ADMIN 1");
 80010a6:	4955      	ldr	r1, [pc, #340]	@ (80011fc <seclectmenu+0x614>)
 80010a8:	4849      	ldr	r0, [pc, #292]	@ (80011d0 <seclectmenu+0x5e8>)
 80010aa:	f7ff fa3e 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2100      	movs	r1, #0
 80010b2:	4847      	ldr	r0, [pc, #284]	@ (80011d0 <seclectmenu+0x5e8>)
 80010b4:	f7ff f9de 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 80010b8:	4951      	ldr	r1, [pc, #324]	@ (8001200 <seclectmenu+0x618>)
 80010ba:	4845      	ldr	r0, [pc, #276]	@ (80011d0 <seclectmenu+0x5e8>)
 80010bc:	f7ff fa35 	bl	800052a <CLCD_WriteString>
											HAL_Delay(1000);
 80010c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010c4:	f002 fe4a 	bl	8003d5c <HAL_Delay>
											CLCD_Clear(&LCD1);
 80010c8:	4841      	ldr	r0, [pc, #260]	@ (80011d0 <seclectmenu+0x5e8>)
 80010ca:	f7ff fa45 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	483f      	ldr	r0, [pc, #252]	@ (80011d0 <seclectmenu+0x5e8>)
 80010d4:	f7ff f9ce 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 80010d8:	493e      	ldr	r1, [pc, #248]	@ (80011d4 <seclectmenu+0x5ec>)
 80010da:	483d      	ldr	r0, [pc, #244]	@ (80011d0 <seclectmenu+0x5e8>)
 80010dc:	f7ff fa25 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2100      	movs	r1, #0
 80010e4:	483a      	ldr	r0, [pc, #232]	@ (80011d0 <seclectmenu+0x5e8>)
 80010e6:	f7ff f9c5 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 80010ea:	493b      	ldr	r1, [pc, #236]	@ (80011d8 <seclectmenu+0x5f0>)
 80010ec:	4838      	ldr	r0, [pc, #224]	@ (80011d0 <seclectmenu+0x5e8>)
 80010ee:	f7ff fa1c 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
										}
										break;
 80010f2:	e12c      	b.n	800134e <seclectmenu+0x766>
											adduid(keyadd1);
 80010f4:	78bb      	ldrb	r3, [r7, #2]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fd98 	bl	8002c2c <adduid>
											CLCD_Clear(&LCD1);
 80010fc:	4834      	ldr	r0, [pc, #208]	@ (80011d0 <seclectmenu+0x5e8>)
 80010fe:	f7ff fa2b 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	4832      	ldr	r0, [pc, #200]	@ (80011d0 <seclectmenu+0x5e8>)
 8001108:	f7ff f9b4 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 800110c:	4931      	ldr	r1, [pc, #196]	@ (80011d4 <seclectmenu+0x5ec>)
 800110e:	4830      	ldr	r0, [pc, #192]	@ (80011d0 <seclectmenu+0x5e8>)
 8001110:	f7ff fa0b 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	2100      	movs	r1, #0
 8001118:	482d      	ldr	r0, [pc, #180]	@ (80011d0 <seclectmenu+0x5e8>)
 800111a:	f7ff f9ab 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 800111e:	492e      	ldr	r1, [pc, #184]	@ (80011d8 <seclectmenu+0x5f0>)
 8001120:	482b      	ldr	r0, [pc, #172]	@ (80011d0 <seclectmenu+0x5e8>)
 8001122:	f7ff fa02 	bl	800052a <CLCD_WriteString>
										break;
 8001126:	e112      	b.n	800134e <seclectmenu+0x766>
									case 2:
										if (CheckKey(keyadd1) != 0)
 8001128:	78bb      	ldrb	r3, [r7, #2]
 800112a:	4618      	mov	r0, r3
 800112c:	f001 ff88 	bl	8003040 <CheckKey>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02e      	beq.n	8001194 <seclectmenu+0x5ac>
										{
											CLCD_Clear(&LCD1);
 8001136:	4826      	ldr	r0, [pc, #152]	@ (80011d0 <seclectmenu+0x5e8>)
 8001138:	f7ff fa0e 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	4823      	ldr	r0, [pc, #140]	@ (80011d0 <seclectmenu+0x5e8>)
 8001142:	f7ff f997 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "ADMIN 2");
 8001146:	492f      	ldr	r1, [pc, #188]	@ (8001204 <seclectmenu+0x61c>)
 8001148:	4821      	ldr	r0, [pc, #132]	@ (80011d0 <seclectmenu+0x5e8>)
 800114a:	f7ff f9ee 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	2100      	movs	r1, #0
 8001152:	481f      	ldr	r0, [pc, #124]	@ (80011d0 <seclectmenu+0x5e8>)
 8001154:	f7ff f98e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001158:	4929      	ldr	r1, [pc, #164]	@ (8001200 <seclectmenu+0x618>)
 800115a:	481d      	ldr	r0, [pc, #116]	@ (80011d0 <seclectmenu+0x5e8>)
 800115c:	f7ff f9e5 	bl	800052a <CLCD_WriteString>
											HAL_Delay(1000);
 8001160:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001164:	f002 fdfa 	bl	8003d5c <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001168:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <seclectmenu+0x5e8>)
 800116a:	f7ff f9f5 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <seclectmenu+0x5e8>)
 8001174:	f7ff f97e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 8001178:	4918      	ldr	r1, [pc, #96]	@ (80011dc <seclectmenu+0x5f4>)
 800117a:	4815      	ldr	r0, [pc, #84]	@ (80011d0 <seclectmenu+0x5e8>)
 800117c:	f7ff f9d5 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2100      	movs	r1, #0
 8001184:	4812      	ldr	r0, [pc, #72]	@ (80011d0 <seclectmenu+0x5e8>)
 8001186:	f7ff f975 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 800118a:	4915      	ldr	r1, [pc, #84]	@ (80011e0 <seclectmenu+0x5f8>)
 800118c:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <seclectmenu+0x5e8>)
 800118e:	f7ff f9cc 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
										}
										break;
 8001192:	e0dc      	b.n	800134e <seclectmenu+0x766>
											adduid(keyadd1);
 8001194:	78bb      	ldrb	r3, [r7, #2]
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fd48 	bl	8002c2c <adduid>
											CLCD_Clear(&LCD1);
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <seclectmenu+0x5e8>)
 800119e:	f7ff f9db 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <seclectmenu+0x5e8>)
 80011a8:	f7ff f964 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 80011ac:	490b      	ldr	r1, [pc, #44]	@ (80011dc <seclectmenu+0x5f4>)
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <seclectmenu+0x5e8>)
 80011b0:	f7ff f9bb 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2100      	movs	r1, #0
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <seclectmenu+0x5e8>)
 80011ba:	f7ff f95b 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <seclectmenu+0x5f8>)
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <seclectmenu+0x5e8>)
 80011c2:	f7ff f9b2 	bl	800052a <CLCD_WriteString>
										break;
 80011c6:	e0c2      	b.n	800134e <seclectmenu+0x766>
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	20000000 	.word	0x20000000
 80011d0:	200001ec 	.word	0x200001ec
 80011d4:	08006aa8 	.word	0x08006aa8
 80011d8:	08006abc 	.word	0x08006abc
 80011dc:	08006ad0 	.word	0x08006ad0
 80011e0:	08006ae4 	.word	0x08006ae4
 80011e4:	08006af8 	.word	0x08006af8
 80011e8:	08006b0c 	.word	0x08006b0c
 80011ec:	08006b20 	.word	0x08006b20
 80011f0:	08006b34 	.word	0x08006b34
 80011f4:	08006a58 	.word	0x08006a58
 80011f8:	40010800 	.word	0x40010800
 80011fc:	08006b40 	.word	0x08006b40
 8001200:	08006b48 	.word	0x08006b48
 8001204:	08006b54 	.word	0x08006b54
									case 3:
										if (CheckKey(keyadd1) != 0)
 8001208:	78bb      	ldrb	r3, [r7, #2]
 800120a:	4618      	mov	r0, r3
 800120c:	f001 ff18 	bl	8003040 <CheckKey>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d02e      	beq.n	8001274 <seclectmenu+0x68c>
										{
											CLCD_Clear(&LCD1);
 8001216:	48ad      	ldr	r0, [pc, #692]	@ (80014cc <seclectmenu+0x8e4>)
 8001218:	f7ff f99e 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	48aa      	ldr	r0, [pc, #680]	@ (80014cc <seclectmenu+0x8e4>)
 8001222:	f7ff f927 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "ADMIN 3");
 8001226:	49aa      	ldr	r1, [pc, #680]	@ (80014d0 <seclectmenu+0x8e8>)
 8001228:	48a8      	ldr	r0, [pc, #672]	@ (80014cc <seclectmenu+0x8e4>)
 800122a:	f7ff f97e 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800122e:	2201      	movs	r2, #1
 8001230:	2100      	movs	r1, #0
 8001232:	48a6      	ldr	r0, [pc, #664]	@ (80014cc <seclectmenu+0x8e4>)
 8001234:	f7ff f91e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001238:	49a6      	ldr	r1, [pc, #664]	@ (80014d4 <seclectmenu+0x8ec>)
 800123a:	48a4      	ldr	r0, [pc, #656]	@ (80014cc <seclectmenu+0x8e4>)
 800123c:	f7ff f975 	bl	800052a <CLCD_WriteString>
											HAL_Delay(1000);
 8001240:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001244:	f002 fd8a 	bl	8003d5c <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001248:	48a0      	ldr	r0, [pc, #640]	@ (80014cc <seclectmenu+0x8e4>)
 800124a:	f7ff f985 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	489e      	ldr	r0, [pc, #632]	@ (80014cc <seclectmenu+0x8e4>)
 8001254:	f7ff f90e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 8001258:	499f      	ldr	r1, [pc, #636]	@ (80014d8 <seclectmenu+0x8f0>)
 800125a:	489c      	ldr	r0, [pc, #624]	@ (80014cc <seclectmenu+0x8e4>)
 800125c:	f7ff f965 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	2100      	movs	r1, #0
 8001264:	4899      	ldr	r0, [pc, #612]	@ (80014cc <seclectmenu+0x8e4>)
 8001266:	f7ff f905 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 800126a:	499c      	ldr	r1, [pc, #624]	@ (80014dc <seclectmenu+0x8f4>)
 800126c:	4897      	ldr	r0, [pc, #604]	@ (80014cc <seclectmenu+0x8e4>)
 800126e:	f7ff f95c 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
										}
										break;
 8001272:	e06c      	b.n	800134e <seclectmenu+0x766>
											adduid(keyadd1);
 8001274:	78bb      	ldrb	r3, [r7, #2]
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fcd8 	bl	8002c2c <adduid>
											CLCD_Clear(&LCD1);
 800127c:	4893      	ldr	r0, [pc, #588]	@ (80014cc <seclectmenu+0x8e4>)
 800127e:	f7ff f96b 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	4891      	ldr	r0, [pc, #580]	@ (80014cc <seclectmenu+0x8e4>)
 8001288:	f7ff f8f4 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 800128c:	4992      	ldr	r1, [pc, #584]	@ (80014d8 <seclectmenu+0x8f0>)
 800128e:	488f      	ldr	r0, [pc, #572]	@ (80014cc <seclectmenu+0x8e4>)
 8001290:	f7ff f94b 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	2100      	movs	r1, #0
 8001298:	488c      	ldr	r0, [pc, #560]	@ (80014cc <seclectmenu+0x8e4>)
 800129a:	f7ff f8eb 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 800129e:	498f      	ldr	r1, [pc, #572]	@ (80014dc <seclectmenu+0x8f4>)
 80012a0:	488a      	ldr	r0, [pc, #552]	@ (80014cc <seclectmenu+0x8e4>)
 80012a2:	f7ff f942 	bl	800052a <CLCD_WriteString>
										break;
 80012a6:	e052      	b.n	800134e <seclectmenu+0x766>
									case 4:
										if (CheckKey(keyadd1) != 0)
 80012a8:	78bb      	ldrb	r3, [r7, #2]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fec8 	bl	8003040 <CheckKey>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d02e      	beq.n	8001314 <seclectmenu+0x72c>
										{
											CLCD_Clear(&LCD1);
 80012b6:	4885      	ldr	r0, [pc, #532]	@ (80014cc <seclectmenu+0x8e4>)
 80012b8:	f7ff f94e 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	4882      	ldr	r0, [pc, #520]	@ (80014cc <seclectmenu+0x8e4>)
 80012c2:	f7ff f8d7 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "ADMIN 4");
 80012c6:	4986      	ldr	r1, [pc, #536]	@ (80014e0 <seclectmenu+0x8f8>)
 80012c8:	4880      	ldr	r0, [pc, #512]	@ (80014cc <seclectmenu+0x8e4>)
 80012ca:	f7ff f92e 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2100      	movs	r1, #0
 80012d2:	487e      	ldr	r0, [pc, #504]	@ (80014cc <seclectmenu+0x8e4>)
 80012d4:	f7ff f8ce 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 80012d8:	497e      	ldr	r1, [pc, #504]	@ (80014d4 <seclectmenu+0x8ec>)
 80012da:	487c      	ldr	r0, [pc, #496]	@ (80014cc <seclectmenu+0x8e4>)
 80012dc:	f7ff f925 	bl	800052a <CLCD_WriteString>
											HAL_Delay(1000);
 80012e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e4:	f002 fd3a 	bl	8003d5c <HAL_Delay>
											CLCD_Clear(&LCD1);
 80012e8:	4878      	ldr	r0, [pc, #480]	@ (80014cc <seclectmenu+0x8e4>)
 80012ea:	f7ff f935 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	4876      	ldr	r0, [pc, #472]	@ (80014cc <seclectmenu+0x8e4>)
 80012f4:	f7ff f8be 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 80012f8:	497a      	ldr	r1, [pc, #488]	@ (80014e4 <seclectmenu+0x8fc>)
 80012fa:	4874      	ldr	r0, [pc, #464]	@ (80014cc <seclectmenu+0x8e4>)
 80012fc:	f7ff f915 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	2100      	movs	r1, #0
 8001304:	4871      	ldr	r0, [pc, #452]	@ (80014cc <seclectmenu+0x8e4>)
 8001306:	f7ff f8b5 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 800130a:	4977      	ldr	r1, [pc, #476]	@ (80014e8 <seclectmenu+0x900>)
 800130c:	486f      	ldr	r0, [pc, #444]	@ (80014cc <seclectmenu+0x8e4>)
 800130e:	f7ff f90c 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    BACK ");
										}
										break;
 8001312:	e01c      	b.n	800134e <seclectmenu+0x766>
											adduid(keyadd1);
 8001314:	78bb      	ldrb	r3, [r7, #2]
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fc88 	bl	8002c2c <adduid>
											CLCD_Clear(&LCD1);
 800131c:	486b      	ldr	r0, [pc, #428]	@ (80014cc <seclectmenu+0x8e4>)
 800131e:	f7ff f91b 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	4869      	ldr	r0, [pc, #420]	@ (80014cc <seclectmenu+0x8e4>)
 8001328:	f7ff f8a4 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 800132c:	496d      	ldr	r1, [pc, #436]	@ (80014e4 <seclectmenu+0x8fc>)
 800132e:	4867      	ldr	r0, [pc, #412]	@ (80014cc <seclectmenu+0x8e4>)
 8001330:	f7ff f8fb 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	2100      	movs	r1, #0
 8001338:	4864      	ldr	r0, [pc, #400]	@ (80014cc <seclectmenu+0x8e4>)
 800133a:	f7ff f89b 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 800133e:	496a      	ldr	r1, [pc, #424]	@ (80014e8 <seclectmenu+0x900>)
 8001340:	4862      	ldr	r0, [pc, #392]	@ (80014cc <seclectmenu+0x8e4>)
 8001342:	f7ff f8f2 	bl	800052a <CLCD_WriteString>
										break;
 8001346:	e002      	b.n	800134e <seclectmenu+0x766>
									default:
										back11 = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	74fb      	strb	r3, [r7, #19]
										break;
 800134c:	bf00      	nop
							while (back11 == 1)
 800134e:	7cfb      	ldrb	r3, [r7, #19]
 8001350:	2b01      	cmp	r3, #1
 8001352:	f43f adac 	beq.w	8000eae <seclectmenu+0x2c6>
									}
								}
							}
							CLCD_Clear(&LCD1);
 8001356:	485d      	ldr	r0, [pc, #372]	@ (80014cc <seclectmenu+0x8e4>)
 8001358:	f7ff f8fe 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	485a      	ldr	r0, [pc, #360]	@ (80014cc <seclectmenu+0x8e4>)
 8001362:	f7ff f887 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8001366:	4961      	ldr	r1, [pc, #388]	@ (80014ec <seclectmenu+0x904>)
 8001368:	4858      	ldr	r0, [pc, #352]	@ (80014cc <seclectmenu+0x8e4>)
 800136a:	f7ff f8de 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 800136e:	2201      	movs	r2, #1
 8001370:	2100      	movs	r1, #0
 8001372:	4856      	ldr	r0, [pc, #344]	@ (80014cc <seclectmenu+0x8e4>)
 8001374:	f7ff f87e 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   GUEST CARD");
 8001378:	495d      	ldr	r1, [pc, #372]	@ (80014f0 <seclectmenu+0x908>)
 800137a:	4854      	ldr	r0, [pc, #336]	@ (80014cc <seclectmenu+0x8e4>)
 800137c:	f7ff f8d5 	bl	800052a <CLCD_WriteString>
							break;
 8001380:	e286      	b.n	8001890 <seclectmenu+0xca8>
						case 2:
							CLCD_Clear(&LCD1);
 8001382:	4852      	ldr	r0, [pc, #328]	@ (80014cc <seclectmenu+0x8e4>)
 8001384:	f7ff f8e8 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	484f      	ldr	r0, [pc, #316]	@ (80014cc <seclectmenu+0x8e4>)
 800138e:	f7ff f871 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 8001392:	4958      	ldr	r1, [pc, #352]	@ (80014f4 <seclectmenu+0x90c>)
 8001394:	484d      	ldr	r0, [pc, #308]	@ (80014cc <seclectmenu+0x8e4>)
 8001396:	f7ff f8c8 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	2100      	movs	r1, #0
 800139e:	484b      	ldr	r0, [pc, #300]	@ (80014cc <seclectmenu+0x8e4>)
 80013a0:	f7ff f868 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 80013a4:	4954      	ldr	r1, [pc, #336]	@ (80014f8 <seclectmenu+0x910>)
 80013a6:	4849      	ldr	r0, [pc, #292]	@ (80014cc <seclectmenu+0x8e4>)
 80013a8:	f7ff f8bf 	bl	800052a <CLCD_WriteString>
							uint8_t statusadd2 = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 80013b4:	e24f      	b.n	8001856 <seclectmenu+0xc6e>
							{
								if (exitmenu == 0)
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <seclectmenu+0x914>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d108      	bne.n	80013d0 <seclectmenu+0x7e8>
								{
									CLCD_Clear(&LCD1);
 80013be:	4843      	ldr	r0, [pc, #268]	@ (80014cc <seclectmenu+0x8e4>)
 80013c0:	f7ff f8ca 	bl	8000558 <CLCD_Clear>
									HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c8:	f002 fcc8 	bl	8003d5c <HAL_Delay>
									return;
 80013cc:	f001 bb77 	b.w	8002abe <seclectmenu+0x1ed6>
								}
								if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 80013d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013d4:	484a      	ldr	r0, [pc, #296]	@ (8001500 <seclectmenu+0x918>)
 80013d6:	f7ff fbb9 	bl	8000b4c <checkbuton>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80b1 	beq.w	8001544 <seclectmenu+0x95c>
								{
									exitmenu = 15;
 80013e2:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <seclectmenu+0x914>)
 80013e4:	220f      	movs	r2, #15
 80013e6:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 80013e8:	7cbb      	ldrb	r3, [r7, #18]
 80013ea:	3301      	adds	r3, #1
 80013ec:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 80013ee:	7cbb      	ldrb	r3, [r7, #18]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d801      	bhi.n	80013f8 <seclectmenu+0x810>
 80013f4:	7cbb      	ldrb	r3, [r7, #18]
 80013f6:	e000      	b.n	80013fa <seclectmenu+0x812>
 80013f8:	2300      	movs	r3, #0
 80013fa:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 80013fc:	7cbb      	ldrb	r3, [r7, #18]
 80013fe:	3b01      	subs	r3, #1
 8001400:	2b03      	cmp	r3, #3
 8001402:	f200 8089 	bhi.w	8001518 <seclectmenu+0x930>
 8001406:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <seclectmenu+0x824>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001449 	.word	0x08001449
 8001414:	08001475 	.word	0x08001475
 8001418:	080014a1 	.word	0x080014a1
									{
									case 1:
										CLCD_Clear(&LCD1);
 800141c:	482b      	ldr	r0, [pc, #172]	@ (80014cc <seclectmenu+0x8e4>)
 800141e:	f7ff f89b 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	4829      	ldr	r0, [pc, #164]	@ (80014cc <seclectmenu+0x8e4>)
 8001428:	f7ff f824 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 800142c:	4931      	ldr	r1, [pc, #196]	@ (80014f4 <seclectmenu+0x90c>)
 800142e:	4827      	ldr	r0, [pc, #156]	@ (80014cc <seclectmenu+0x8e4>)
 8001430:	f7ff f87b 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	2100      	movs	r1, #0
 8001438:	4824      	ldr	r0, [pc, #144]	@ (80014cc <seclectmenu+0x8e4>)
 800143a:	f7ff f81b 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 800143e:	492e      	ldr	r1, [pc, #184]	@ (80014f8 <seclectmenu+0x910>)
 8001440:	4822      	ldr	r0, [pc, #136]	@ (80014cc <seclectmenu+0x8e4>)
 8001442:	f7ff f872 	bl	800052a <CLCD_WriteString>
										break;
 8001446:	e07d      	b.n	8001544 <seclectmenu+0x95c>
									case 2:
										CLCD_Clear(&LCD1);
 8001448:	4820      	ldr	r0, [pc, #128]	@ (80014cc <seclectmenu+0x8e4>)
 800144a:	f7ff f885 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	481e      	ldr	r0, [pc, #120]	@ (80014cc <seclectmenu+0x8e4>)
 8001454:	f7ff f80e 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 8001458:	492a      	ldr	r1, [pc, #168]	@ (8001504 <seclectmenu+0x91c>)
 800145a:	481c      	ldr	r0, [pc, #112]	@ (80014cc <seclectmenu+0x8e4>)
 800145c:	f7ff f865 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001460:	2201      	movs	r2, #1
 8001462:	2100      	movs	r1, #0
 8001464:	4819      	ldr	r0, [pc, #100]	@ (80014cc <seclectmenu+0x8e4>)
 8001466:	f7ff f805 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 800146a:	4927      	ldr	r1, [pc, #156]	@ (8001508 <seclectmenu+0x920>)
 800146c:	4817      	ldr	r0, [pc, #92]	@ (80014cc <seclectmenu+0x8e4>)
 800146e:	f7ff f85c 	bl	800052a <CLCD_WriteString>
										break;
 8001472:	e067      	b.n	8001544 <seclectmenu+0x95c>
									case 3:
										CLCD_Clear(&LCD1);
 8001474:	4815      	ldr	r0, [pc, #84]	@ (80014cc <seclectmenu+0x8e4>)
 8001476:	f7ff f86f 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	4813      	ldr	r0, [pc, #76]	@ (80014cc <seclectmenu+0x8e4>)
 8001480:	f7fe fff8 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 8001484:	4921      	ldr	r1, [pc, #132]	@ (800150c <seclectmenu+0x924>)
 8001486:	4811      	ldr	r0, [pc, #68]	@ (80014cc <seclectmenu+0x8e4>)
 8001488:	f7ff f84f 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800148c:	2201      	movs	r2, #1
 800148e:	2100      	movs	r1, #0
 8001490:	480e      	ldr	r0, [pc, #56]	@ (80014cc <seclectmenu+0x8e4>)
 8001492:	f7fe ffef 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 8001496:	491e      	ldr	r1, [pc, #120]	@ (8001510 <seclectmenu+0x928>)
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <seclectmenu+0x8e4>)
 800149a:	f7ff f846 	bl	800052a <CLCD_WriteString>
										break;
 800149e:	e051      	b.n	8001544 <seclectmenu+0x95c>
									case 4:
										CLCD_Clear(&LCD1);
 80014a0:	480a      	ldr	r0, [pc, #40]	@ (80014cc <seclectmenu+0x8e4>)
 80014a2:	f7ff f859 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	4808      	ldr	r0, [pc, #32]	@ (80014cc <seclectmenu+0x8e4>)
 80014ac:	f7fe ffe2 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 80014b0:	4918      	ldr	r1, [pc, #96]	@ (8001514 <seclectmenu+0x92c>)
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <seclectmenu+0x8e4>)
 80014b4:	f7ff f839 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2100      	movs	r1, #0
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <seclectmenu+0x8e4>)
 80014be:	f7fe ffd9 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 80014c2:	4909      	ldr	r1, [pc, #36]	@ (80014e8 <seclectmenu+0x900>)
 80014c4:	4801      	ldr	r0, [pc, #4]	@ (80014cc <seclectmenu+0x8e4>)
 80014c6:	f7ff f830 	bl	800052a <CLCD_WriteString>
										break;
 80014ca:	e03b      	b.n	8001544 <seclectmenu+0x95c>
 80014cc:	200001ec 	.word	0x200001ec
 80014d0:	08006b5c 	.word	0x08006b5c
 80014d4:	08006b48 	.word	0x08006b48
 80014d8:	08006af8 	.word	0x08006af8
 80014dc:	08006b0c 	.word	0x08006b0c
 80014e0:	08006b64 	.word	0x08006b64
 80014e4:	08006b20 	.word	0x08006b20
 80014e8:	08006b34 	.word	0x08006b34
 80014ec:	08006a70 	.word	0x08006a70
 80014f0:	08006a80 	.word	0x08006a80
 80014f4:	08006b6c 	.word	0x08006b6c
 80014f8:	08006b80 	.word	0x08006b80
 80014fc:	20000000 	.word	0x20000000
 8001500:	40010c00 	.word	0x40010c00
 8001504:	08006b94 	.word	0x08006b94
 8001508:	08006ba8 	.word	0x08006ba8
 800150c:	08006bbc 	.word	0x08006bbc
 8001510:	08006bd0 	.word	0x08006bd0
 8001514:	08006be4 	.word	0x08006be4
									default:
										CLCD_Clear(&LCD1);
 8001518:	48bb      	ldr	r0, [pc, #748]	@ (8001808 <seclectmenu+0xc20>)
 800151a:	f7ff f81d 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	48b9      	ldr	r0, [pc, #740]	@ (8001808 <seclectmenu+0xc20>)
 8001524:	f7fe ffa6 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 8001528:	49b8      	ldr	r1, [pc, #736]	@ (800180c <seclectmenu+0xc24>)
 800152a:	48b7      	ldr	r0, [pc, #732]	@ (8001808 <seclectmenu+0xc20>)
 800152c:	f7fe fffd 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	2100      	movs	r1, #0
 8001534:	48b4      	ldr	r0, [pc, #720]	@ (8001808 <seclectmenu+0xc20>)
 8001536:	f7fe ff9d 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800153a:	49b5      	ldr	r1, [pc, #724]	@ (8001810 <seclectmenu+0xc28>)
 800153c:	48b2      	ldr	r0, [pc, #712]	@ (8001808 <seclectmenu+0xc20>)
 800153e:	f7fe fff4 	bl	800052a <CLCD_WriteString>
										break;
 8001542:	bf00      	nop
									}
								}
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001544:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001548:	48b2      	ldr	r0, [pc, #712]	@ (8001814 <seclectmenu+0xc2c>)
 800154a:	f7ff faff 	bl	8000b4c <checkbuton>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8180 	beq.w	8001856 <seclectmenu+0xc6e>
								{
									exitmenu = 15;
 8001556:	4bb0      	ldr	r3, [pc, #704]	@ (8001818 <seclectmenu+0xc30>)
 8001558:	220f      	movs	r2, #15
 800155a:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800155c:	7dbb      	ldrb	r3, [r7, #22]
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	b2da      	uxtb	r2, r3
 8001562:	7cbb      	ldrb	r3, [r7, #18]
 8001564:	4413      	add	r3, r2
 8001566:	70fb      	strb	r3, [r7, #3]
									switch (statusadd2)
 8001568:	7cbb      	ldrb	r3, [r7, #18]
 800156a:	3b01      	subs	r3, #1
 800156c:	2b03      	cmp	r3, #3
 800156e:	f200 816f 	bhi.w	8001850 <seclectmenu+0xc68>
 8001572:	a201      	add	r2, pc, #4	@ (adr r2, 8001578 <seclectmenu+0x990>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	08001629 	.word	0x08001629
 8001580:	080016c9 	.word	0x080016c9
 8001584:	08001769 	.word	0x08001769
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	4618      	mov	r0, r3
 800158c:	f001 fd58 	bl	8003040 <CheckKey>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d02e      	beq.n	80015f4 <seclectmenu+0xa0c>
										{
											CLCD_Clear(&LCD1);
 8001596:	489c      	ldr	r0, [pc, #624]	@ (8001808 <seclectmenu+0xc20>)
 8001598:	f7fe ffde 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	4899      	ldr	r0, [pc, #612]	@ (8001808 <seclectmenu+0xc20>)
 80015a2:	f7fe ff67 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "GUEST 1");
 80015a6:	499d      	ldr	r1, [pc, #628]	@ (800181c <seclectmenu+0xc34>)
 80015a8:	4897      	ldr	r0, [pc, #604]	@ (8001808 <seclectmenu+0xc20>)
 80015aa:	f7fe ffbe 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2100      	movs	r1, #0
 80015b2:	4895      	ldr	r0, [pc, #596]	@ (8001808 <seclectmenu+0xc20>)
 80015b4:	f7fe ff5e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 80015b8:	4999      	ldr	r1, [pc, #612]	@ (8001820 <seclectmenu+0xc38>)
 80015ba:	4893      	ldr	r0, [pc, #588]	@ (8001808 <seclectmenu+0xc20>)
 80015bc:	f7fe ffb5 	bl	800052a <CLCD_WriteString>
											HAL_Delay(1000);
 80015c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015c4:	f002 fbca 	bl	8003d5c <HAL_Delay>
											CLCD_Clear(&LCD1);
 80015c8:	488f      	ldr	r0, [pc, #572]	@ (8001808 <seclectmenu+0xc20>)
 80015ca:	f7fe ffc5 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	488d      	ldr	r0, [pc, #564]	@ (8001808 <seclectmenu+0xc20>)
 80015d4:	f7fe ff4e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 80015d8:	4992      	ldr	r1, [pc, #584]	@ (8001824 <seclectmenu+0xc3c>)
 80015da:	488b      	ldr	r0, [pc, #556]	@ (8001808 <seclectmenu+0xc20>)
 80015dc:	f7fe ffa5 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2100      	movs	r1, #0
 80015e4:	4888      	ldr	r0, [pc, #544]	@ (8001808 <seclectmenu+0xc20>)
 80015e6:	f7fe ff45 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 80015ea:	498f      	ldr	r1, [pc, #572]	@ (8001828 <seclectmenu+0xc40>)
 80015ec:	4886      	ldr	r0, [pc, #536]	@ (8001808 <seclectmenu+0xc20>)
 80015ee:	f7fe ff9c 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
										}
										break;
 80015f2:	e130      	b.n	8001856 <seclectmenu+0xc6e>
											adduid(keyadd2);
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fb18 	bl	8002c2c <adduid>
											CLCD_Clear(&LCD1);
 80015fc:	4882      	ldr	r0, [pc, #520]	@ (8001808 <seclectmenu+0xc20>)
 80015fe:	f7fe ffab 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	4880      	ldr	r0, [pc, #512]	@ (8001808 <seclectmenu+0xc20>)
 8001608:	f7fe ff34 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 800160c:	4985      	ldr	r1, [pc, #532]	@ (8001824 <seclectmenu+0xc3c>)
 800160e:	487e      	ldr	r0, [pc, #504]	@ (8001808 <seclectmenu+0xc20>)
 8001610:	f7fe ff8b 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	2100      	movs	r1, #0
 8001618:	487b      	ldr	r0, [pc, #492]	@ (8001808 <seclectmenu+0xc20>)
 800161a:	f7fe ff2b 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 800161e:	4982      	ldr	r1, [pc, #520]	@ (8001828 <seclectmenu+0xc40>)
 8001620:	4879      	ldr	r0, [pc, #484]	@ (8001808 <seclectmenu+0xc20>)
 8001622:	f7fe ff82 	bl	800052a <CLCD_WriteString>
										break;
 8001626:	e116      	b.n	8001856 <seclectmenu+0xc6e>
									case 2:
										if (CheckKey(keyadd2) != 0)
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	4618      	mov	r0, r3
 800162c:	f001 fd08 	bl	8003040 <CheckKey>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d02e      	beq.n	8001694 <seclectmenu+0xaac>
										{
											CLCD_Clear(&LCD1);
 8001636:	4874      	ldr	r0, [pc, #464]	@ (8001808 <seclectmenu+0xc20>)
 8001638:	f7fe ff8e 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	4871      	ldr	r0, [pc, #452]	@ (8001808 <seclectmenu+0xc20>)
 8001642:	f7fe ff17 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "GUEST 2");
 8001646:	4979      	ldr	r1, [pc, #484]	@ (800182c <seclectmenu+0xc44>)
 8001648:	486f      	ldr	r0, [pc, #444]	@ (8001808 <seclectmenu+0xc20>)
 800164a:	f7fe ff6e 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	2100      	movs	r1, #0
 8001652:	486d      	ldr	r0, [pc, #436]	@ (8001808 <seclectmenu+0xc20>)
 8001654:	f7fe ff0e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001658:	4971      	ldr	r1, [pc, #452]	@ (8001820 <seclectmenu+0xc38>)
 800165a:	486b      	ldr	r0, [pc, #428]	@ (8001808 <seclectmenu+0xc20>)
 800165c:	f7fe ff65 	bl	800052a <CLCD_WriteString>
											HAL_Delay(1000);
 8001660:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001664:	f002 fb7a 	bl	8003d5c <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001668:	4867      	ldr	r0, [pc, #412]	@ (8001808 <seclectmenu+0xc20>)
 800166a:	f7fe ff75 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	4865      	ldr	r0, [pc, #404]	@ (8001808 <seclectmenu+0xc20>)
 8001674:	f7fe fefe 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 8001678:	496d      	ldr	r1, [pc, #436]	@ (8001830 <seclectmenu+0xc48>)
 800167a:	4863      	ldr	r0, [pc, #396]	@ (8001808 <seclectmenu+0xc20>)
 800167c:	f7fe ff55 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001680:	2201      	movs	r2, #1
 8001682:	2100      	movs	r1, #0
 8001684:	4860      	ldr	r0, [pc, #384]	@ (8001808 <seclectmenu+0xc20>)
 8001686:	f7fe fef5 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 800168a:	496a      	ldr	r1, [pc, #424]	@ (8001834 <seclectmenu+0xc4c>)
 800168c:	485e      	ldr	r0, [pc, #376]	@ (8001808 <seclectmenu+0xc20>)
 800168e:	f7fe ff4c 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
										}
										break;
 8001692:	e0e0      	b.n	8001856 <seclectmenu+0xc6e>
											adduid(keyadd2);
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fac8 	bl	8002c2c <adduid>
											CLCD_Clear(&LCD1);
 800169c:	485a      	ldr	r0, [pc, #360]	@ (8001808 <seclectmenu+0xc20>)
 800169e:	f7fe ff5b 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	4858      	ldr	r0, [pc, #352]	@ (8001808 <seclectmenu+0xc20>)
 80016a8:	f7fe fee4 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 80016ac:	4960      	ldr	r1, [pc, #384]	@ (8001830 <seclectmenu+0xc48>)
 80016ae:	4856      	ldr	r0, [pc, #344]	@ (8001808 <seclectmenu+0xc20>)
 80016b0:	f7fe ff3b 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2100      	movs	r1, #0
 80016b8:	4853      	ldr	r0, [pc, #332]	@ (8001808 <seclectmenu+0xc20>)
 80016ba:	f7fe fedb 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 80016be:	495d      	ldr	r1, [pc, #372]	@ (8001834 <seclectmenu+0xc4c>)
 80016c0:	4851      	ldr	r0, [pc, #324]	@ (8001808 <seclectmenu+0xc20>)
 80016c2:	f7fe ff32 	bl	800052a <CLCD_WriteString>
										break;
 80016c6:	e0c6      	b.n	8001856 <seclectmenu+0xc6e>
									case 3:
										if (CheckKey(keyadd2) != 0)
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 fcb8 	bl	8003040 <CheckKey>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d02e      	beq.n	8001734 <seclectmenu+0xb4c>
										{
											CLCD_Clear(&LCD1);
 80016d6:	484c      	ldr	r0, [pc, #304]	@ (8001808 <seclectmenu+0xc20>)
 80016d8:	f7fe ff3e 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	4849      	ldr	r0, [pc, #292]	@ (8001808 <seclectmenu+0xc20>)
 80016e2:	f7fe fec7 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "GUEST 3");
 80016e6:	4954      	ldr	r1, [pc, #336]	@ (8001838 <seclectmenu+0xc50>)
 80016e8:	4847      	ldr	r0, [pc, #284]	@ (8001808 <seclectmenu+0xc20>)
 80016ea:	f7fe ff1e 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2100      	movs	r1, #0
 80016f2:	4845      	ldr	r0, [pc, #276]	@ (8001808 <seclectmenu+0xc20>)
 80016f4:	f7fe febe 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 80016f8:	4949      	ldr	r1, [pc, #292]	@ (8001820 <seclectmenu+0xc38>)
 80016fa:	4843      	ldr	r0, [pc, #268]	@ (8001808 <seclectmenu+0xc20>)
 80016fc:	f7fe ff15 	bl	800052a <CLCD_WriteString>
											HAL_Delay(1000);
 8001700:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001704:	f002 fb2a 	bl	8003d5c <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001708:	483f      	ldr	r0, [pc, #252]	@ (8001808 <seclectmenu+0xc20>)
 800170a:	f7fe ff25 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	483d      	ldr	r0, [pc, #244]	@ (8001808 <seclectmenu+0xc20>)
 8001714:	f7fe feae 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 8001718:	4948      	ldr	r1, [pc, #288]	@ (800183c <seclectmenu+0xc54>)
 800171a:	483b      	ldr	r0, [pc, #236]	@ (8001808 <seclectmenu+0xc20>)
 800171c:	f7fe ff05 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001720:	2201      	movs	r2, #1
 8001722:	2100      	movs	r1, #0
 8001724:	4838      	ldr	r0, [pc, #224]	@ (8001808 <seclectmenu+0xc20>)
 8001726:	f7fe fea5 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 800172a:	4938      	ldr	r1, [pc, #224]	@ (800180c <seclectmenu+0xc24>)
 800172c:	4836      	ldr	r0, [pc, #216]	@ (8001808 <seclectmenu+0xc20>)
 800172e:	f7fe fefc 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
										}
										break;
 8001732:	e090      	b.n	8001856 <seclectmenu+0xc6e>
											adduid(keyadd2);
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fa78 	bl	8002c2c <adduid>
											CLCD_Clear(&LCD1);
 800173c:	4832      	ldr	r0, [pc, #200]	@ (8001808 <seclectmenu+0xc20>)
 800173e:	f7fe ff0b 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	4830      	ldr	r0, [pc, #192]	@ (8001808 <seclectmenu+0xc20>)
 8001748:	f7fe fe94 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 800174c:	493b      	ldr	r1, [pc, #236]	@ (800183c <seclectmenu+0xc54>)
 800174e:	482e      	ldr	r0, [pc, #184]	@ (8001808 <seclectmenu+0xc20>)
 8001750:	f7fe feeb 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	2100      	movs	r1, #0
 8001758:	482b      	ldr	r0, [pc, #172]	@ (8001808 <seclectmenu+0xc20>)
 800175a:	f7fe fe8b 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 800175e:	492b      	ldr	r1, [pc, #172]	@ (800180c <seclectmenu+0xc24>)
 8001760:	4829      	ldr	r0, [pc, #164]	@ (8001808 <seclectmenu+0xc20>)
 8001762:	f7fe fee2 	bl	800052a <CLCD_WriteString>
										break;
 8001766:	e076      	b.n	8001856 <seclectmenu+0xc6e>
									case 4:
										if (CheckKey(keyadd2) != 0)
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fc68 	bl	8003040 <CheckKey>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d02e      	beq.n	80017d4 <seclectmenu+0xbec>
										{
											CLCD_Clear(&LCD1);
 8001776:	4824      	ldr	r0, [pc, #144]	@ (8001808 <seclectmenu+0xc20>)
 8001778:	f7fe feee 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	4821      	ldr	r0, [pc, #132]	@ (8001808 <seclectmenu+0xc20>)
 8001782:	f7fe fe77 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "GUEST");
 8001786:	492e      	ldr	r1, [pc, #184]	@ (8001840 <seclectmenu+0xc58>)
 8001788:	481f      	ldr	r0, [pc, #124]	@ (8001808 <seclectmenu+0xc20>)
 800178a:	f7fe fece 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800178e:	2201      	movs	r2, #1
 8001790:	2100      	movs	r1, #0
 8001792:	481d      	ldr	r0, [pc, #116]	@ (8001808 <seclectmenu+0xc20>)
 8001794:	f7fe fe6e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "AVAILABLE");
 8001798:	4921      	ldr	r1, [pc, #132]	@ (8001820 <seclectmenu+0xc38>)
 800179a:	481b      	ldr	r0, [pc, #108]	@ (8001808 <seclectmenu+0xc20>)
 800179c:	f7fe fec5 	bl	800052a <CLCD_WriteString>
											HAL_Delay(1000);
 80017a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017a4:	f002 fada 	bl	8003d5c <HAL_Delay>
											CLCD_Clear(&LCD1);
 80017a8:	4817      	ldr	r0, [pc, #92]	@ (8001808 <seclectmenu+0xc20>)
 80017aa:	f7fe fed5 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	4815      	ldr	r0, [pc, #84]	@ (8001808 <seclectmenu+0xc20>)
 80017b4:	f7fe fe5e 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80017b8:	4922      	ldr	r1, [pc, #136]	@ (8001844 <seclectmenu+0xc5c>)
 80017ba:	4813      	ldr	r0, [pc, #76]	@ (8001808 <seclectmenu+0xc20>)
 80017bc:	f7fe feb5 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2100      	movs	r1, #0
 80017c4:	4810      	ldr	r0, [pc, #64]	@ (8001808 <seclectmenu+0xc20>)
 80017c6:	f7fe fe55 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 80017ca:	491f      	ldr	r1, [pc, #124]	@ (8001848 <seclectmenu+0xc60>)
 80017cc:	480e      	ldr	r0, [pc, #56]	@ (8001808 <seclectmenu+0xc20>)
 80017ce:	f7fe feac 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    BACK ");
										}
										break;
 80017d2:	e040      	b.n	8001856 <seclectmenu+0xc6e>
											adduid(keyadd2);
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 fa28 	bl	8002c2c <adduid>
											CLCD_Clear(&LCD1);
 80017dc:	480a      	ldr	r0, [pc, #40]	@ (8001808 <seclectmenu+0xc20>)
 80017de:	f7fe febb 	bl	8000558 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	4808      	ldr	r0, [pc, #32]	@ (8001808 <seclectmenu+0xc20>)
 80017e8:	f7fe fe44 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 80017ec:	4917      	ldr	r1, [pc, #92]	@ (800184c <seclectmenu+0xc64>)
 80017ee:	4806      	ldr	r0, [pc, #24]	@ (8001808 <seclectmenu+0xc20>)
 80017f0:	f7fe fe9b 	bl	800052a <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2100      	movs	r1, #0
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <seclectmenu+0xc20>)
 80017fa:	f7fe fe3b 	bl	8000474 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 80017fe:	4912      	ldr	r1, [pc, #72]	@ (8001848 <seclectmenu+0xc60>)
 8001800:	4801      	ldr	r0, [pc, #4]	@ (8001808 <seclectmenu+0xc20>)
 8001802:	f7fe fe92 	bl	800052a <CLCD_WriteString>
										break;
 8001806:	e026      	b.n	8001856 <seclectmenu+0xc6e>
 8001808:	200001ec 	.word	0x200001ec
 800180c:	08006bd0 	.word	0x08006bd0
 8001810:	08006a58 	.word	0x08006a58
 8001814:	40010800 	.word	0x40010800
 8001818:	20000000 	.word	0x20000000
 800181c:	08006bf8 	.word	0x08006bf8
 8001820:	08006b48 	.word	0x08006b48
 8001824:	08006b6c 	.word	0x08006b6c
 8001828:	08006b80 	.word	0x08006b80
 800182c:	08006c00 	.word	0x08006c00
 8001830:	08006b94 	.word	0x08006b94
 8001834:	08006ba8 	.word	0x08006ba8
 8001838:	08006c08 	.word	0x08006c08
 800183c:	08006bbc 	.word	0x08006bbc
 8001840:	08006c10 	.word	0x08006c10
 8001844:	08006c18 	.word	0x08006c18
 8001848:	08006b34 	.word	0x08006b34
 800184c:	08006be4 	.word	0x08006be4
									default:
										back12 = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	747b      	strb	r3, [r7, #17]
										break;
 8001854:	bf00      	nop
							while (back12 == 1)
 8001856:	7c7b      	ldrb	r3, [r7, #17]
 8001858:	2b01      	cmp	r3, #1
 800185a:	f43f adac 	beq.w	80013b6 <seclectmenu+0x7ce>
									}
								}
							}
							CLCD_Clear(&LCD1);
 800185e:	48b1      	ldr	r0, [pc, #708]	@ (8001b24 <seclectmenu+0xf3c>)
 8001860:	f7fe fe7a 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	48ae      	ldr	r0, [pc, #696]	@ (8001b24 <seclectmenu+0xf3c>)
 800186a:	f7fe fe03 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   ADMIN CARD");
 800186e:	49ae      	ldr	r1, [pc, #696]	@ (8001b28 <seclectmenu+0xf40>)
 8001870:	48ac      	ldr	r0, [pc, #688]	@ (8001b24 <seclectmenu+0xf3c>)
 8001872:	f7fe fe5a 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001876:	2201      	movs	r2, #1
 8001878:	2100      	movs	r1, #0
 800187a:	48aa      	ldr	r0, [pc, #680]	@ (8001b24 <seclectmenu+0xf3c>)
 800187c:	f7fe fdfa 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> GUEST CARD");
 8001880:	49aa      	ldr	r1, [pc, #680]	@ (8001b2c <seclectmenu+0xf44>)
 8001882:	48a8      	ldr	r0, [pc, #672]	@ (8001b24 <seclectmenu+0xf3c>)
 8001884:	f7fe fe51 	bl	800052a <CLCD_WriteString>
							break;
 8001888:	e002      	b.n	8001890 <seclectmenu+0xca8>
						default:
							back = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	757b      	strb	r3, [r7, #21]
							break;
 800188e:	bf00      	nop
				while (back == 1)
 8001890:	7d7b      	ldrb	r3, [r7, #21]
 8001892:	2b01      	cmp	r3, #1
 8001894:	f43f aa73 	beq.w	8000d7e <seclectmenu+0x196>
						}
					}
				}
				CLCD_Clear(&LCD1);
 8001898:	48a2      	ldr	r0, [pc, #648]	@ (8001b24 <seclectmenu+0xf3c>)
 800189a:	f7fe fe5d 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	48a0      	ldr	r0, [pc, #640]	@ (8001b24 <seclectmenu+0xf3c>)
 80018a4:	f7fe fde6 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  ADD CARD");
 80018a8:	49a1      	ldr	r1, [pc, #644]	@ (8001b30 <seclectmenu+0xf48>)
 80018aa:	489e      	ldr	r0, [pc, #632]	@ (8001b24 <seclectmenu+0xf3c>)
 80018ac:	f7fe fe3d 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80018b0:	2201      	movs	r2, #1
 80018b2:	2100      	movs	r1, #0
 80018b4:	489b      	ldr	r0, [pc, #620]	@ (8001b24 <seclectmenu+0xf3c>)
 80018b6:	f7fe fddd 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    REMOVE CARD");
 80018ba:	499e      	ldr	r1, [pc, #632]	@ (8001b34 <seclectmenu+0xf4c>)
 80018bc:	4899      	ldr	r0, [pc, #612]	@ (8001b24 <seclectmenu+0xf3c>)
 80018be:	f7fe fe34 	bl	800052a <CLCD_WriteString>
				break;
 80018c2:	f001 b8f0 	b.w	8002aa6 <seclectmenu+0x1ebe>
			case 1:
				CLCD_Clear(&LCD1);
 80018c6:	4897      	ldr	r0, [pc, #604]	@ (8001b24 <seclectmenu+0xf3c>)
 80018c8:	f7fe fe46 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	4894      	ldr	r0, [pc, #592]	@ (8001b24 <seclectmenu+0xf3c>)
 80018d2:	f7fe fdcf 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "     SELECT ");
 80018d6:	4998      	ldr	r1, [pc, #608]	@ (8001b38 <seclectmenu+0xf50>)
 80018d8:	4892      	ldr	r0, [pc, #584]	@ (8001b24 <seclectmenu+0xf3c>)
 80018da:	f7fe fe26 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80018de:	2201      	movs	r2, #1
 80018e0:	2100      	movs	r1, #0
 80018e2:	4890      	ldr	r0, [pc, #576]	@ (8001b24 <seclectmenu+0xf3c>)
 80018e4:	f7fe fdc6 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "PLEASE PRESS #");
 80018e8:	4994      	ldr	r1, [pc, #592]	@ (8001b3c <seclectmenu+0xf54>)
 80018ea:	488e      	ldr	r0, [pc, #568]	@ (8001b24 <seclectmenu+0xf3c>)
 80018ec:	f7fe fe1d 	bl	800052a <CLCD_WriteString>
				uint8_t statusremove = -1;
 80018f0:	23ff      	movs	r3, #255	@ 0xff
 80018f2:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 80018f8:	f001 b89f 	b.w	8002a3a <seclectmenu+0x1e52>
				{
					if (exitmenu == 0)
 80018fc:	4b90      	ldr	r3, [pc, #576]	@ (8001b40 <seclectmenu+0xf58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d108      	bne.n	8001916 <seclectmenu+0xd2e>
					{
						CLCD_Clear(&LCD1);
 8001904:	4887      	ldr	r0, [pc, #540]	@ (8001b24 <seclectmenu+0xf3c>)
 8001906:	f7fe fe27 	bl	8000558 <CLCD_Clear>
						HAL_Delay(1000);
 800190a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800190e:	f002 fa25 	bl	8003d5c <HAL_Delay>
						return;
 8001912:	f001 b8d4 	b.w	8002abe <seclectmenu+0x1ed6>
					}
					if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 8001916:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800191a:	488a      	ldr	r0, [pc, #552]	@ (8001b44 <seclectmenu+0xf5c>)
 800191c:	f7ff f916 	bl	8000b4c <checkbuton>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d054      	beq.n	80019d0 <seclectmenu+0xde8>
					{
						exitmenu = 15;
 8001926:	4b86      	ldr	r3, [pc, #536]	@ (8001b40 <seclectmenu+0xf58>)
 8001928:	220f      	movs	r2, #15
 800192a:	701a      	strb	r2, [r3, #0]
						statusremove++;
 800192c:	7c3b      	ldrb	r3, [r7, #16]
 800192e:	3301      	adds	r3, #1
 8001930:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001932:	7c3b      	ldrb	r3, [r7, #16]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d801      	bhi.n	800193c <seclectmenu+0xd54>
 8001938:	7c3b      	ldrb	r3, [r7, #16]
 800193a:	e000      	b.n	800193e <seclectmenu+0xd56>
 800193c:	2300      	movs	r3, #0
 800193e:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001940:	7c3b      	ldrb	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <seclectmenu+0xd64>
 8001946:	2b01      	cmp	r3, #1
 8001948:	d016      	beq.n	8001978 <seclectmenu+0xd90>
 800194a:	e02b      	b.n	80019a4 <seclectmenu+0xdbc>
						{
						case 0:
							CLCD_Clear(&LCD1);
 800194c:	4875      	ldr	r0, [pc, #468]	@ (8001b24 <seclectmenu+0xf3c>)
 800194e:	f7fe fe03 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	4873      	ldr	r0, [pc, #460]	@ (8001b24 <seclectmenu+0xf3c>)
 8001958:	f7fe fd8c 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> REMOVE CARD");
 800195c:	497a      	ldr	r1, [pc, #488]	@ (8001b48 <seclectmenu+0xf60>)
 800195e:	4871      	ldr	r0, [pc, #452]	@ (8001b24 <seclectmenu+0xf3c>)
 8001960:	f7fe fde3 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2100      	movs	r1, #0
 8001968:	486e      	ldr	r0, [pc, #440]	@ (8001b24 <seclectmenu+0xf3c>)
 800196a:	f7fe fd83 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   REMOVE ALL");
 800196e:	4977      	ldr	r1, [pc, #476]	@ (8001b4c <seclectmenu+0xf64>)
 8001970:	486c      	ldr	r0, [pc, #432]	@ (8001b24 <seclectmenu+0xf3c>)
 8001972:	f7fe fdda 	bl	800052a <CLCD_WriteString>
							break;
 8001976:	e02b      	b.n	80019d0 <seclectmenu+0xde8>
						case 1:
							CLCD_Clear(&LCD1);
 8001978:	486a      	ldr	r0, [pc, #424]	@ (8001b24 <seclectmenu+0xf3c>)
 800197a:	f7fe fded 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	4868      	ldr	r0, [pc, #416]	@ (8001b24 <seclectmenu+0xf3c>)
 8001984:	f7fe fd76 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   REMOVE CARD");
 8001988:	4971      	ldr	r1, [pc, #452]	@ (8001b50 <seclectmenu+0xf68>)
 800198a:	4866      	ldr	r0, [pc, #408]	@ (8001b24 <seclectmenu+0xf3c>)
 800198c:	f7fe fdcd 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	2100      	movs	r1, #0
 8001994:	4863      	ldr	r0, [pc, #396]	@ (8001b24 <seclectmenu+0xf3c>)
 8001996:	f7fe fd6d 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> REMOVE ALL");
 800199a:	496e      	ldr	r1, [pc, #440]	@ (8001b54 <seclectmenu+0xf6c>)
 800199c:	4861      	ldr	r0, [pc, #388]	@ (8001b24 <seclectmenu+0xf3c>)
 800199e:	f7fe fdc4 	bl	800052a <CLCD_WriteString>
							break;
 80019a2:	e015      	b.n	80019d0 <seclectmenu+0xde8>
						default:
							CLCD_Clear(&LCD1);
 80019a4:	485f      	ldr	r0, [pc, #380]	@ (8001b24 <seclectmenu+0xf3c>)
 80019a6:	f7fe fdd7 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	485d      	ldr	r0, [pc, #372]	@ (8001b24 <seclectmenu+0xf3c>)
 80019b0:	f7fe fd60 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   REMOVE ALL");
 80019b4:	4965      	ldr	r1, [pc, #404]	@ (8001b4c <seclectmenu+0xf64>)
 80019b6:	485b      	ldr	r0, [pc, #364]	@ (8001b24 <seclectmenu+0xf3c>)
 80019b8:	f7fe fdb7 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80019bc:	2201      	movs	r2, #1
 80019be:	2100      	movs	r1, #0
 80019c0:	4858      	ldr	r0, [pc, #352]	@ (8001b24 <seclectmenu+0xf3c>)
 80019c2:	f7fe fd57 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 80019c6:	4964      	ldr	r1, [pc, #400]	@ (8001b58 <seclectmenu+0xf70>)
 80019c8:	4856      	ldr	r0, [pc, #344]	@ (8001b24 <seclectmenu+0xf3c>)
 80019ca:	f7fe fdae 	bl	800052a <CLCD_WriteString>
							break;
 80019ce:	bf00      	nop
						}
					}
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4861      	ldr	r0, [pc, #388]	@ (8001b5c <seclectmenu+0xf74>)
 80019d6:	f7ff f8b9 	bl	8000b4c <checkbuton>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f001 802c 	beq.w	8002a3a <seclectmenu+0x1e52>
					{
						exitmenu = 15;
 80019e2:	4b57      	ldr	r3, [pc, #348]	@ (8001b40 <seclectmenu+0xf58>)
 80019e4:	220f      	movs	r2, #15
 80019e6:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 80019e8:	7c3b      	ldrb	r3, [r7, #16]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <seclectmenu+0xe10>
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	f001 8018 	beq.w	8002a24 <seclectmenu+0x1e3c>
 80019f4:	f001 b81e 	b.w	8002a34 <seclectmenu+0x1e4c>
						{
						case 0:
							CLCD_Clear(&LCD1);
 80019f8:	484a      	ldr	r0, [pc, #296]	@ (8001b24 <seclectmenu+0xf3c>)
 80019fa:	f7fe fdad 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	4848      	ldr	r0, [pc, #288]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a04:	f7fe fd36 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> SELECT CARD");
 8001a08:	4955      	ldr	r1, [pc, #340]	@ (8001b60 <seclectmenu+0xf78>)
 8001a0a:	4846      	ldr	r0, [pc, #280]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a0c:	f7fe fd8d 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2100      	movs	r1, #0
 8001a14:	4843      	ldr	r0, [pc, #268]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a16:	f7fe fd2d 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   SCAN CARD");
 8001a1a:	4952      	ldr	r1, [pc, #328]	@ (8001b64 <seclectmenu+0xf7c>)
 8001a1c:	4841      	ldr	r0, [pc, #260]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a1e:	f7fe fd84 	bl	800052a <CLCD_WriteString>
							uint8_t statusrm1 = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001a2a:	f000 bfe1 	b.w	80029f0 <seclectmenu+0x1e08>
							{
								if (exitmenu == 0)
 8001a2e:	4b44      	ldr	r3, [pc, #272]	@ (8001b40 <seclectmenu+0xf58>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d108      	bne.n	8001a48 <seclectmenu+0xe60>
								{
									CLCD_Clear(&LCD1);
 8001a36:	483b      	ldr	r0, [pc, #236]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a38:	f7fe fd8e 	bl	8000558 <CLCD_Clear>
									HAL_Delay(1000);
 8001a3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a40:	f002 f98c 	bl	8003d5c <HAL_Delay>
									return;
 8001a44:	f001 b83b 	b.w	8002abe <seclectmenu+0x1ed6>
								}
								if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 8001a48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a4c:	483d      	ldr	r0, [pc, #244]	@ (8001b44 <seclectmenu+0xf5c>)
 8001a4e:	f7ff f87d 	bl	8000b4c <checkbuton>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d051      	beq.n	8001afc <seclectmenu+0xf14>
								{
									statusrm1++;
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001a5e:	7bbb      	ldrb	r3, [r7, #14]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d801      	bhi.n	8001a68 <seclectmenu+0xe80>
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	e000      	b.n	8001a6a <seclectmenu+0xe82>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <seclectmenu+0xe90>
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d016      	beq.n	8001aa4 <seclectmenu+0xebc>
 8001a76:	e02b      	b.n	8001ad0 <seclectmenu+0xee8>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001a78:	482a      	ldr	r0, [pc, #168]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a7a:	f7fe fd6d 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	4828      	ldr	r0, [pc, #160]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a84:	f7fe fcf6 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> SELECT CARD");
 8001a88:	4935      	ldr	r1, [pc, #212]	@ (8001b60 <seclectmenu+0xf78>)
 8001a8a:	4826      	ldr	r0, [pc, #152]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a8c:	f7fe fd4d 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2100      	movs	r1, #0
 8001a94:	4823      	ldr	r0, [pc, #140]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a96:	f7fe fced 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SCAN CARD");
 8001a9a:	4932      	ldr	r1, [pc, #200]	@ (8001b64 <seclectmenu+0xf7c>)
 8001a9c:	4821      	ldr	r0, [pc, #132]	@ (8001b24 <seclectmenu+0xf3c>)
 8001a9e:	f7fe fd44 	bl	800052a <CLCD_WriteString>
										break;
 8001aa2:	e02b      	b.n	8001afc <seclectmenu+0xf14>
									case 1:
										CLCD_Clear(&LCD1);
 8001aa4:	481f      	ldr	r0, [pc, #124]	@ (8001b24 <seclectmenu+0xf3c>)
 8001aa6:	f7fe fd57 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	481d      	ldr	r0, [pc, #116]	@ (8001b24 <seclectmenu+0xf3c>)
 8001ab0:	f7fe fce0 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SELECT CARD");
 8001ab4:	492c      	ldr	r1, [pc, #176]	@ (8001b68 <seclectmenu+0xf80>)
 8001ab6:	481b      	ldr	r0, [pc, #108]	@ (8001b24 <seclectmenu+0xf3c>)
 8001ab8:	f7fe fd37 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4818      	ldr	r0, [pc, #96]	@ (8001b24 <seclectmenu+0xf3c>)
 8001ac2:	f7fe fcd7 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> SCAN CARD");
 8001ac6:	4929      	ldr	r1, [pc, #164]	@ (8001b6c <seclectmenu+0xf84>)
 8001ac8:	4816      	ldr	r0, [pc, #88]	@ (8001b24 <seclectmenu+0xf3c>)
 8001aca:	f7fe fd2e 	bl	800052a <CLCD_WriteString>
										;
										break;
 8001ace:	e015      	b.n	8001afc <seclectmenu+0xf14>
									default:
										CLCD_Clear(&LCD1);
 8001ad0:	4814      	ldr	r0, [pc, #80]	@ (8001b24 <seclectmenu+0xf3c>)
 8001ad2:	f7fe fd41 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4812      	ldr	r0, [pc, #72]	@ (8001b24 <seclectmenu+0xf3c>)
 8001adc:	f7fe fcca 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SCAN CARD");
 8001ae0:	4920      	ldr	r1, [pc, #128]	@ (8001b64 <seclectmenu+0xf7c>)
 8001ae2:	4810      	ldr	r0, [pc, #64]	@ (8001b24 <seclectmenu+0xf3c>)
 8001ae4:	f7fe fd21 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2100      	movs	r1, #0
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <seclectmenu+0xf3c>)
 8001aee:	f7fe fcc1 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> BACK");
 8001af2:	4919      	ldr	r1, [pc, #100]	@ (8001b58 <seclectmenu+0xf70>)
 8001af4:	480b      	ldr	r0, [pc, #44]	@ (8001b24 <seclectmenu+0xf3c>)
 8001af6:	f7fe fd18 	bl	800052a <CLCD_WriteString>
										break;
 8001afa:	bf00      	nop
									}
								}
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001afc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b00:	4816      	ldr	r0, [pc, #88]	@ (8001b5c <seclectmenu+0xf74>)
 8001b02:	f7ff f823 	bl	8000b4c <checkbuton>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8771 	beq.w	80029f0 <seclectmenu+0x1e08>
								{
									exitmenu = 15;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <seclectmenu+0xf58>)
 8001b10:	220f      	movs	r2, #15
 8001b12:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d02a      	beq.n	8001b70 <seclectmenu+0xf88>
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	f000 86b1 	beq.w	8002882 <seclectmenu+0x1c9a>
 8001b20:	f000 bf63 	b.w	80029ea <seclectmenu+0x1e02>
 8001b24:	200001ec 	.word	0x200001ec
 8001b28:	0800699c 	.word	0x0800699c
 8001b2c:	08006a90 	.word	0x08006a90
 8001b30:	080069f8 	.word	0x080069f8
 8001b34:	08006a08 	.word	0x08006a08
 8001b38:	08006c24 	.word	0x08006c24
 8001b3c:	080069e8 	.word	0x080069e8
 8001b40:	20000000 	.word	0x20000000
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	08006c34 	.word	0x08006c34
 8001b4c:	08006c44 	.word	0x08006c44
 8001b50:	08006c54 	.word	0x08006c54
 8001b54:	08006c64 	.word	0x08006c64
 8001b58:	08006aa0 	.word	0x08006aa0
 8001b5c:	40010800 	.word	0x40010800
 8001b60:	08006c74 	.word	0x08006c74
 8001b64:	08006c84 	.word	0x08006c84
 8001b68:	08006c94 	.word	0x08006c94
 8001b6c:	08006ca4 	.word	0x08006ca4
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001b70:	48ba      	ldr	r0, [pc, #744]	@ (8001e5c <seclectmenu+0x1274>)
 8001b72:	f7fe fcf1 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	48b8      	ldr	r0, [pc, #736]	@ (8001e5c <seclectmenu+0x1274>)
 8001b7c:	f7fe fc7a 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8001b80:	49b7      	ldr	r1, [pc, #732]	@ (8001e60 <seclectmenu+0x1278>)
 8001b82:	48b6      	ldr	r0, [pc, #728]	@ (8001e5c <seclectmenu+0x1274>)
 8001b84:	f7fe fcd1 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	48b3      	ldr	r0, [pc, #716]	@ (8001e5c <seclectmenu+0x1274>)
 8001b8e:	f7fe fc71 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   GUEST CARD");
 8001b92:	49b4      	ldr	r1, [pc, #720]	@ (8001e64 <seclectmenu+0x127c>)
 8001b94:	48b1      	ldr	r0, [pc, #708]	@ (8001e5c <seclectmenu+0x1274>)
 8001b96:	f7fe fcc8 	bl	800052a <CLCD_WriteString>
										uint8_t statusadd = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001ba2:	f000 be54 	b.w	800284e <seclectmenu+0x1c66>
										{
											if (exitmenu == 0)
 8001ba6:	4bb0      	ldr	r3, [pc, #704]	@ (8001e68 <seclectmenu+0x1280>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d108      	bne.n	8001bc0 <seclectmenu+0xfd8>
											{
												CLCD_Clear(&LCD1);
 8001bae:	48ab      	ldr	r0, [pc, #684]	@ (8001e5c <seclectmenu+0x1274>)
 8001bb0:	f7fe fcd2 	bl	8000558 <CLCD_Clear>
												HAL_Delay(1000);
 8001bb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bb8:	f002 f8d0 	bl	8003d5c <HAL_Delay>
												return;
 8001bbc:	f000 bf7f 	b.w	8002abe <seclectmenu+0x1ed6>
											}
											if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 8001bc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bc4:	48a9      	ldr	r0, [pc, #676]	@ (8001e6c <seclectmenu+0x1284>)
 8001bc6:	f7fe ffc1 	bl	8000b4c <checkbuton>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d054      	beq.n	8001c7a <seclectmenu+0x1092>
											{
												exitmenu = 15;
 8001bd0:	4ba5      	ldr	r3, [pc, #660]	@ (8001e68 <seclectmenu+0x1280>)
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001bd6:	7b3b      	ldrb	r3, [r7, #12]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001bdc:	7b3b      	ldrb	r3, [r7, #12]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d801      	bhi.n	8001be6 <seclectmenu+0xffe>
 8001be2:	7b3b      	ldrb	r3, [r7, #12]
 8001be4:	e000      	b.n	8001be8 <seclectmenu+0x1000>
 8001be6:	2300      	movs	r3, #0
 8001be8:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001bea:	7b3b      	ldrb	r3, [r7, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d002      	beq.n	8001bf6 <seclectmenu+0x100e>
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d016      	beq.n	8001c22 <seclectmenu+0x103a>
 8001bf4:	e02b      	b.n	8001c4e <seclectmenu+0x1066>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001bf6:	4899      	ldr	r0, [pc, #612]	@ (8001e5c <seclectmenu+0x1274>)
 8001bf8:	f7fe fcae 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4896      	ldr	r0, [pc, #600]	@ (8001e5c <seclectmenu+0x1274>)
 8001c02:	f7fe fc37 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8001c06:	4996      	ldr	r1, [pc, #600]	@ (8001e60 <seclectmenu+0x1278>)
 8001c08:	4894      	ldr	r0, [pc, #592]	@ (8001e5c <seclectmenu+0x1274>)
 8001c0a:	f7fe fc8e 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2100      	movs	r1, #0
 8001c12:	4892      	ldr	r0, [pc, #584]	@ (8001e5c <seclectmenu+0x1274>)
 8001c14:	f7fe fc2e 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   GUEST CARD");
 8001c18:	4992      	ldr	r1, [pc, #584]	@ (8001e64 <seclectmenu+0x127c>)
 8001c1a:	4890      	ldr	r0, [pc, #576]	@ (8001e5c <seclectmenu+0x1274>)
 8001c1c:	f7fe fc85 	bl	800052a <CLCD_WriteString>
													break;
 8001c20:	e02b      	b.n	8001c7a <seclectmenu+0x1092>
												case 2:
													CLCD_Clear(&LCD1);
 8001c22:	488e      	ldr	r0, [pc, #568]	@ (8001e5c <seclectmenu+0x1274>)
 8001c24:	f7fe fc98 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	488b      	ldr	r0, [pc, #556]	@ (8001e5c <seclectmenu+0x1274>)
 8001c2e:	f7fe fc21 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   ADMIN CARD");
 8001c32:	498f      	ldr	r1, [pc, #572]	@ (8001e70 <seclectmenu+0x1288>)
 8001c34:	4889      	ldr	r0, [pc, #548]	@ (8001e5c <seclectmenu+0x1274>)
 8001c36:	f7fe fc78 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4887      	ldr	r0, [pc, #540]	@ (8001e5c <seclectmenu+0x1274>)
 8001c40:	f7fe fc18 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> GUEST CARD");
 8001c44:	498b      	ldr	r1, [pc, #556]	@ (8001e74 <seclectmenu+0x128c>)
 8001c46:	4885      	ldr	r0, [pc, #532]	@ (8001e5c <seclectmenu+0x1274>)
 8001c48:	f7fe fc6f 	bl	800052a <CLCD_WriteString>
													break;
 8001c4c:	e015      	b.n	8001c7a <seclectmenu+0x1092>
												default:
													CLCD_Clear(&LCD1);
 8001c4e:	4883      	ldr	r0, [pc, #524]	@ (8001e5c <seclectmenu+0x1274>)
 8001c50:	f7fe fc82 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	4880      	ldr	r0, [pc, #512]	@ (8001e5c <seclectmenu+0x1274>)
 8001c5a:	f7fe fc0b 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   GUEST CARD");
 8001c5e:	4981      	ldr	r1, [pc, #516]	@ (8001e64 <seclectmenu+0x127c>)
 8001c60:	487e      	ldr	r0, [pc, #504]	@ (8001e5c <seclectmenu+0x1274>)
 8001c62:	f7fe fc62 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001c66:	2201      	movs	r2, #1
 8001c68:	2100      	movs	r1, #0
 8001c6a:	487c      	ldr	r0, [pc, #496]	@ (8001e5c <seclectmenu+0x1274>)
 8001c6c:	f7fe fc02 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> BACK");
 8001c70:	4981      	ldr	r1, [pc, #516]	@ (8001e78 <seclectmenu+0x1290>)
 8001c72:	487a      	ldr	r0, [pc, #488]	@ (8001e5c <seclectmenu+0x1274>)
 8001c74:	f7fe fc59 	bl	800052a <CLCD_WriteString>
													break;
 8001c78:	bf00      	nop
												}
											}
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001c7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c7e:	487f      	ldr	r0, [pc, #508]	@ (8001e7c <seclectmenu+0x1294>)
 8001c80:	f7fe ff64 	bl	8000b4c <checkbuton>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 85e1 	beq.w	800284e <seclectmenu+0x1c66>
											{
												exitmenu = 15;
 8001c8c:	4b76      	ldr	r3, [pc, #472]	@ (8001e68 <seclectmenu+0x1280>)
 8001c8e:	220f      	movs	r2, #15
 8001c90:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001c92:	7b3b      	ldrb	r3, [r7, #12]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d004      	beq.n	8001ca2 <seclectmenu+0x10ba>
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	f000 8300 	beq.w	800229e <seclectmenu+0x16b6>
 8001c9e:	f000 bdd3 	b.w	8002848 <seclectmenu+0x1c60>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001ca2:	486e      	ldr	r0, [pc, #440]	@ (8001e5c <seclectmenu+0x1274>)
 8001ca4:	f7fe fc58 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	486b      	ldr	r0, [pc, #428]	@ (8001e5c <seclectmenu+0x1274>)
 8001cae:	f7fe fbe1 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8001cb2:	4973      	ldr	r1, [pc, #460]	@ (8001e80 <seclectmenu+0x1298>)
 8001cb4:	4869      	ldr	r0, [pc, #420]	@ (8001e5c <seclectmenu+0x1274>)
 8001cb6:	f7fe fc38 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4867      	ldr	r0, [pc, #412]	@ (8001e5c <seclectmenu+0x1274>)
 8001cc0:	f7fe fbd8 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8001cc4:	496f      	ldr	r1, [pc, #444]	@ (8001e84 <seclectmenu+0x129c>)
 8001cc6:	4865      	ldr	r0, [pc, #404]	@ (8001e5c <seclectmenu+0x1274>)
 8001cc8:	f7fe fc2f 	bl	800052a <CLCD_WriteString>
													uint8_t statusadd1 = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001cd4:	e2c9      	b.n	800226a <seclectmenu+0x1682>
													{
														if (exitmenu == 0)
 8001cd6:	4b64      	ldr	r3, [pc, #400]	@ (8001e68 <seclectmenu+0x1280>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d108      	bne.n	8001cf0 <seclectmenu+0x1108>
														{
															CLCD_Clear(&LCD1);
 8001cde:	485f      	ldr	r0, [pc, #380]	@ (8001e5c <seclectmenu+0x1274>)
 8001ce0:	f7fe fc3a 	bl	8000558 <CLCD_Clear>
															HAL_Delay(1000);
 8001ce4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ce8:	f002 f838 	bl	8003d5c <HAL_Delay>
															return;
 8001cec:	f000 bee7 	b.w	8002abe <seclectmenu+0x1ed6>
														}
														if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 8001cf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cf4:	485d      	ldr	r0, [pc, #372]	@ (8001e6c <seclectmenu+0x1284>)
 8001cf6:	f7fe ff29 	bl	8000b4c <checkbuton>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 808b 	beq.w	8001e18 <seclectmenu+0x1230>
														{
															exitmenu = 15;
 8001d02:	4b59      	ldr	r3, [pc, #356]	@ (8001e68 <seclectmenu+0x1280>)
 8001d04:	220f      	movs	r2, #15
 8001d06:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001d08:	7abb      	ldrb	r3, [r7, #10]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8001d0e:	7abb      	ldrb	r3, [r7, #10]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d801      	bhi.n	8001d18 <seclectmenu+0x1130>
 8001d14:	7abb      	ldrb	r3, [r7, #10]
 8001d16:	e000      	b.n	8001d1a <seclectmenu+0x1132>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001d1c:	7abb      	ldrb	r3, [r7, #10]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d863      	bhi.n	8001dec <seclectmenu+0x1204>
 8001d24:	a201      	add	r2, pc, #4	@ (adr r2, 8001d2c <seclectmenu+0x1144>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001d69 	.word	0x08001d69
 8001d34:	08001d95 	.word	0x08001d95
 8001d38:	08001dc1 	.word	0x08001dc1
															{
															case 1:
																CLCD_Clear(&LCD1);
 8001d3c:	4847      	ldr	r0, [pc, #284]	@ (8001e5c <seclectmenu+0x1274>)
 8001d3e:	f7fe fc0b 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	4845      	ldr	r0, [pc, #276]	@ (8001e5c <seclectmenu+0x1274>)
 8001d48:	f7fe fb94 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8001d4c:	494c      	ldr	r1, [pc, #304]	@ (8001e80 <seclectmenu+0x1298>)
 8001d4e:	4843      	ldr	r0, [pc, #268]	@ (8001e5c <seclectmenu+0x1274>)
 8001d50:	f7fe fbeb 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001d54:	2201      	movs	r2, #1
 8001d56:	2100      	movs	r1, #0
 8001d58:	4840      	ldr	r0, [pc, #256]	@ (8001e5c <seclectmenu+0x1274>)
 8001d5a:	f7fe fb8b 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8001d5e:	4949      	ldr	r1, [pc, #292]	@ (8001e84 <seclectmenu+0x129c>)
 8001d60:	483e      	ldr	r0, [pc, #248]	@ (8001e5c <seclectmenu+0x1274>)
 8001d62:	f7fe fbe2 	bl	800052a <CLCD_WriteString>
																break;
 8001d66:	e057      	b.n	8001e18 <seclectmenu+0x1230>
															case 2:
																CLCD_Clear(&LCD1);
 8001d68:	483c      	ldr	r0, [pc, #240]	@ (8001e5c <seclectmenu+0x1274>)
 8001d6a:	f7fe fbf5 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	483a      	ldr	r0, [pc, #232]	@ (8001e5c <seclectmenu+0x1274>)
 8001d74:	f7fe fb7e 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 8001d78:	4943      	ldr	r1, [pc, #268]	@ (8001e88 <seclectmenu+0x12a0>)
 8001d7a:	4838      	ldr	r0, [pc, #224]	@ (8001e5c <seclectmenu+0x1274>)
 8001d7c:	f7fe fbd5 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2100      	movs	r1, #0
 8001d84:	4835      	ldr	r0, [pc, #212]	@ (8001e5c <seclectmenu+0x1274>)
 8001d86:	f7fe fb75 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 8001d8a:	4940      	ldr	r1, [pc, #256]	@ (8001e8c <seclectmenu+0x12a4>)
 8001d8c:	4833      	ldr	r0, [pc, #204]	@ (8001e5c <seclectmenu+0x1274>)
 8001d8e:	f7fe fbcc 	bl	800052a <CLCD_WriteString>
																break;
 8001d92:	e041      	b.n	8001e18 <seclectmenu+0x1230>
															case 3:
																CLCD_Clear(&LCD1);
 8001d94:	4831      	ldr	r0, [pc, #196]	@ (8001e5c <seclectmenu+0x1274>)
 8001d96:	f7fe fbdf 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	482f      	ldr	r0, [pc, #188]	@ (8001e5c <seclectmenu+0x1274>)
 8001da0:	f7fe fb68 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 8001da4:	493a      	ldr	r1, [pc, #232]	@ (8001e90 <seclectmenu+0x12a8>)
 8001da6:	482d      	ldr	r0, [pc, #180]	@ (8001e5c <seclectmenu+0x1274>)
 8001da8:	f7fe fbbf 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	2100      	movs	r1, #0
 8001db0:	482a      	ldr	r0, [pc, #168]	@ (8001e5c <seclectmenu+0x1274>)
 8001db2:	f7fe fb5f 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8001db6:	4937      	ldr	r1, [pc, #220]	@ (8001e94 <seclectmenu+0x12ac>)
 8001db8:	4828      	ldr	r0, [pc, #160]	@ (8001e5c <seclectmenu+0x1274>)
 8001dba:	f7fe fbb6 	bl	800052a <CLCD_WriteString>
																break;
 8001dbe:	e02b      	b.n	8001e18 <seclectmenu+0x1230>
															case 4:
																CLCD_Clear(&LCD1);
 8001dc0:	4826      	ldr	r0, [pc, #152]	@ (8001e5c <seclectmenu+0x1274>)
 8001dc2:	f7fe fbc9 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4824      	ldr	r0, [pc, #144]	@ (8001e5c <seclectmenu+0x1274>)
 8001dcc:	f7fe fb52 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8001dd0:	4931      	ldr	r1, [pc, #196]	@ (8001e98 <seclectmenu+0x12b0>)
 8001dd2:	4822      	ldr	r0, [pc, #136]	@ (8001e5c <seclectmenu+0x1274>)
 8001dd4:	f7fe fba9 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2100      	movs	r1, #0
 8001ddc:	481f      	ldr	r0, [pc, #124]	@ (8001e5c <seclectmenu+0x1274>)
 8001dde:	f7fe fb49 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 8001de2:	492e      	ldr	r1, [pc, #184]	@ (8001e9c <seclectmenu+0x12b4>)
 8001de4:	481d      	ldr	r0, [pc, #116]	@ (8001e5c <seclectmenu+0x1274>)
 8001de6:	f7fe fba0 	bl	800052a <CLCD_WriteString>
																break;
 8001dea:	e015      	b.n	8001e18 <seclectmenu+0x1230>
															default:
																CLCD_Clear(&LCD1);
 8001dec:	481b      	ldr	r0, [pc, #108]	@ (8001e5c <seclectmenu+0x1274>)
 8001dee:	f7fe fbb3 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	4819      	ldr	r0, [pc, #100]	@ (8001e5c <seclectmenu+0x1274>)
 8001df8:	f7fe fb3c 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8001dfc:	4925      	ldr	r1, [pc, #148]	@ (8001e94 <seclectmenu+0x12ac>)
 8001dfe:	4817      	ldr	r0, [pc, #92]	@ (8001e5c <seclectmenu+0x1274>)
 8001e00:	f7fe fb93 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2100      	movs	r1, #0
 8001e08:	4814      	ldr	r0, [pc, #80]	@ (8001e5c <seclectmenu+0x1274>)
 8001e0a:	f7fe fb33 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 8001e0e:	4924      	ldr	r1, [pc, #144]	@ (8001ea0 <seclectmenu+0x12b8>)
 8001e10:	4812      	ldr	r0, [pc, #72]	@ (8001e5c <seclectmenu+0x1274>)
 8001e12:	f7fe fb8a 	bl	800052a <CLCD_WriteString>
																break;
 8001e16:	bf00      	nop
															}
														}
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001e18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e1c:	4817      	ldr	r0, [pc, #92]	@ (8001e7c <seclectmenu+0x1294>)
 8001e1e:	f7fe fe95 	bl	8000b4c <checkbuton>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8220 	beq.w	800226a <seclectmenu+0x1682>
														{
															exitmenu = 15;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <seclectmenu+0x1280>)
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001e30:	7b3b      	ldrb	r3, [r7, #12]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	7abb      	ldrb	r3, [r7, #10]
 8001e38:	4413      	add	r3, r2
 8001e3a:	713b      	strb	r3, [r7, #4]
															switch (statusadd1)
 8001e3c:	7abb      	ldrb	r3, [r7, #10]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	f200 820f 	bhi.w	8002264 <seclectmenu+0x167c>
 8001e46:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <seclectmenu+0x1264>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001ea5 	.word	0x08001ea5
 8001e50:	08001f83 	.word	0x08001f83
 8001e54:	08002061 	.word	0x08002061
 8001e58:	0800213f 	.word	0x0800213f
 8001e5c:	200001ec 	.word	0x200001ec
 8001e60:	08006a70 	.word	0x08006a70
 8001e64:	08006a80 	.word	0x08006a80
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	0800699c 	.word	0x0800699c
 8001e74:	08006a90 	.word	0x08006a90
 8001e78:	08006aa0 	.word	0x08006aa0
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	08006aa8 	.word	0x08006aa8
 8001e84:	08006abc 	.word	0x08006abc
 8001e88:	08006ad0 	.word	0x08006ad0
 8001e8c:	08006ae4 	.word	0x08006ae4
 8001e90:	08006af8 	.word	0x08006af8
 8001e94:	08006b0c 	.word	0x08006b0c
 8001e98:	08006b20 	.word	0x08006b20
 8001e9c:	08006b34 	.word	0x08006b34
 8001ea0:	08006a58 	.word	0x08006a58
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8001ea4:	793b      	ldrb	r3, [r7, #4]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 f8ca 	bl	8003040 <CheckKey>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d125      	bne.n	8001efe <seclectmenu+0x1316>
																{
																	CLCD_Clear(&LCD1);
 8001eb2:	48b9      	ldr	r0, [pc, #740]	@ (8002198 <seclectmenu+0x15b0>)
 8001eb4:	f7fe fb50 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	48b6      	ldr	r0, [pc, #728]	@ (8002198 <seclectmenu+0x15b0>)
 8001ebe:	f7fe fad9 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO ADMIN CARD 1 ");
 8001ec2:	49b6      	ldr	r1, [pc, #728]	@ (800219c <seclectmenu+0x15b4>)
 8001ec4:	48b4      	ldr	r0, [pc, #720]	@ (8002198 <seclectmenu+0x15b0>)
 8001ec6:	f7fe fb30 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8001eca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ece:	f001 ff45 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8001ed2:	48b1      	ldr	r0, [pc, #708]	@ (8002198 <seclectmenu+0x15b0>)
 8001ed4:	f7fe fb40 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	48ae      	ldr	r0, [pc, #696]	@ (8002198 <seclectmenu+0x15b0>)
 8001ede:	f7fe fac9 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8001ee2:	49af      	ldr	r1, [pc, #700]	@ (80021a0 <seclectmenu+0x15b8>)
 8001ee4:	48ac      	ldr	r0, [pc, #688]	@ (8002198 <seclectmenu+0x15b0>)
 8001ee6:	f7fe fb20 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2100      	movs	r1, #0
 8001eee:	48aa      	ldr	r0, [pc, #680]	@ (8002198 <seclectmenu+0x15b0>)
 8001ef0:	f7fe fac0 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8001ef4:	49ab      	ldr	r1, [pc, #684]	@ (80021a4 <seclectmenu+0x15bc>)
 8001ef6:	48a8      	ldr	r0, [pc, #672]	@ (8002198 <seclectmenu+0x15b0>)
 8001ef8:	f7fe fb17 	bl	800052a <CLCD_WriteString>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
																		CLCD_SetCursor(&LCD1, 0, 1);
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
																	}
																}
																break;
 8001efc:	e1b5      	b.n	800226a <seclectmenu+0x1682>
																	removeuid(CheckKey(keyadd1));
 8001efe:	793b      	ldrb	r3, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 f89d 	bl	8003040 <CheckKey>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 f8c7 	bl	800309c <removeuid>
																	CLCD_Clear(&LCD1);
 8001f0e:	48a2      	ldr	r0, [pc, #648]	@ (8002198 <seclectmenu+0x15b0>)
 8001f10:	f7fe fb22 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	489f      	ldr	r0, [pc, #636]	@ (8002198 <seclectmenu+0x15b0>)
 8001f1a:	f7fe faab 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 1 DELETION ");
 8001f1e:	49a2      	ldr	r1, [pc, #648]	@ (80021a8 <seclectmenu+0x15c0>)
 8001f20:	489d      	ldr	r0, [pc, #628]	@ (8002198 <seclectmenu+0x15b0>)
 8001f22:	f7fe fb02 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8001f26:	2201      	movs	r2, #1
 8001f28:	2100      	movs	r1, #0
 8001f2a:	489b      	ldr	r0, [pc, #620]	@ (8002198 <seclectmenu+0x15b0>)
 8001f2c:	f7fe faa2 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 8001f30:	499e      	ldr	r1, [pc, #632]	@ (80021ac <seclectmenu+0x15c4>)
 8001f32:	4899      	ldr	r0, [pc, #612]	@ (8002198 <seclectmenu+0x15b0>)
 8001f34:	f7fe faf9 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8001f38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f3c:	f001 ff0e 	bl	8003d5c <HAL_Delay>
																	if (checkcountUID() == 0)
 8001f40:	f000 fe42 	bl	8002bc8 <checkcountUID>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <seclectmenu+0x136e>
																		startadd();
 8001f4a:	f001 f8b5 	bl	80030b8 <startadd>
																		exitmenu = 0;
 8001f4e:	4b98      	ldr	r3, [pc, #608]	@ (80021b0 <seclectmenu+0x15c8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
																break;
 8001f54:	e189      	b.n	800226a <seclectmenu+0x1682>
																		CLCD_Clear(&LCD1);
 8001f56:	4890      	ldr	r0, [pc, #576]	@ (8002198 <seclectmenu+0x15b0>)
 8001f58:	f7fe fafe 	bl	8000558 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	488d      	ldr	r0, [pc, #564]	@ (8002198 <seclectmenu+0x15b0>)
 8001f62:	f7fe fa87 	bl	8000474 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 1 ");
 8001f66:	498e      	ldr	r1, [pc, #568]	@ (80021a0 <seclectmenu+0x15b8>)
 8001f68:	488b      	ldr	r0, [pc, #556]	@ (8002198 <seclectmenu+0x15b0>)
 8001f6a:	f7fe fade 	bl	800052a <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2100      	movs	r1, #0
 8001f72:	4889      	ldr	r0, [pc, #548]	@ (8002198 <seclectmenu+0x15b0>)
 8001f74:	f7fe fa7e 	bl	8000474 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 2 ");
 8001f78:	498a      	ldr	r1, [pc, #552]	@ (80021a4 <seclectmenu+0x15bc>)
 8001f7a:	4887      	ldr	r0, [pc, #540]	@ (8002198 <seclectmenu+0x15b0>)
 8001f7c:	f7fe fad5 	bl	800052a <CLCD_WriteString>
																break;
 8001f80:	e173      	b.n	800226a <seclectmenu+0x1682>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001f82:	793b      	ldrb	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 f85b 	bl	8003040 <CheckKey>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d125      	bne.n	8001fdc <seclectmenu+0x13f4>
																{
																	CLCD_Clear(&LCD1);
 8001f90:	4881      	ldr	r0, [pc, #516]	@ (8002198 <seclectmenu+0x15b0>)
 8001f92:	f7fe fae1 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	487f      	ldr	r0, [pc, #508]	@ (8002198 <seclectmenu+0x15b0>)
 8001f9c:	f7fe fa6a 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO ADMIN CARD 2 ");
 8001fa0:	4984      	ldr	r1, [pc, #528]	@ (80021b4 <seclectmenu+0x15cc>)
 8001fa2:	487d      	ldr	r0, [pc, #500]	@ (8002198 <seclectmenu+0x15b0>)
 8001fa4:	f7fe fac1 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8001fa8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fac:	f001 fed6 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8001fb0:	4879      	ldr	r0, [pc, #484]	@ (8002198 <seclectmenu+0x15b0>)
 8001fb2:	f7fe fad1 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4877      	ldr	r0, [pc, #476]	@ (8002198 <seclectmenu+0x15b0>)
 8001fbc:	f7fe fa5a 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 8001fc0:	497d      	ldr	r1, [pc, #500]	@ (80021b8 <seclectmenu+0x15d0>)
 8001fc2:	4875      	ldr	r0, [pc, #468]	@ (8002198 <seclectmenu+0x15b0>)
 8001fc4:	f7fe fab1 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4872      	ldr	r0, [pc, #456]	@ (8002198 <seclectmenu+0x15b0>)
 8001fce:	f7fe fa51 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 8001fd2:	497a      	ldr	r1, [pc, #488]	@ (80021bc <seclectmenu+0x15d4>)
 8001fd4:	4870      	ldr	r0, [pc, #448]	@ (8002198 <seclectmenu+0x15b0>)
 8001fd6:	f7fe faa8 	bl	800052a <CLCD_WriteString>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
																		CLCD_SetCursor(&LCD1, 0, 1);
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
																	}
																}
																break;
 8001fda:	e146      	b.n	800226a <seclectmenu+0x1682>
																	removeuid(CheckKey(keyadd1));
 8001fdc:	793b      	ldrb	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 f82e 	bl	8003040 <CheckKey>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 f858 	bl	800309c <removeuid>
																	CLCD_Clear(&LCD1);
 8001fec:	486a      	ldr	r0, [pc, #424]	@ (8002198 <seclectmenu+0x15b0>)
 8001fee:	f7fe fab3 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4868      	ldr	r0, [pc, #416]	@ (8002198 <seclectmenu+0x15b0>)
 8001ff8:	f7fe fa3c 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 2 DELETION ");
 8001ffc:	4970      	ldr	r1, [pc, #448]	@ (80021c0 <seclectmenu+0x15d8>)
 8001ffe:	4866      	ldr	r0, [pc, #408]	@ (8002198 <seclectmenu+0x15b0>)
 8002000:	f7fe fa93 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002004:	2201      	movs	r2, #1
 8002006:	2100      	movs	r1, #0
 8002008:	4863      	ldr	r0, [pc, #396]	@ (8002198 <seclectmenu+0x15b0>)
 800200a:	f7fe fa33 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 800200e:	4967      	ldr	r1, [pc, #412]	@ (80021ac <seclectmenu+0x15c4>)
 8002010:	4861      	ldr	r0, [pc, #388]	@ (8002198 <seclectmenu+0x15b0>)
 8002012:	f7fe fa8a 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8002016:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800201a:	f001 fe9f 	bl	8003d5c <HAL_Delay>
																	if (checkcountUID() == 0)
 800201e:	f000 fdd3 	bl	8002bc8 <checkcountUID>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <seclectmenu+0x144c>
																		startadd();
 8002028:	f001 f846 	bl	80030b8 <startadd>
																		exitmenu = 0;
 800202c:	4b60      	ldr	r3, [pc, #384]	@ (80021b0 <seclectmenu+0x15c8>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
																break;
 8002032:	e11a      	b.n	800226a <seclectmenu+0x1682>
																		CLCD_Clear(&LCD1);
 8002034:	4858      	ldr	r0, [pc, #352]	@ (8002198 <seclectmenu+0x15b0>)
 8002036:	f7fe fa8f 	bl	8000558 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	4856      	ldr	r0, [pc, #344]	@ (8002198 <seclectmenu+0x15b0>)
 8002040:	f7fe fa18 	bl	8000474 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 2 ");
 8002044:	495c      	ldr	r1, [pc, #368]	@ (80021b8 <seclectmenu+0x15d0>)
 8002046:	4854      	ldr	r0, [pc, #336]	@ (8002198 <seclectmenu+0x15b0>)
 8002048:	f7fe fa6f 	bl	800052a <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 800204c:	2201      	movs	r2, #1
 800204e:	2100      	movs	r1, #0
 8002050:	4851      	ldr	r0, [pc, #324]	@ (8002198 <seclectmenu+0x15b0>)
 8002052:	f7fe fa0f 	bl	8000474 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 3 ");
 8002056:	4959      	ldr	r1, [pc, #356]	@ (80021bc <seclectmenu+0x15d4>)
 8002058:	484f      	ldr	r0, [pc, #316]	@ (8002198 <seclectmenu+0x15b0>)
 800205a:	f7fe fa66 	bl	800052a <CLCD_WriteString>
																break;
 800205e:	e104      	b.n	800226a <seclectmenu+0x1682>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8002060:	793b      	ldrb	r3, [r7, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 ffec 	bl	8003040 <CheckKey>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d125      	bne.n	80020ba <seclectmenu+0x14d2>
																{
																	CLCD_Clear(&LCD1);
 800206e:	484a      	ldr	r0, [pc, #296]	@ (8002198 <seclectmenu+0x15b0>)
 8002070:	f7fe fa72 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	4847      	ldr	r0, [pc, #284]	@ (8002198 <seclectmenu+0x15b0>)
 800207a:	f7fe f9fb 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO ADMIN CARD 3 ");
 800207e:	4951      	ldr	r1, [pc, #324]	@ (80021c4 <seclectmenu+0x15dc>)
 8002080:	4845      	ldr	r0, [pc, #276]	@ (8002198 <seclectmenu+0x15b0>)
 8002082:	f7fe fa52 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8002086:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208a:	f001 fe67 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800208e:	4842      	ldr	r0, [pc, #264]	@ (8002198 <seclectmenu+0x15b0>)
 8002090:	f7fe fa62 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	483f      	ldr	r0, [pc, #252]	@ (8002198 <seclectmenu+0x15b0>)
 800209a:	f7fe f9eb 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 800209e:	494a      	ldr	r1, [pc, #296]	@ (80021c8 <seclectmenu+0x15e0>)
 80020a0:	483d      	ldr	r0, [pc, #244]	@ (8002198 <seclectmenu+0x15b0>)
 80020a2:	f7fe fa42 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80020a6:	2201      	movs	r2, #1
 80020a8:	2100      	movs	r1, #0
 80020aa:	483b      	ldr	r0, [pc, #236]	@ (8002198 <seclectmenu+0x15b0>)
 80020ac:	f7fe f9e2 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 80020b0:	4946      	ldr	r1, [pc, #280]	@ (80021cc <seclectmenu+0x15e4>)
 80020b2:	4839      	ldr	r0, [pc, #228]	@ (8002198 <seclectmenu+0x15b0>)
 80020b4:	f7fe fa39 	bl	800052a <CLCD_WriteString>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
																		CLCD_SetCursor(&LCD1, 0, 1);
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
																	}
																}
																break;
 80020b8:	e0d7      	b.n	800226a <seclectmenu+0x1682>
																	removeuid(CheckKey(keyadd1));
 80020ba:	793b      	ldrb	r3, [r7, #4]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 ffbf 	bl	8003040 <CheckKey>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 ffe9 	bl	800309c <removeuid>
																	CLCD_Clear(&LCD1);
 80020ca:	4833      	ldr	r0, [pc, #204]	@ (8002198 <seclectmenu+0x15b0>)
 80020cc:	f7fe fa44 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	4830      	ldr	r0, [pc, #192]	@ (8002198 <seclectmenu+0x15b0>)
 80020d6:	f7fe f9cd 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 3 DELETION ");
 80020da:	493d      	ldr	r1, [pc, #244]	@ (80021d0 <seclectmenu+0x15e8>)
 80020dc:	482e      	ldr	r0, [pc, #184]	@ (8002198 <seclectmenu+0x15b0>)
 80020de:	f7fe fa24 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80020e2:	2201      	movs	r2, #1
 80020e4:	2100      	movs	r1, #0
 80020e6:	482c      	ldr	r0, [pc, #176]	@ (8002198 <seclectmenu+0x15b0>)
 80020e8:	f7fe f9c4 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 80020ec:	492f      	ldr	r1, [pc, #188]	@ (80021ac <seclectmenu+0x15c4>)
 80020ee:	482a      	ldr	r0, [pc, #168]	@ (8002198 <seclectmenu+0x15b0>)
 80020f0:	f7fe fa1b 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 80020f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f8:	f001 fe30 	bl	8003d5c <HAL_Delay>
																	if (checkcountUID() == 0)
 80020fc:	f000 fd64 	bl	8002bc8 <checkcountUID>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <seclectmenu+0x152a>
																		startadd();
 8002106:	f000 ffd7 	bl	80030b8 <startadd>
																		exitmenu = 0;
 800210a:	4b29      	ldr	r3, [pc, #164]	@ (80021b0 <seclectmenu+0x15c8>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
																break;
 8002110:	e0ab      	b.n	800226a <seclectmenu+0x1682>
																		CLCD_Clear(&LCD1);
 8002112:	4821      	ldr	r0, [pc, #132]	@ (8002198 <seclectmenu+0x15b0>)
 8002114:	f7fe fa20 	bl	8000558 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	481e      	ldr	r0, [pc, #120]	@ (8002198 <seclectmenu+0x15b0>)
 800211e:	f7fe f9a9 	bl	8000474 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 3 ");
 8002122:	4929      	ldr	r1, [pc, #164]	@ (80021c8 <seclectmenu+0x15e0>)
 8002124:	481c      	ldr	r0, [pc, #112]	@ (8002198 <seclectmenu+0x15b0>)
 8002126:	f7fe fa00 	bl	800052a <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 800212a:	2201      	movs	r2, #1
 800212c:	2100      	movs	r1, #0
 800212e:	481a      	ldr	r0, [pc, #104]	@ (8002198 <seclectmenu+0x15b0>)
 8002130:	f7fe f9a0 	bl	8000474 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    ADMIN CARD 4 ");
 8002134:	4925      	ldr	r1, [pc, #148]	@ (80021cc <seclectmenu+0x15e4>)
 8002136:	4818      	ldr	r0, [pc, #96]	@ (8002198 <seclectmenu+0x15b0>)
 8002138:	f7fe f9f7 	bl	800052a <CLCD_WriteString>
																break;
 800213c:	e095      	b.n	800226a <seclectmenu+0x1682>
															case 4:
																if (CheckKey(keyadd1) == 0)
 800213e:	793b      	ldrb	r3, [r7, #4]
 8002140:	4618      	mov	r0, r3
 8002142:	f000 ff7d 	bl	8003040 <CheckKey>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d149      	bne.n	80021e0 <seclectmenu+0x15f8>
																{
																	CLCD_Clear(&LCD1);
 800214c:	4812      	ldr	r0, [pc, #72]	@ (8002198 <seclectmenu+0x15b0>)
 800214e:	f7fe fa03 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	4810      	ldr	r0, [pc, #64]	@ (8002198 <seclectmenu+0x15b0>)
 8002158:	f7fe f98c 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO ADMIN CARD 4 ");
 800215c:	491d      	ldr	r1, [pc, #116]	@ (80021d4 <seclectmenu+0x15ec>)
 800215e:	480e      	ldr	r0, [pc, #56]	@ (8002198 <seclectmenu+0x15b0>)
 8002160:	f7fe f9e3 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8002164:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002168:	f001 fdf8 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800216c:	480a      	ldr	r0, [pc, #40]	@ (8002198 <seclectmenu+0x15b0>)
 800216e:	f7fe f9f3 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	4808      	ldr	r0, [pc, #32]	@ (8002198 <seclectmenu+0x15b0>)
 8002178:	f7fe f97c 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 800217c:	4916      	ldr	r1, [pc, #88]	@ (80021d8 <seclectmenu+0x15f0>)
 800217e:	4806      	ldr	r0, [pc, #24]	@ (8002198 <seclectmenu+0x15b0>)
 8002180:	f7fe f9d3 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002184:	2201      	movs	r2, #1
 8002186:	2100      	movs	r1, #0
 8002188:	4803      	ldr	r0, [pc, #12]	@ (8002198 <seclectmenu+0x15b0>)
 800218a:	f7fe f973 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 800218e:	4913      	ldr	r1, [pc, #76]	@ (80021dc <seclectmenu+0x15f4>)
 8002190:	4801      	ldr	r0, [pc, #4]	@ (8002198 <seclectmenu+0x15b0>)
 8002192:	f7fe f9ca 	bl	800052a <CLCD_WriteString>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
																		CLCD_SetCursor(&LCD1, 0, 1);
																		CLCD_WriteString(&LCD1, "    BACK ");
																	}
																}
																break;
 8002196:	e068      	b.n	800226a <seclectmenu+0x1682>
 8002198:	200001ec 	.word	0x200001ec
 800219c:	08006cb4 	.word	0x08006cb4
 80021a0:	08006aa8 	.word	0x08006aa8
 80021a4:	08006abc 	.word	0x08006abc
 80021a8:	08006cc8 	.word	0x08006cc8
 80021ac:	08006cdc 	.word	0x08006cdc
 80021b0:	20000000 	.word	0x20000000
 80021b4:	08006cec 	.word	0x08006cec
 80021b8:	08006ad0 	.word	0x08006ad0
 80021bc:	08006ae4 	.word	0x08006ae4
 80021c0:	08006d00 	.word	0x08006d00
 80021c4:	08006d14 	.word	0x08006d14
 80021c8:	08006af8 	.word	0x08006af8
 80021cc:	08006b0c 	.word	0x08006b0c
 80021d0:	08006d28 	.word	0x08006d28
 80021d4:	08006d3c 	.word	0x08006d3c
 80021d8:	08006b20 	.word	0x08006b20
 80021dc:	08006b34 	.word	0x08006b34
																	removeuid(CheckKey(keyadd1));
 80021e0:	793b      	ldrb	r3, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 ff2c 	bl	8003040 <CheckKey>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 ff56 	bl	800309c <removeuid>
																	CLCD_Clear(&LCD1);
 80021f0:	48af      	ldr	r0, [pc, #700]	@ (80024b0 <seclectmenu+0x18c8>)
 80021f2:	f7fe f9b1 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	48ad      	ldr	r0, [pc, #692]	@ (80024b0 <seclectmenu+0x18c8>)
 80021fc:	f7fe f93a 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 4 DELETION ");
 8002200:	49ac      	ldr	r1, [pc, #688]	@ (80024b4 <seclectmenu+0x18cc>)
 8002202:	48ab      	ldr	r0, [pc, #684]	@ (80024b0 <seclectmenu+0x18c8>)
 8002204:	f7fe f991 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002208:	2201      	movs	r2, #1
 800220a:	2100      	movs	r1, #0
 800220c:	48a8      	ldr	r0, [pc, #672]	@ (80024b0 <seclectmenu+0x18c8>)
 800220e:	f7fe f931 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 8002212:	49a9      	ldr	r1, [pc, #676]	@ (80024b8 <seclectmenu+0x18d0>)
 8002214:	48a6      	ldr	r0, [pc, #664]	@ (80024b0 <seclectmenu+0x18c8>)
 8002216:	f7fe f988 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 800221a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800221e:	f001 fd9d 	bl	8003d5c <HAL_Delay>
																	if (checkcountUID() == 0)
 8002222:	f000 fcd1 	bl	8002bc8 <checkcountUID>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <seclectmenu+0x1650>
																		startadd();
 800222c:	f000 ff44 	bl	80030b8 <startadd>
																		exitmenu = 0;
 8002230:	4ba2      	ldr	r3, [pc, #648]	@ (80024bc <seclectmenu+0x18d4>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
																break;
 8002236:	e018      	b.n	800226a <seclectmenu+0x1682>
																		CLCD_Clear(&LCD1);
 8002238:	489d      	ldr	r0, [pc, #628]	@ (80024b0 <seclectmenu+0x18c8>)
 800223a:	f7fe f98d 	bl	8000558 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	489b      	ldr	r0, [pc, #620]	@ (80024b0 <seclectmenu+0x18c8>)
 8002244:	f7fe f916 	bl	8000474 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  ADMIN CARD 4 ");
 8002248:	499d      	ldr	r1, [pc, #628]	@ (80024c0 <seclectmenu+0x18d8>)
 800224a:	4899      	ldr	r0, [pc, #612]	@ (80024b0 <seclectmenu+0x18c8>)
 800224c:	f7fe f96d 	bl	800052a <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002250:	2201      	movs	r2, #1
 8002252:	2100      	movs	r1, #0
 8002254:	4896      	ldr	r0, [pc, #600]	@ (80024b0 <seclectmenu+0x18c8>)
 8002256:	f7fe f90d 	bl	8000474 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    BACK ");
 800225a:	499a      	ldr	r1, [pc, #616]	@ (80024c4 <seclectmenu+0x18dc>)
 800225c:	4894      	ldr	r0, [pc, #592]	@ (80024b0 <seclectmenu+0x18c8>)
 800225e:	f7fe f964 	bl	800052a <CLCD_WriteString>
																break;
 8002262:	e002      	b.n	800226a <seclectmenu+0x1682>
															default:
																back11 = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	727b      	strb	r3, [r7, #9]
																break;
 8002268:	bf00      	nop
													while (back11 == 1)
 800226a:	7a7b      	ldrb	r3, [r7, #9]
 800226c:	2b01      	cmp	r3, #1
 800226e:	f43f ad32 	beq.w	8001cd6 <seclectmenu+0x10ee>
															}
														}
													}
													CLCD_Clear(&LCD1);
 8002272:	488f      	ldr	r0, [pc, #572]	@ (80024b0 <seclectmenu+0x18c8>)
 8002274:	f7fe f970 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	488c      	ldr	r0, [pc, #560]	@ (80024b0 <seclectmenu+0x18c8>)
 800227e:	f7fe f8f9 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> ADMIN CARD");
 8002282:	4991      	ldr	r1, [pc, #580]	@ (80024c8 <seclectmenu+0x18e0>)
 8002284:	488a      	ldr	r0, [pc, #552]	@ (80024b0 <seclectmenu+0x18c8>)
 8002286:	f7fe f950 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 800228a:	2201      	movs	r2, #1
 800228c:	2100      	movs	r1, #0
 800228e:	4888      	ldr	r0, [pc, #544]	@ (80024b0 <seclectmenu+0x18c8>)
 8002290:	f7fe f8f0 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   GUEST CARD");
 8002294:	498d      	ldr	r1, [pc, #564]	@ (80024cc <seclectmenu+0x18e4>)
 8002296:	4886      	ldr	r0, [pc, #536]	@ (80024b0 <seclectmenu+0x18c8>)
 8002298:	f7fe f947 	bl	800052a <CLCD_WriteString>
													break;
 800229c:	e2d7      	b.n	800284e <seclectmenu+0x1c66>
												case 2:
													CLCD_Clear(&LCD1);
 800229e:	4884      	ldr	r0, [pc, #528]	@ (80024b0 <seclectmenu+0x18c8>)
 80022a0:	f7fe f95a 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	4881      	ldr	r0, [pc, #516]	@ (80024b0 <seclectmenu+0x18c8>)
 80022aa:	f7fe f8e3 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 80022ae:	4988      	ldr	r1, [pc, #544]	@ (80024d0 <seclectmenu+0x18e8>)
 80022b0:	487f      	ldr	r0, [pc, #508]	@ (80024b0 <seclectmenu+0x18c8>)
 80022b2:	f7fe f93a 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80022b6:	2201      	movs	r2, #1
 80022b8:	2100      	movs	r1, #0
 80022ba:	487d      	ldr	r0, [pc, #500]	@ (80024b0 <seclectmenu+0x18c8>)
 80022bc:	f7fe f8da 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 80022c0:	4984      	ldr	r1, [pc, #528]	@ (80024d4 <seclectmenu+0x18ec>)
 80022c2:	487b      	ldr	r0, [pc, #492]	@ (80024b0 <seclectmenu+0x18c8>)
 80022c4:	f7fe f931 	bl	800052a <CLCD_WriteString>
													uint8_t statusadd2 = 1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 80022d0:	e27a      	b.n	80027c8 <seclectmenu+0x1be0>
													{
														if (exitmenu == 0)
 80022d2:	4b7a      	ldr	r3, [pc, #488]	@ (80024bc <seclectmenu+0x18d4>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <seclectmenu+0x1702>
														{
															CLCD_Clear(&LCD1);
 80022da:	4875      	ldr	r0, [pc, #468]	@ (80024b0 <seclectmenu+0x18c8>)
 80022dc:	f7fe f93c 	bl	8000558 <CLCD_Clear>
															HAL_Delay(1000);
 80022e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022e4:	f001 fd3a 	bl	8003d5c <HAL_Delay>
															return;
 80022e8:	e3e9      	b.n	8002abe <seclectmenu+0x1ed6>
														}
														if (checkbuton(SELECT_GPIO_Port, SELECT_Pin) != 0)
 80022ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ee:	487a      	ldr	r0, [pc, #488]	@ (80024d8 <seclectmenu+0x18f0>)
 80022f0:	f7fe fc2c 	bl	8000b4c <checkbuton>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 808a 	beq.w	8002410 <seclectmenu+0x1828>
														{
															exitmenu = 15;
 80022fc:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <seclectmenu+0x18d4>)
 80022fe:	220f      	movs	r2, #15
 8002300:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8002302:	7a3b      	ldrb	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8002308:	7a3b      	ldrb	r3, [r7, #8]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d801      	bhi.n	8002312 <seclectmenu+0x172a>
 800230e:	7a3b      	ldrb	r3, [r7, #8]
 8002310:	e000      	b.n	8002314 <seclectmenu+0x172c>
 8002312:	2300      	movs	r3, #0
 8002314:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 8002316:	7a3b      	ldrb	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	2b03      	cmp	r3, #3
 800231c:	d862      	bhi.n	80023e4 <seclectmenu+0x17fc>
 800231e:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <seclectmenu+0x173c>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	08002361 	.word	0x08002361
 800232c:	0800238d 	.word	0x0800238d
 8002330:	080023b9 	.word	0x080023b9
															{
															case 1:
																CLCD_Clear(&LCD1);
 8002334:	485e      	ldr	r0, [pc, #376]	@ (80024b0 <seclectmenu+0x18c8>)
 8002336:	f7fe f90f 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	485c      	ldr	r0, [pc, #368]	@ (80024b0 <seclectmenu+0x18c8>)
 8002340:	f7fe f898 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 8002344:	4962      	ldr	r1, [pc, #392]	@ (80024d0 <seclectmenu+0x18e8>)
 8002346:	485a      	ldr	r0, [pc, #360]	@ (80024b0 <seclectmenu+0x18c8>)
 8002348:	f7fe f8ef 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 800234c:	2201      	movs	r2, #1
 800234e:	2100      	movs	r1, #0
 8002350:	4857      	ldr	r0, [pc, #348]	@ (80024b0 <seclectmenu+0x18c8>)
 8002352:	f7fe f88f 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 8002356:	495f      	ldr	r1, [pc, #380]	@ (80024d4 <seclectmenu+0x18ec>)
 8002358:	4855      	ldr	r0, [pc, #340]	@ (80024b0 <seclectmenu+0x18c8>)
 800235a:	f7fe f8e6 	bl	800052a <CLCD_WriteString>
																break;
 800235e:	e057      	b.n	8002410 <seclectmenu+0x1828>
															case 2:
																CLCD_Clear(&LCD1);
 8002360:	4853      	ldr	r0, [pc, #332]	@ (80024b0 <seclectmenu+0x18c8>)
 8002362:	f7fe f8f9 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	4851      	ldr	r0, [pc, #324]	@ (80024b0 <seclectmenu+0x18c8>)
 800236c:	f7fe f882 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 8002370:	495a      	ldr	r1, [pc, #360]	@ (80024dc <seclectmenu+0x18f4>)
 8002372:	484f      	ldr	r0, [pc, #316]	@ (80024b0 <seclectmenu+0x18c8>)
 8002374:	f7fe f8d9 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002378:	2201      	movs	r2, #1
 800237a:	2100      	movs	r1, #0
 800237c:	484c      	ldr	r0, [pc, #304]	@ (80024b0 <seclectmenu+0x18c8>)
 800237e:	f7fe f879 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 8002382:	4957      	ldr	r1, [pc, #348]	@ (80024e0 <seclectmenu+0x18f8>)
 8002384:	484a      	ldr	r0, [pc, #296]	@ (80024b0 <seclectmenu+0x18c8>)
 8002386:	f7fe f8d0 	bl	800052a <CLCD_WriteString>
																break;
 800238a:	e041      	b.n	8002410 <seclectmenu+0x1828>
															case 3:
																CLCD_Clear(&LCD1);
 800238c:	4848      	ldr	r0, [pc, #288]	@ (80024b0 <seclectmenu+0x18c8>)
 800238e:	f7fe f8e3 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	4846      	ldr	r0, [pc, #280]	@ (80024b0 <seclectmenu+0x18c8>)
 8002398:	f7fe f86c 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 800239c:	4951      	ldr	r1, [pc, #324]	@ (80024e4 <seclectmenu+0x18fc>)
 800239e:	4844      	ldr	r0, [pc, #272]	@ (80024b0 <seclectmenu+0x18c8>)
 80023a0:	f7fe f8c3 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2100      	movs	r1, #0
 80023a8:	4841      	ldr	r0, [pc, #260]	@ (80024b0 <seclectmenu+0x18c8>)
 80023aa:	f7fe f863 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 80023ae:	494e      	ldr	r1, [pc, #312]	@ (80024e8 <seclectmenu+0x1900>)
 80023b0:	483f      	ldr	r0, [pc, #252]	@ (80024b0 <seclectmenu+0x18c8>)
 80023b2:	f7fe f8ba 	bl	800052a <CLCD_WriteString>
																break;
 80023b6:	e02b      	b.n	8002410 <seclectmenu+0x1828>
															case 4:
																CLCD_Clear(&LCD1);
 80023b8:	483d      	ldr	r0, [pc, #244]	@ (80024b0 <seclectmenu+0x18c8>)
 80023ba:	f7fe f8cd 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	483b      	ldr	r0, [pc, #236]	@ (80024b0 <seclectmenu+0x18c8>)
 80023c4:	f7fe f856 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 80023c8:	4948      	ldr	r1, [pc, #288]	@ (80024ec <seclectmenu+0x1904>)
 80023ca:	4839      	ldr	r0, [pc, #228]	@ (80024b0 <seclectmenu+0x18c8>)
 80023cc:	f7fe f8ad 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80023d0:	2201      	movs	r2, #1
 80023d2:	2100      	movs	r1, #0
 80023d4:	4836      	ldr	r0, [pc, #216]	@ (80024b0 <seclectmenu+0x18c8>)
 80023d6:	f7fe f84d 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 80023da:	493a      	ldr	r1, [pc, #232]	@ (80024c4 <seclectmenu+0x18dc>)
 80023dc:	4834      	ldr	r0, [pc, #208]	@ (80024b0 <seclectmenu+0x18c8>)
 80023de:	f7fe f8a4 	bl	800052a <CLCD_WriteString>
																break;
 80023e2:	e015      	b.n	8002410 <seclectmenu+0x1828>
															default:
																CLCD_Clear(&LCD1);
 80023e4:	4832      	ldr	r0, [pc, #200]	@ (80024b0 <seclectmenu+0x18c8>)
 80023e6:	f7fe f8b7 	bl	8000558 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	4830      	ldr	r0, [pc, #192]	@ (80024b0 <seclectmenu+0x18c8>)
 80023f0:	f7fe f840 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 80023f4:	493c      	ldr	r1, [pc, #240]	@ (80024e8 <seclectmenu+0x1900>)
 80023f6:	482e      	ldr	r0, [pc, #184]	@ (80024b0 <seclectmenu+0x18c8>)
 80023f8:	f7fe f897 	bl	800052a <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2100      	movs	r1, #0
 8002400:	482b      	ldr	r0, [pc, #172]	@ (80024b0 <seclectmenu+0x18c8>)
 8002402:	f7fe f837 	bl	8000474 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 8002406:	493a      	ldr	r1, [pc, #232]	@ (80024f0 <seclectmenu+0x1908>)
 8002408:	4829      	ldr	r0, [pc, #164]	@ (80024b0 <seclectmenu+0x18c8>)
 800240a:	f7fe f88e 	bl	800052a <CLCD_WriteString>
																break;
 800240e:	bf00      	nop
															}
														}
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8002410:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002414:	4837      	ldr	r0, [pc, #220]	@ (80024f4 <seclectmenu+0x190c>)
 8002416:	f7fe fb99 	bl	8000b4c <checkbuton>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 81d3 	beq.w	80027c8 <seclectmenu+0x1be0>
														{
															exitmenu = 15;
 8002422:	4b26      	ldr	r3, [pc, #152]	@ (80024bc <seclectmenu+0x18d4>)
 8002424:	220f      	movs	r2, #15
 8002426:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	b2da      	uxtb	r2, r3
 800242e:	7a3b      	ldrb	r3, [r7, #8]
 8002430:	4413      	add	r3, r2
 8002432:	717b      	strb	r3, [r7, #5]
															switch (statusadd2)
 8002434:	7a3b      	ldrb	r3, [r7, #8]
 8002436:	3b01      	subs	r3, #1
 8002438:	2b03      	cmp	r3, #3
 800243a:	f200 81c2 	bhi.w	80027c2 <seclectmenu+0x1bda>
 800243e:	a201      	add	r2, pc, #4	@ (adr r2, 8002444 <seclectmenu+0x185c>)
 8002440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002444:	08002455 	.word	0x08002455
 8002448:	0800256b 	.word	0x0800256b
 800244c:	08002633 	.word	0x08002633
 8002450:	080026fb 	.word	0x080026fb
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8002454:	797b      	ldrb	r3, [r7, #5]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fdf2 	bl	8003040 <CheckKey>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d14c      	bne.n	80024fc <seclectmenu+0x1914>
																{
																	CLCD_Clear(&LCD1);
 8002462:	4813      	ldr	r0, [pc, #76]	@ (80024b0 <seclectmenu+0x18c8>)
 8002464:	f7fe f878 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	4810      	ldr	r0, [pc, #64]	@ (80024b0 <seclectmenu+0x18c8>)
 800246e:	f7fe f801 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO GUEST CARD 1 ");
 8002472:	4921      	ldr	r1, [pc, #132]	@ (80024f8 <seclectmenu+0x1910>)
 8002474:	480e      	ldr	r0, [pc, #56]	@ (80024b0 <seclectmenu+0x18c8>)
 8002476:	f7fe f858 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 800247a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800247e:	f001 fc6d 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002482:	480b      	ldr	r0, [pc, #44]	@ (80024b0 <seclectmenu+0x18c8>)
 8002484:	f7fe f868 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	4808      	ldr	r0, [pc, #32]	@ (80024b0 <seclectmenu+0x18c8>)
 800248e:	f7fd fff1 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 8002492:	490f      	ldr	r1, [pc, #60]	@ (80024d0 <seclectmenu+0x18e8>)
 8002494:	4806      	ldr	r0, [pc, #24]	@ (80024b0 <seclectmenu+0x18c8>)
 8002496:	f7fe f848 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800249a:	2201      	movs	r2, #1
 800249c:	2100      	movs	r1, #0
 800249e:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <seclectmenu+0x18c8>)
 80024a0:	f7fd ffe8 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 80024a4:	490b      	ldr	r1, [pc, #44]	@ (80024d4 <seclectmenu+0x18ec>)
 80024a6:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <seclectmenu+0x18c8>)
 80024a8:	f7fe f83f 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 0);
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
																	CLCD_SetCursor(&LCD1, 0, 1);
																	CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
																}
																break;
 80024ac:	e18c      	b.n	80027c8 <seclectmenu+0x1be0>
 80024ae:	bf00      	nop
 80024b0:	200001ec 	.word	0x200001ec
 80024b4:	08006d50 	.word	0x08006d50
 80024b8:	08006cdc 	.word	0x08006cdc
 80024bc:	20000000 	.word	0x20000000
 80024c0:	08006b20 	.word	0x08006b20
 80024c4:	08006b34 	.word	0x08006b34
 80024c8:	08006a70 	.word	0x08006a70
 80024cc:	08006a80 	.word	0x08006a80
 80024d0:	08006b6c 	.word	0x08006b6c
 80024d4:	08006b80 	.word	0x08006b80
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	08006b94 	.word	0x08006b94
 80024e0:	08006ba8 	.word	0x08006ba8
 80024e4:	08006bbc 	.word	0x08006bbc
 80024e8:	08006bd0 	.word	0x08006bd0
 80024ec:	08006be4 	.word	0x08006be4
 80024f0:	08006a58 	.word	0x08006a58
 80024f4:	40010800 	.word	0x40010800
 80024f8:	08006d64 	.word	0x08006d64
																	removeuid(CheckKey(keyadd2));
 80024fc:	797b      	ldrb	r3, [r7, #5]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fd9e 	bl	8003040 <CheckKey>
 8002504:	4603      	mov	r3, r0
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fdc8 	bl	800309c <removeuid>
																	CLCD_Clear(&LCD1);
 800250c:	48bb      	ldr	r0, [pc, #748]	@ (80027fc <seclectmenu+0x1c14>)
 800250e:	f7fe f823 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	48b9      	ldr	r0, [pc, #740]	@ (80027fc <seclectmenu+0x1c14>)
 8002518:	f7fd ffac 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 1 DELETION ");
 800251c:	49b8      	ldr	r1, [pc, #736]	@ (8002800 <seclectmenu+0x1c18>)
 800251e:	48b7      	ldr	r0, [pc, #732]	@ (80027fc <seclectmenu+0x1c14>)
 8002520:	f7fe f803 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002524:	2201      	movs	r2, #1
 8002526:	2100      	movs	r1, #0
 8002528:	48b4      	ldr	r0, [pc, #720]	@ (80027fc <seclectmenu+0x1c14>)
 800252a:	f7fd ffa3 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 800252e:	49b5      	ldr	r1, [pc, #724]	@ (8002804 <seclectmenu+0x1c1c>)
 8002530:	48b2      	ldr	r0, [pc, #712]	@ (80027fc <seclectmenu+0x1c14>)
 8002532:	f7fd fffa 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8002536:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800253a:	f001 fc0f 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800253e:	48af      	ldr	r0, [pc, #700]	@ (80027fc <seclectmenu+0x1c14>)
 8002540:	f7fe f80a 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002544:	2200      	movs	r2, #0
 8002546:	2100      	movs	r1, #0
 8002548:	48ac      	ldr	r0, [pc, #688]	@ (80027fc <seclectmenu+0x1c14>)
 800254a:	f7fd ff93 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 1 ");
 800254e:	49ae      	ldr	r1, [pc, #696]	@ (8002808 <seclectmenu+0x1c20>)
 8002550:	48aa      	ldr	r0, [pc, #680]	@ (80027fc <seclectmenu+0x1c14>)
 8002552:	f7fd ffea 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002556:	2201      	movs	r2, #1
 8002558:	2100      	movs	r1, #0
 800255a:	48a8      	ldr	r0, [pc, #672]	@ (80027fc <seclectmenu+0x1c14>)
 800255c:	f7fd ff8a 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 2 ");
 8002560:	49aa      	ldr	r1, [pc, #680]	@ (800280c <seclectmenu+0x1c24>)
 8002562:	48a6      	ldr	r0, [pc, #664]	@ (80027fc <seclectmenu+0x1c14>)
 8002564:	f7fd ffe1 	bl	800052a <CLCD_WriteString>
																break;
 8002568:	e12e      	b.n	80027c8 <seclectmenu+0x1be0>
															case 2:
																if (CheckKey(keyadd2) == 0)
 800256a:	797b      	ldrb	r3, [r7, #5]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fd67 	bl	8003040 <CheckKey>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d125      	bne.n	80025c4 <seclectmenu+0x19dc>
																{
																	CLCD_Clear(&LCD1);
 8002578:	48a0      	ldr	r0, [pc, #640]	@ (80027fc <seclectmenu+0x1c14>)
 800257a:	f7fd ffed 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	489e      	ldr	r0, [pc, #632]	@ (80027fc <seclectmenu+0x1c14>)
 8002584:	f7fd ff76 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO GUEST CARD 2 ");
 8002588:	49a1      	ldr	r1, [pc, #644]	@ (8002810 <seclectmenu+0x1c28>)
 800258a:	489c      	ldr	r0, [pc, #624]	@ (80027fc <seclectmenu+0x1c14>)
 800258c:	f7fd ffcd 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8002590:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002594:	f001 fbe2 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002598:	4898      	ldr	r0, [pc, #608]	@ (80027fc <seclectmenu+0x1c14>)
 800259a:	f7fd ffdd 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	4896      	ldr	r0, [pc, #600]	@ (80027fc <seclectmenu+0x1c14>)
 80025a4:	f7fd ff66 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 80025a8:	499a      	ldr	r1, [pc, #616]	@ (8002814 <seclectmenu+0x1c2c>)
 80025aa:	4894      	ldr	r0, [pc, #592]	@ (80027fc <seclectmenu+0x1c14>)
 80025ac:	f7fd ffbd 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2100      	movs	r1, #0
 80025b4:	4891      	ldr	r0, [pc, #580]	@ (80027fc <seclectmenu+0x1c14>)
 80025b6:	f7fd ff5d 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 80025ba:	4997      	ldr	r1, [pc, #604]	@ (8002818 <seclectmenu+0x1c30>)
 80025bc:	488f      	ldr	r0, [pc, #572]	@ (80027fc <seclectmenu+0x1c14>)
 80025be:	f7fd ffb4 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 0);
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
																	CLCD_SetCursor(&LCD1, 0, 1);
																	CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
																}
																break;
 80025c2:	e101      	b.n	80027c8 <seclectmenu+0x1be0>
																	removeuid(CheckKey(keyadd2));
 80025c4:	797b      	ldrb	r3, [r7, #5]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fd3a 	bl	8003040 <CheckKey>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd64 	bl	800309c <removeuid>
																	CLCD_Clear(&LCD1);
 80025d4:	4889      	ldr	r0, [pc, #548]	@ (80027fc <seclectmenu+0x1c14>)
 80025d6:	f7fd ffbf 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	4887      	ldr	r0, [pc, #540]	@ (80027fc <seclectmenu+0x1c14>)
 80025e0:	f7fd ff48 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 2 DELETION ");
 80025e4:	498d      	ldr	r1, [pc, #564]	@ (800281c <seclectmenu+0x1c34>)
 80025e6:	4885      	ldr	r0, [pc, #532]	@ (80027fc <seclectmenu+0x1c14>)
 80025e8:	f7fd ff9f 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2100      	movs	r1, #0
 80025f0:	4882      	ldr	r0, [pc, #520]	@ (80027fc <seclectmenu+0x1c14>)
 80025f2:	f7fd ff3f 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 80025f6:	4983      	ldr	r1, [pc, #524]	@ (8002804 <seclectmenu+0x1c1c>)
 80025f8:	4880      	ldr	r0, [pc, #512]	@ (80027fc <seclectmenu+0x1c14>)
 80025fa:	f7fd ff96 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 80025fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002602:	f001 fbab 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002606:	487d      	ldr	r0, [pc, #500]	@ (80027fc <seclectmenu+0x1c14>)
 8002608:	f7fd ffa6 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2100      	movs	r1, #0
 8002610:	487a      	ldr	r0, [pc, #488]	@ (80027fc <seclectmenu+0x1c14>)
 8002612:	f7fd ff2f 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 2 ");
 8002616:	497f      	ldr	r1, [pc, #508]	@ (8002814 <seclectmenu+0x1c2c>)
 8002618:	4878      	ldr	r0, [pc, #480]	@ (80027fc <seclectmenu+0x1c14>)
 800261a:	f7fd ff86 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800261e:	2201      	movs	r2, #1
 8002620:	2100      	movs	r1, #0
 8002622:	4876      	ldr	r0, [pc, #472]	@ (80027fc <seclectmenu+0x1c14>)
 8002624:	f7fd ff26 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 3 ");
 8002628:	497b      	ldr	r1, [pc, #492]	@ (8002818 <seclectmenu+0x1c30>)
 800262a:	4874      	ldr	r0, [pc, #464]	@ (80027fc <seclectmenu+0x1c14>)
 800262c:	f7fd ff7d 	bl	800052a <CLCD_WriteString>
																break;
 8002630:	e0ca      	b.n	80027c8 <seclectmenu+0x1be0>
															case 3:
																if (CheckKey(keyadd2) == 0)
 8002632:	797b      	ldrb	r3, [r7, #5]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fd03 	bl	8003040 <CheckKey>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d125      	bne.n	800268c <seclectmenu+0x1aa4>
																{
																	CLCD_Clear(&LCD1);
 8002640:	486e      	ldr	r0, [pc, #440]	@ (80027fc <seclectmenu+0x1c14>)
 8002642:	f7fd ff89 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	486c      	ldr	r0, [pc, #432]	@ (80027fc <seclectmenu+0x1c14>)
 800264c:	f7fd ff12 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO GUEST CARD 3 ");
 8002650:	4973      	ldr	r1, [pc, #460]	@ (8002820 <seclectmenu+0x1c38>)
 8002652:	486a      	ldr	r0, [pc, #424]	@ (80027fc <seclectmenu+0x1c14>)
 8002654:	f7fd ff69 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8002658:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800265c:	f001 fb7e 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002660:	4866      	ldr	r0, [pc, #408]	@ (80027fc <seclectmenu+0x1c14>)
 8002662:	f7fd ff79 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	4864      	ldr	r0, [pc, #400]	@ (80027fc <seclectmenu+0x1c14>)
 800266c:	f7fd ff02 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 8002670:	496c      	ldr	r1, [pc, #432]	@ (8002824 <seclectmenu+0x1c3c>)
 8002672:	4862      	ldr	r0, [pc, #392]	@ (80027fc <seclectmenu+0x1c14>)
 8002674:	f7fd ff59 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002678:	2201      	movs	r2, #1
 800267a:	2100      	movs	r1, #0
 800267c:	485f      	ldr	r0, [pc, #380]	@ (80027fc <seclectmenu+0x1c14>)
 800267e:	f7fd fef9 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 8002682:	4969      	ldr	r1, [pc, #420]	@ (8002828 <seclectmenu+0x1c40>)
 8002684:	485d      	ldr	r0, [pc, #372]	@ (80027fc <seclectmenu+0x1c14>)
 8002686:	f7fd ff50 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 0);
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
																	CLCD_SetCursor(&LCD1, 0, 1);
																	CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
																}
																break;
 800268a:	e09d      	b.n	80027c8 <seclectmenu+0x1be0>
																	removeuid(CheckKey(keyadd2));
 800268c:	797b      	ldrb	r3, [r7, #5]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fcd6 	bl	8003040 <CheckKey>
 8002694:	4603      	mov	r3, r0
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fd00 	bl	800309c <removeuid>
																	CLCD_Clear(&LCD1);
 800269c:	4857      	ldr	r0, [pc, #348]	@ (80027fc <seclectmenu+0x1c14>)
 800269e:	f7fd ff5b 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	4855      	ldr	r0, [pc, #340]	@ (80027fc <seclectmenu+0x1c14>)
 80026a8:	f7fd fee4 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 3 DELETION ");
 80026ac:	495f      	ldr	r1, [pc, #380]	@ (800282c <seclectmenu+0x1c44>)
 80026ae:	4853      	ldr	r0, [pc, #332]	@ (80027fc <seclectmenu+0x1c14>)
 80026b0:	f7fd ff3b 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80026b4:	2201      	movs	r2, #1
 80026b6:	2100      	movs	r1, #0
 80026b8:	4850      	ldr	r0, [pc, #320]	@ (80027fc <seclectmenu+0x1c14>)
 80026ba:	f7fd fedb 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 80026be:	4951      	ldr	r1, [pc, #324]	@ (8002804 <seclectmenu+0x1c1c>)
 80026c0:	484e      	ldr	r0, [pc, #312]	@ (80027fc <seclectmenu+0x1c14>)
 80026c2:	f7fd ff32 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 80026c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026ca:	f001 fb47 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80026ce:	484b      	ldr	r0, [pc, #300]	@ (80027fc <seclectmenu+0x1c14>)
 80026d0:	f7fd ff42 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	4848      	ldr	r0, [pc, #288]	@ (80027fc <seclectmenu+0x1c14>)
 80026da:	f7fd fecb 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 3 ");
 80026de:	4951      	ldr	r1, [pc, #324]	@ (8002824 <seclectmenu+0x1c3c>)
 80026e0:	4846      	ldr	r0, [pc, #280]	@ (80027fc <seclectmenu+0x1c14>)
 80026e2:	f7fd ff22 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80026e6:	2201      	movs	r2, #1
 80026e8:	2100      	movs	r1, #0
 80026ea:	4844      	ldr	r0, [pc, #272]	@ (80027fc <seclectmenu+0x1c14>)
 80026ec:	f7fd fec2 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    GUEST CARD 4 ");
 80026f0:	494d      	ldr	r1, [pc, #308]	@ (8002828 <seclectmenu+0x1c40>)
 80026f2:	4842      	ldr	r0, [pc, #264]	@ (80027fc <seclectmenu+0x1c14>)
 80026f4:	f7fd ff19 	bl	800052a <CLCD_WriteString>
																break;
 80026f8:	e066      	b.n	80027c8 <seclectmenu+0x1be0>
															case 4:
																if (CheckKey(keyadd2) == 0)
 80026fa:	797b      	ldrb	r3, [r7, #5]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fc9f 	bl	8003040 <CheckKey>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d125      	bne.n	8002754 <seclectmenu+0x1b6c>
																{
																	CLCD_Clear(&LCD1);
 8002708:	483c      	ldr	r0, [pc, #240]	@ (80027fc <seclectmenu+0x1c14>)
 800270a:	f7fd ff25 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800270e:	2200      	movs	r2, #0
 8002710:	2100      	movs	r1, #0
 8002712:	483a      	ldr	r0, [pc, #232]	@ (80027fc <seclectmenu+0x1c14>)
 8002714:	f7fd feae 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "NO GUEST CARD 4 ");
 8002718:	4945      	ldr	r1, [pc, #276]	@ (8002830 <seclectmenu+0x1c48>)
 800271a:	4838      	ldr	r0, [pc, #224]	@ (80027fc <seclectmenu+0x1c14>)
 800271c:	f7fd ff05 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 8002720:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002724:	f001 fb1a 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002728:	4834      	ldr	r0, [pc, #208]	@ (80027fc <seclectmenu+0x1c14>)
 800272a:	f7fd ff15 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	4832      	ldr	r0, [pc, #200]	@ (80027fc <seclectmenu+0x1c14>)
 8002734:	f7fd fe9e 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 8002738:	493e      	ldr	r1, [pc, #248]	@ (8002834 <seclectmenu+0x1c4c>)
 800273a:	4830      	ldr	r0, [pc, #192]	@ (80027fc <seclectmenu+0x1c14>)
 800273c:	f7fd fef5 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002740:	2201      	movs	r2, #1
 8002742:	2100      	movs	r1, #0
 8002744:	482d      	ldr	r0, [pc, #180]	@ (80027fc <seclectmenu+0x1c14>)
 8002746:	f7fd fe95 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 800274a:	493b      	ldr	r1, [pc, #236]	@ (8002838 <seclectmenu+0x1c50>)
 800274c:	482b      	ldr	r0, [pc, #172]	@ (80027fc <seclectmenu+0x1c14>)
 800274e:	f7fd feec 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 0);
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
																	CLCD_SetCursor(&LCD1, 0, 1);
																	CLCD_WriteString(&LCD1, "    BACK ");
																}
																break;
 8002752:	e039      	b.n	80027c8 <seclectmenu+0x1be0>
																	removeuid(CheckKey(keyadd2));
 8002754:	797b      	ldrb	r3, [r7, #5]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fc72 	bl	8003040 <CheckKey>
 800275c:	4603      	mov	r3, r0
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fc9c 	bl	800309c <removeuid>
																	CLCD_Clear(&LCD1);
 8002764:	4825      	ldr	r0, [pc, #148]	@ (80027fc <seclectmenu+0x1c14>)
 8002766:	f7fd fef7 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	4823      	ldr	r0, [pc, #140]	@ (80027fc <seclectmenu+0x1c14>)
 8002770:	f7fd fe80 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "  CARD 4 DELETION ");
 8002774:	4931      	ldr	r1, [pc, #196]	@ (800283c <seclectmenu+0x1c54>)
 8002776:	4821      	ldr	r0, [pc, #132]	@ (80027fc <seclectmenu+0x1c14>)
 8002778:	f7fd fed7 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800277c:	2201      	movs	r2, #1
 800277e:	2100      	movs	r1, #0
 8002780:	481e      	ldr	r0, [pc, #120]	@ (80027fc <seclectmenu+0x1c14>)
 8002782:	f7fd fe77 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 8002786:	491f      	ldr	r1, [pc, #124]	@ (8002804 <seclectmenu+0x1c1c>)
 8002788:	481c      	ldr	r0, [pc, #112]	@ (80027fc <seclectmenu+0x1c14>)
 800278a:	f7fd fece 	bl	800052a <CLCD_WriteString>
																	HAL_Delay(1000);
 800278e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002792:	f001 fae3 	bl	8003d5c <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002796:	4819      	ldr	r0, [pc, #100]	@ (80027fc <seclectmenu+0x1c14>)
 8002798:	f7fd fede 	bl	8000558 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	4816      	ldr	r0, [pc, #88]	@ (80027fc <seclectmenu+0x1c14>)
 80027a2:	f7fd fe67 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  GUEST CARD 4 ");
 80027a6:	4923      	ldr	r1, [pc, #140]	@ (8002834 <seclectmenu+0x1c4c>)
 80027a8:	4814      	ldr	r0, [pc, #80]	@ (80027fc <seclectmenu+0x1c14>)
 80027aa:	f7fd febe 	bl	800052a <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80027ae:	2201      	movs	r2, #1
 80027b0:	2100      	movs	r1, #0
 80027b2:	4812      	ldr	r0, [pc, #72]	@ (80027fc <seclectmenu+0x1c14>)
 80027b4:	f7fd fe5e 	bl	8000474 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 80027b8:	491f      	ldr	r1, [pc, #124]	@ (8002838 <seclectmenu+0x1c50>)
 80027ba:	4810      	ldr	r0, [pc, #64]	@ (80027fc <seclectmenu+0x1c14>)
 80027bc:	f7fd feb5 	bl	800052a <CLCD_WriteString>
																break;
 80027c0:	e002      	b.n	80027c8 <seclectmenu+0x1be0>
															default:
																back12 = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	71fb      	strb	r3, [r7, #7]
																break;
 80027c6:	bf00      	nop
													while (back12 == 1)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f43f ad81 	beq.w	80022d2 <seclectmenu+0x16ea>
															}
														}
													}
													CLCD_Clear(&LCD1);
 80027d0:	480a      	ldr	r0, [pc, #40]	@ (80027fc <seclectmenu+0x1c14>)
 80027d2:	f7fd fec1 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	4808      	ldr	r0, [pc, #32]	@ (80027fc <seclectmenu+0x1c14>)
 80027dc:	f7fd fe4a 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   ADMIN CARD");
 80027e0:	4917      	ldr	r1, [pc, #92]	@ (8002840 <seclectmenu+0x1c58>)
 80027e2:	4806      	ldr	r0, [pc, #24]	@ (80027fc <seclectmenu+0x1c14>)
 80027e4:	f7fd fea1 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80027e8:	2201      	movs	r2, #1
 80027ea:	2100      	movs	r1, #0
 80027ec:	4803      	ldr	r0, [pc, #12]	@ (80027fc <seclectmenu+0x1c14>)
 80027ee:	f7fd fe41 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> GUEST CARD");
 80027f2:	4914      	ldr	r1, [pc, #80]	@ (8002844 <seclectmenu+0x1c5c>)
 80027f4:	4801      	ldr	r0, [pc, #4]	@ (80027fc <seclectmenu+0x1c14>)
 80027f6:	f7fd fe98 	bl	800052a <CLCD_WriteString>
													break;
 80027fa:	e028      	b.n	800284e <seclectmenu+0x1c66>
 80027fc:	200001ec 	.word	0x200001ec
 8002800:	08006cc8 	.word	0x08006cc8
 8002804:	08006cdc 	.word	0x08006cdc
 8002808:	08006b6c 	.word	0x08006b6c
 800280c:	08006b80 	.word	0x08006b80
 8002810:	08006d78 	.word	0x08006d78
 8002814:	08006b94 	.word	0x08006b94
 8002818:	08006ba8 	.word	0x08006ba8
 800281c:	08006d00 	.word	0x08006d00
 8002820:	08006d8c 	.word	0x08006d8c
 8002824:	08006bbc 	.word	0x08006bbc
 8002828:	08006bd0 	.word	0x08006bd0
 800282c:	08006d28 	.word	0x08006d28
 8002830:	08006da0 	.word	0x08006da0
 8002834:	08006be4 	.word	0x08006be4
 8002838:	08006b34 	.word	0x08006b34
 800283c:	08006d50 	.word	0x08006d50
 8002840:	0800699c 	.word	0x0800699c
 8002844:	08006a90 	.word	0x08006a90
												default:
													backrm10 = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	72fb      	strb	r3, [r7, #11]
													break;
 800284c:	bf00      	nop
										while (backrm10 == 1)
 800284e:	7afb      	ldrb	r3, [r7, #11]
 8002850:	2b01      	cmp	r3, #1
 8002852:	f43f a9a8 	beq.w	8001ba6 <seclectmenu+0xfbe>
												}
											}
										}
										CLCD_Clear(&LCD1);
 8002856:	489b      	ldr	r0, [pc, #620]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002858:	f7fd fe7e 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	4898      	ldr	r0, [pc, #608]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002862:	f7fd fe07 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> SELECT CARD");
 8002866:	4998      	ldr	r1, [pc, #608]	@ (8002ac8 <seclectmenu+0x1ee0>)
 8002868:	4896      	ldr	r0, [pc, #600]	@ (8002ac4 <seclectmenu+0x1edc>)
 800286a:	f7fd fe5e 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800286e:	2201      	movs	r2, #1
 8002870:	2100      	movs	r1, #0
 8002872:	4894      	ldr	r0, [pc, #592]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002874:	f7fd fdfe 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SCAN CARD");
 8002878:	4994      	ldr	r1, [pc, #592]	@ (8002acc <seclectmenu+0x1ee4>)
 800287a:	4892      	ldr	r0, [pc, #584]	@ (8002ac4 <seclectmenu+0x1edc>)
 800287c:	f7fd fe55 	bl	800052a <CLCD_WriteString>
										break;
 8002880:	e0b6      	b.n	80029f0 <seclectmenu+0x1e08>
									case 1:
										CLCD_Clear(&LCD1);
 8002882:	4890      	ldr	r0, [pc, #576]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002884:	f7fd fe68 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	488d      	ldr	r0, [pc, #564]	@ (8002ac4 <seclectmenu+0x1edc>)
 800288e:	f7fd fdf1 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "SCAN CARD");
 8002892:	498f      	ldr	r1, [pc, #572]	@ (8002ad0 <seclectmenu+0x1ee8>)
 8002894:	488b      	ldr	r0, [pc, #556]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002896:	f7fd fe48 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800289a:	2201      	movs	r2, #1
 800289c:	2100      	movs	r1, #0
 800289e:	4889      	ldr	r0, [pc, #548]	@ (8002ac4 <seclectmenu+0x1edc>)
 80028a0:	f7fd fde8 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 80028a4:	498b      	ldr	r1, [pc, #556]	@ (8002ad4 <seclectmenu+0x1eec>)
 80028a6:	4887      	ldr	r0, [pc, #540]	@ (8002ac4 <seclectmenu+0x1edc>)
 80028a8:	f7fd fe3f 	bl	800052a <CLCD_WriteString>
										uint8_t rmquet = 1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 80028b0:	e081      	b.n	80029b6 <seclectmenu+0x1dce>
										{
											if (TM_MFRC522_Check(CardID) == MI_OK)
 80028b2:	4889      	ldr	r0, [pc, #548]	@ (8002ad8 <seclectmenu+0x1ef0>)
 80028b4:	f000 fe02 	bl	80034bc <TM_MFRC522_Check>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d171      	bne.n	80029a2 <seclectmenu+0x1dba>
											{
												if (CheckListUID(CardID) != 0)
 80028be:	4886      	ldr	r0, [pc, #536]	@ (8002ad8 <seclectmenu+0x1ef0>)
 80028c0:	f000 f952 	bl	8002b68 <CheckListUID>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d046      	beq.n	8002958 <seclectmenu+0x1d70>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 80028ca:	4883      	ldr	r0, [pc, #524]	@ (8002ad8 <seclectmenu+0x1ef0>)
 80028cc:	f000 f94c 	bl	8002b68 <CheckListUID>
 80028d0:	4603      	mov	r3, r0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fbb4 	bl	8003040 <CheckKey>
 80028d8:	4603      	mov	r3, r0
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fbde 	bl	800309c <removeuid>
													CLCD_Clear(&LCD1);
 80028e0:	4878      	ldr	r0, [pc, #480]	@ (8002ac4 <seclectmenu+0x1edc>)
 80028e2:	f7fd fe39 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	4876      	ldr	r0, [pc, #472]	@ (8002ac4 <seclectmenu+0x1edc>)
 80028ec:	f7fd fdc2 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "  CARD DELETION ");
 80028f0:	497a      	ldr	r1, [pc, #488]	@ (8002adc <seclectmenu+0x1ef4>)
 80028f2:	4874      	ldr	r0, [pc, #464]	@ (8002ac4 <seclectmenu+0x1edc>)
 80028f4:	f7fd fe19 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80028f8:	2201      	movs	r2, #1
 80028fa:	2100      	movs	r1, #0
 80028fc:	4871      	ldr	r0, [pc, #452]	@ (8002ac4 <seclectmenu+0x1edc>)
 80028fe:	f7fd fdb9 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   SUCCESSFUL  ");
 8002902:	4977      	ldr	r1, [pc, #476]	@ (8002ae0 <seclectmenu+0x1ef8>)
 8002904:	486f      	ldr	r0, [pc, #444]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002906:	f7fd fe10 	bl	800052a <CLCD_WriteString>
													HAL_Delay(1000);
 800290a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800290e:	f001 fa25 	bl	8003d5c <HAL_Delay>
													if (checkcountUID() == 0)
 8002912:	f000 f959 	bl	8002bc8 <checkcountUID>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <seclectmenu+0x1d44>
													{
														startadd();
 800291c:	f000 fbcc 	bl	80030b8 <startadd>
														rmquet = 1;
 8002920:	2301      	movs	r3, #1
 8002922:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8002924:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae4 <seclectmenu+0x1efc>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
														return;
 800292a:	e0c8      	b.n	8002abe <seclectmenu+0x1ed6>
													}else{
														CLCD_Clear(&LCD1);
 800292c:	4865      	ldr	r0, [pc, #404]	@ (8002ac4 <seclectmenu+0x1edc>)
 800292e:	f7fd fe13 	bl	8000558 <CLCD_Clear>
														CLCD_SetCursor(&LCD1, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	4863      	ldr	r0, [pc, #396]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002938:	f7fd fd9c 	bl	8000474 <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "SCAN CARD");
 800293c:	4964      	ldr	r1, [pc, #400]	@ (8002ad0 <seclectmenu+0x1ee8>)
 800293e:	4861      	ldr	r0, [pc, #388]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002940:	f7fd fdf3 	bl	800052a <CLCD_WriteString>
														CLCD_SetCursor(&LCD1, 0, 1);
 8002944:	2201      	movs	r2, #1
 8002946:	2100      	movs	r1, #0
 8002948:	485e      	ldr	r0, [pc, #376]	@ (8002ac4 <seclectmenu+0x1edc>)
 800294a:	f7fd fd93 	bl	8000474 <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "=>  BACK");
 800294e:	4961      	ldr	r1, [pc, #388]	@ (8002ad4 <seclectmenu+0x1eec>)
 8002950:	485c      	ldr	r0, [pc, #368]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002952:	f7fd fdea 	bl	800052a <CLCD_WriteString>
 8002956:	e024      	b.n	80029a2 <seclectmenu+0x1dba>
													}

												}
												else
												{
													CLCD_Clear(&LCD1);
 8002958:	485a      	ldr	r0, [pc, #360]	@ (8002ac4 <seclectmenu+0x1edc>)
 800295a:	f7fd fdfd 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	4858      	ldr	r0, [pc, #352]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002964:	f7fd fd86 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "CARD UNAVAILABLE");
 8002968:	495f      	ldr	r1, [pc, #380]	@ (8002ae8 <seclectmenu+0x1f00>)
 800296a:	4856      	ldr	r0, [pc, #344]	@ (8002ac4 <seclectmenu+0x1edc>)
 800296c:	f7fd fddd 	bl	800052a <CLCD_WriteString>
													HAL_Delay(1000);
 8002970:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002974:	f001 f9f2 	bl	8003d5c <HAL_Delay>
													CLCD_Clear(&LCD1);
 8002978:	4852      	ldr	r0, [pc, #328]	@ (8002ac4 <seclectmenu+0x1edc>)
 800297a:	f7fd fded 	bl	8000558 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	4850      	ldr	r0, [pc, #320]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002984:	f7fd fd76 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "SCAN CARD");
 8002988:	4951      	ldr	r1, [pc, #324]	@ (8002ad0 <seclectmenu+0x1ee8>)
 800298a:	484e      	ldr	r0, [pc, #312]	@ (8002ac4 <seclectmenu+0x1edc>)
 800298c:	f7fd fdcd 	bl	800052a <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8002990:	2201      	movs	r2, #1
 8002992:	2100      	movs	r1, #0
 8002994:	484b      	ldr	r0, [pc, #300]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002996:	f7fd fd6d 	bl	8000474 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  BACK");
 800299a:	494e      	ldr	r1, [pc, #312]	@ (8002ad4 <seclectmenu+0x1eec>)
 800299c:	4849      	ldr	r0, [pc, #292]	@ (8002ac4 <seclectmenu+0x1edc>)
 800299e:	f7fd fdc4 	bl	800052a <CLCD_WriteString>
												}
											}
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 80029a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029a6:	4851      	ldr	r0, [pc, #324]	@ (8002aec <seclectmenu+0x1f04>)
 80029a8:	f7fe f8d0 	bl	8000b4c <checkbuton>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <seclectmenu+0x1dce>
											{
												rmquet = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 80029b6:	79bb      	ldrb	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f af7a 	bne.w	80028b2 <seclectmenu+0x1cca>
											}
										}
										CLCD_Clear(&LCD1);
 80029be:	4841      	ldr	r0, [pc, #260]	@ (8002ac4 <seclectmenu+0x1edc>)
 80029c0:	f7fd fdca 	bl	8000558 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2100      	movs	r1, #0
 80029c8:	483e      	ldr	r0, [pc, #248]	@ (8002ac4 <seclectmenu+0x1edc>)
 80029ca:	f7fd fd53 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   SELECT CARD");
 80029ce:	4948      	ldr	r1, [pc, #288]	@ (8002af0 <seclectmenu+0x1f08>)
 80029d0:	483c      	ldr	r0, [pc, #240]	@ (8002ac4 <seclectmenu+0x1edc>)
 80029d2:	f7fd fdaa 	bl	800052a <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80029d6:	2201      	movs	r2, #1
 80029d8:	2100      	movs	r1, #0
 80029da:	483a      	ldr	r0, [pc, #232]	@ (8002ac4 <seclectmenu+0x1edc>)
 80029dc:	f7fd fd4a 	bl	8000474 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> SCAN CARD");
 80029e0:	4944      	ldr	r1, [pc, #272]	@ (8002af4 <seclectmenu+0x1f0c>)
 80029e2:	4838      	ldr	r0, [pc, #224]	@ (8002ac4 <seclectmenu+0x1edc>)
 80029e4:	f7fd fda1 	bl	800052a <CLCD_WriteString>
										break;
 80029e8:	e002      	b.n	80029f0 <seclectmenu+0x1e08>
									default:
										backrm1 = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	737b      	strb	r3, [r7, #13]
										break;
 80029ee:	bf00      	nop
							while (backrm1 == 1)
 80029f0:	7b7b      	ldrb	r3, [r7, #13]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f43f a81b 	beq.w	8001a2e <seclectmenu+0xe46>
									}
								}
							}
							CLCD_Clear(&LCD1);
 80029f8:	4832      	ldr	r0, [pc, #200]	@ (8002ac4 <seclectmenu+0x1edc>)
 80029fa:	f7fd fdad 	bl	8000558 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	4830      	ldr	r0, [pc, #192]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a04:	f7fd fd36 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> REMOVE CARD");
 8002a08:	493b      	ldr	r1, [pc, #236]	@ (8002af8 <seclectmenu+0x1f10>)
 8002a0a:	482e      	ldr	r0, [pc, #184]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a0c:	f7fd fd8d 	bl	800052a <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8002a10:	2201      	movs	r2, #1
 8002a12:	2100      	movs	r1, #0
 8002a14:	482b      	ldr	r0, [pc, #172]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a16:	f7fd fd2d 	bl	8000474 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   REMOVE ALL");
 8002a1a:	4938      	ldr	r1, [pc, #224]	@ (8002afc <seclectmenu+0x1f14>)
 8002a1c:	4829      	ldr	r0, [pc, #164]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a1e:	f7fd fd84 	bl	800052a <CLCD_WriteString>
							break;
 8002a22:	e00a      	b.n	8002a3a <seclectmenu+0x1e52>
						case 1:
							resetflash();
 8002a24:	f000 fcdc 	bl	80033e0 <resetflash>
							startadd();
 8002a28:	f000 fb46 	bl	80030b8 <startadd>
							exitmenu = 0;
 8002a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae4 <seclectmenu+0x1efc>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
							break;
 8002a32:	e002      	b.n	8002a3a <seclectmenu+0x1e52>
						default:
							backrm = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]
							break;
 8002a38:	bf00      	nop
				while (backrm == 1)
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	f43e af5d 	beq.w	80018fc <seclectmenu+0xd14>
						}
					}
				}
				CLCD_Clear(&LCD1);
 8002a42:	4820      	ldr	r0, [pc, #128]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a44:	f7fd fd88 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	481d      	ldr	r0, [pc, #116]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a4e:	f7fd fd11 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    ADD CARD");
 8002a52:	492b      	ldr	r1, [pc, #172]	@ (8002b00 <seclectmenu+0x1f18>)
 8002a54:	481b      	ldr	r0, [pc, #108]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a56:	f7fd fd68 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4819      	ldr	r0, [pc, #100]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a60:	f7fd fd08 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  REMOVE CARD");
 8002a64:	4927      	ldr	r1, [pc, #156]	@ (8002b04 <seclectmenu+0x1f1c>)
 8002a66:	4817      	ldr	r0, [pc, #92]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a68:	f7fd fd5f 	bl	800052a <CLCD_WriteString>
				break;
 8002a6c:	e01b      	b.n	8002aa6 <seclectmenu+0x1ebe>
			case 2:
				checkthe();
 8002a6e:	f000 f9f7 	bl	8002e60 <checkthe>
				CLCD_Clear(&LCD1);
 8002a72:	4814      	ldr	r0, [pc, #80]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a74:	f7fd fd70 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4811      	ldr	r0, [pc, #68]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a7e:	f7fd fcf9 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    REMOVE CARD");
 8002a82:	4921      	ldr	r1, [pc, #132]	@ (8002b08 <seclectmenu+0x1f20>)
 8002a84:	480f      	ldr	r0, [pc, #60]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a86:	f7fd fd50 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	480d      	ldr	r0, [pc, #52]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a90:	f7fd fcf0 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  CHECK CARD");
 8002a94:	491d      	ldr	r1, [pc, #116]	@ (8002b0c <seclectmenu+0x1f24>)
 8002a96:	480b      	ldr	r0, [pc, #44]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002a98:	f7fd fd47 	bl	800052a <CLCD_WriteString>
				break;
 8002a9c:	e003      	b.n	8002aa6 <seclectmenu+0x1ebe>
				break;
			default:
				exitmenu = 0;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <seclectmenu+0x1efc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
				break;
 8002aa4:	bf00      	nop
	while (exitmenu )
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <seclectmenu+0x1efc>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f47e a8bb 	bne.w	8000c26 <seclectmenu+0x3e>
			}
		}
	}
	CLCD_Clear(&LCD1);
 8002ab0:	4804      	ldr	r0, [pc, #16]	@ (8002ac4 <seclectmenu+0x1edc>)
 8002ab2:	f7fd fd51 	bl	8000558 <CLCD_Clear>
	HAL_Delay(1000);
 8002ab6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aba:	f001 f94f 	bl	8003d5c <HAL_Delay>
}
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200001ec 	.word	0x200001ec
 8002ac8:	08006c74 	.word	0x08006c74
 8002acc:	08006c84 	.word	0x08006c84
 8002ad0:	08006db4 	.word	0x08006db4
 8002ad4:	08006a58 	.word	0x08006a58
 8002ad8:	200001dc 	.word	0x200001dc
 8002adc:	08006dc0 	.word	0x08006dc0
 8002ae0:	08006cdc 	.word	0x08006cdc
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	08006dd4 	.word	0x08006dd4
 8002aec:	40010800 	.word	0x40010800
 8002af0:	08006c94 	.word	0x08006c94
 8002af4:	08006ca4 	.word	0x08006ca4
 8002af8:	08006c34 	.word	0x08006c34
 8002afc:	08006c44 	.word	0x08006c44
 8002b00:	08006a18 	.word	0x08006a18
 8002b04:	08006a28 	.word	0x08006a28
 8002b08:	08006a08 	.word	0x08006a08
 8002b0c:	08006a38 	.word	0x08006a38

08002b10 <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	2208      	movs	r2, #8
 8002b20:	4619      	mov	r1, r3
 8002b22:	6838      	ldr	r0, [r7, #0]
 8002b24:	f7fd fb8e 	bl	8000244 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002b28:	7cbb      	ldrb	r3, [r7, #18]
 8002b2a:	2bff      	cmp	r3, #255	@ 0xff
 8002b2c:	d001      	beq.n	8002b32 <CheckUID+0x22>
		return 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e016      	b.n	8002b60 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
 8002b36:	e00f      	b.n	8002b58 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	3318      	adds	r3, #24
 8002b44:	443b      	add	r3, r7
 8002b46:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <CheckUID+0x42>
			return 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e006      	b.n	8002b60 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	3301      	adds	r3, #1
 8002b56:	75fb      	strb	r3, [r7, #23]
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d9ec      	bls.n	8002b38 <CheckUID+0x28>
	}
	return 1;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002b70:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <CheckListUID+0x5c>)
 8002b72:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002b74:	e018      	b.n	8002ba8 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3306      	adds	r3, #6
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fb49 	bl	8000212 <Flash_Read_2Byte>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d10a      	bne.n	8002ba2 <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002b8c:	68f9      	ldr	r1, [r7, #12]
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ffbe 	bl	8002b10 <CheckUID>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d103      	bne.n	8002ba2 <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3305      	adds	r3, #5
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	e00b      	b.n	8002bba <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3305      	adds	r3, #5
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd fb24 	bl	80001fa <Flash_Read_Byte>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2bff      	cmp	r3, #255	@ 0xff
 8002bb6:	d1de      	bne.n	8002b76 <CheckListUID+0xe>
	}
	return 0;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	0800a000 	.word	0x0800a000

08002bc8 <checkcountUID>:

uint8_t checkcountUID(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002bce:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <checkcountUID+0x60>)
 8002bd0:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002bd6:	e01a      	b.n	8002c0e <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3306      	adds	r3, #6
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fb18 	bl	8000212 <Flash_Read_2Byte>
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10c      	bne.n	8002c08 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3305      	adds	r3, #5
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fb01 	bl	80001fa <Flash_Read_Byte>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <checkcountUID+0x40>
			{
				count++;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	3301      	adds	r3, #1
 8002c06:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3305      	adds	r3, #5
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd faf1 	bl	80001fa <Flash_Read_Byte>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2bff      	cmp	r3, #255	@ 0xff
 8002c1c:	d1dc      	bne.n	8002bd8 <checkcountUID+0x10>
	}
	return count;
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	0800a000 	.word	0x0800a000

08002c2c <adduid>:

void adduid(uint8_t key)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002c36:	f000 fac7 	bl	80031c8 <setaddress>
	CLCD_Clear(&LCD1);
 8002c3a:	483e      	ldr	r0, [pc, #248]	@ (8002d34 <adduid+0x108>)
 8002c3c:	f7fd fc8c 	bl	8000558 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	483b      	ldr	r0, [pc, #236]	@ (8002d34 <adduid+0x108>)
 8002c46:	f7fd fc15 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "SCAN CARD");
 8002c4a:	493b      	ldr	r1, [pc, #236]	@ (8002d38 <adduid+0x10c>)
 8002c4c:	4839      	ldr	r0, [pc, #228]	@ (8002d34 <adduid+0x108>)
 8002c4e:	f7fd fc6c 	bl	800052a <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002c52:	2201      	movs	r2, #1
 8002c54:	2100      	movs	r1, #0
 8002c56:	4837      	ldr	r0, [pc, #220]	@ (8002d34 <adduid+0x108>)
 8002c58:	f7fd fc0c 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002c5c:	4937      	ldr	r1, [pc, #220]	@ (8002d3c <adduid+0x110>)
 8002c5e:	4835      	ldr	r0, [pc, #212]	@ (8002d34 <adduid+0x108>)
 8002c60:	f7fd fc63 	bl	800052a <CLCD_WriteString>
	while (exitmenu)
 8002c64:	e05d      	b.n	8002d22 <adduid+0xf6>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002c66:	4836      	ldr	r0, [pc, #216]	@ (8002d40 <adduid+0x114>)
 8002c68:	f000 fc28 	bl	80034bc <TM_MFRC522_Check>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d14f      	bne.n	8002d12 <adduid+0xe6>
		{
			HAL_Delay(delayloa);
 8002c72:	4b34      	ldr	r3, [pc, #208]	@ (8002d44 <adduid+0x118>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 f870 	bl	8003d5c <HAL_Delay>
			if (CheckListUID(CardID) == 0)
 8002c7c:	4830      	ldr	r0, [pc, #192]	@ (8002d40 <adduid+0x114>)
 8002c7e:	f7ff ff73 	bl	8002b68 <CheckListUID>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d11f      	bne.n	8002cc8 <adduid+0x9c>
			{
				CardID[5] = key;
 8002c88:	4a2d      	ldr	r2, [pc, #180]	@ (8002d40 <adduid+0x114>)
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <adduid+0x11c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2206      	movs	r2, #6
 8002c94:	492a      	ldr	r1, [pc, #168]	@ (8002d40 <adduid+0x114>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fa8c 	bl	80001b4 <Flash_Write_Array>
				AddressUID += 8;
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <adduid+0x11c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <adduid+0x11c>)
 8002ca4:	6013      	str	r3, [r2, #0]
				CLCD_Clear(&LCD1);
 8002ca6:	4823      	ldr	r0, [pc, #140]	@ (8002d34 <adduid+0x108>)
 8002ca8:	f7fd fc56 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4820      	ldr	r0, [pc, #128]	@ (8002d34 <adduid+0x108>)
 8002cb2:	f7fd fbdf 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "SUCCESSFUL");
 8002cb6:	4925      	ldr	r1, [pc, #148]	@ (8002d4c <adduid+0x120>)
 8002cb8:	481e      	ldr	r0, [pc, #120]	@ (8002d34 <adduid+0x108>)
 8002cba:	f7fd fc36 	bl	800052a <CLCD_WriteString>
				HAL_Delay(1000);
 8002cbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cc2:	f001 f84b 	bl	8003d5c <HAL_Delay>
				return;
 8002cc6:	e032      	b.n	8002d2e <adduid+0x102>
			}
			else
			{
				CLCD_Clear(&LCD1);
 8002cc8:	481a      	ldr	r0, [pc, #104]	@ (8002d34 <adduid+0x108>)
 8002cca:	f7fd fc45 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4818      	ldr	r0, [pc, #96]	@ (8002d34 <adduid+0x108>)
 8002cd4:	f7fd fbce 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "CARD AVAILABLE");
 8002cd8:	491d      	ldr	r1, [pc, #116]	@ (8002d50 <adduid+0x124>)
 8002cda:	4816      	ldr	r0, [pc, #88]	@ (8002d34 <adduid+0x108>)
 8002cdc:	f7fd fc25 	bl	800052a <CLCD_WriteString>
				HAL_Delay(1000);
 8002ce0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ce4:	f001 f83a 	bl	8003d5c <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002ce8:	4812      	ldr	r0, [pc, #72]	@ (8002d34 <adduid+0x108>)
 8002cea:	f7fd fc35 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4810      	ldr	r0, [pc, #64]	@ (8002d34 <adduid+0x108>)
 8002cf4:	f7fd fbbe 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "SCAN CARD");
 8002cf8:	490f      	ldr	r1, [pc, #60]	@ (8002d38 <adduid+0x10c>)
 8002cfa:	480e      	ldr	r0, [pc, #56]	@ (8002d34 <adduid+0x108>)
 8002cfc:	f7fd fc15 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002d00:	2201      	movs	r2, #1
 8002d02:	2100      	movs	r1, #0
 8002d04:	480b      	ldr	r0, [pc, #44]	@ (8002d34 <adduid+0x108>)
 8002d06:	f7fd fbb5 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002d0a:	490c      	ldr	r1, [pc, #48]	@ (8002d3c <adduid+0x110>)
 8002d0c:	4809      	ldr	r0, [pc, #36]	@ (8002d34 <adduid+0x108>)
 8002d0e:	f7fd fc0c 	bl	800052a <CLCD_WriteString>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002d12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d16:	480f      	ldr	r0, [pc, #60]	@ (8002d54 <adduid+0x128>)
 8002d18:	f7fd ff18 	bl	8000b4c <checkbuton>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d004      	beq.n	8002d2c <adduid+0x100>
	while (exitmenu)
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <adduid+0x12c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d19d      	bne.n	8002c66 <adduid+0x3a>
 8002d2a:	e000      	b.n	8002d2e <adduid+0x102>
		{
			return;
 8002d2c:	bf00      	nop
		}
	}
}
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200001ec 	.word	0x200001ec
 8002d38:	08006db4 	.word	0x08006db4
 8002d3c:	08006a58 	.word	0x08006a58
 8002d40:	200001dc 	.word	0x200001dc
 8002d44:	20000010 	.word	0x20000010
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	08006de8 	.word	0x08006de8
 8002d50:	08006df4 	.word	0x08006df4
 8002d54:	40010800 	.word	0x40010800
 8002d58:	20000000 	.word	0x20000000

08002d5c <checkuser>:
void checkuser(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
	uint8_t key = CheckListUID(CardID);
 8002d62:	4835      	ldr	r0, [pc, #212]	@ (8002e38 <checkuser+0xdc>)
 8002d64:	f7ff ff00 	bl	8002b68 <CheckListUID>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
	uint8_t key2 = key & 0x0f;
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	71bb      	strb	r3, [r7, #6]
	uint8_t key1 = key >> 4;
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	717b      	strb	r3, [r7, #5]
	if(key1==1)
 8002d7a:	797b      	ldrb	r3, [r7, #5]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d129      	bne.n	8002dd4 <checkuser+0x78>
	{
		switch(key2)
 8002d80:	79bb      	ldrb	r3, [r7, #6]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d016      	beq.n	8002db4 <checkuser+0x58>
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	dc1c      	bgt.n	8002dc4 <checkuser+0x68>
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d002      	beq.n	8002d94 <checkuser+0x38>
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d008      	beq.n	8002da4 <checkuser+0x48>
 8002d92:	e017      	b.n	8002dc4 <checkuser+0x68>
		{
		case 1:
			HAL_UART_Transmit(&huart1, admin1, sizeof(admin1)-1, HAL_MAX_DELAY);
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	2206      	movs	r2, #6
 8002d9a:	4928      	ldr	r1, [pc, #160]	@ (8002e3c <checkuser+0xe0>)
 8002d9c:	4828      	ldr	r0, [pc, #160]	@ (8002e40 <checkuser+0xe4>)
 8002d9e:	f003 fc52 	bl	8006646 <HAL_UART_Transmit>
			break;
 8002da2:	e017      	b.n	8002dd4 <checkuser+0x78>
		case 2:
			HAL_UART_Transmit(&huart1, admin2, sizeof(admin2)-1, HAL_MAX_DELAY);
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	2206      	movs	r2, #6
 8002daa:	4926      	ldr	r1, [pc, #152]	@ (8002e44 <checkuser+0xe8>)
 8002dac:	4824      	ldr	r0, [pc, #144]	@ (8002e40 <checkuser+0xe4>)
 8002dae:	f003 fc4a 	bl	8006646 <HAL_UART_Transmit>
			break;
 8002db2:	e00f      	b.n	8002dd4 <checkuser+0x78>
		case 3:
			HAL_UART_Transmit(&huart1, admin3, sizeof(admin3)-1, HAL_MAX_DELAY);
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	2206      	movs	r2, #6
 8002dba:	4923      	ldr	r1, [pc, #140]	@ (8002e48 <checkuser+0xec>)
 8002dbc:	4820      	ldr	r0, [pc, #128]	@ (8002e40 <checkuser+0xe4>)
 8002dbe:	f003 fc42 	bl	8006646 <HAL_UART_Transmit>
			break;
 8002dc2:	e007      	b.n	8002dd4 <checkuser+0x78>
		default:
			HAL_UART_Transmit(&huart1, admin4, sizeof(admin4)-1, HAL_MAX_DELAY);
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	2206      	movs	r2, #6
 8002dca:	4920      	ldr	r1, [pc, #128]	@ (8002e4c <checkuser+0xf0>)
 8002dcc:	481c      	ldr	r0, [pc, #112]	@ (8002e40 <checkuser+0xe4>)
 8002dce:	f003 fc3a 	bl	8006646 <HAL_UART_Transmit>
			break;
 8002dd2:	bf00      	nop
		}
	}
	if(key1!=1)
 8002dd4:	797b      	ldrb	r3, [r7, #5]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d029      	beq.n	8002e2e <checkuser+0xd2>
	{
		switch(key2)
 8002dda:	79bb      	ldrb	r3, [r7, #6]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d016      	beq.n	8002e0e <checkuser+0xb2>
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	dc1c      	bgt.n	8002e1e <checkuser+0xc2>
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d002      	beq.n	8002dee <checkuser+0x92>
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d008      	beq.n	8002dfe <checkuser+0xa2>
 8002dec:	e017      	b.n	8002e1e <checkuser+0xc2>
		{
		case 1:
			HAL_UART_Transmit(&huart1, guest1, sizeof(guest1)-1, HAL_MAX_DELAY);
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	2206      	movs	r2, #6
 8002df4:	4916      	ldr	r1, [pc, #88]	@ (8002e50 <checkuser+0xf4>)
 8002df6:	4812      	ldr	r0, [pc, #72]	@ (8002e40 <checkuser+0xe4>)
 8002df8:	f003 fc25 	bl	8006646 <HAL_UART_Transmit>
			break;
 8002dfc:	e017      	b.n	8002e2e <checkuser+0xd2>
		case 2:
			HAL_UART_Transmit(&huart1, guest2, sizeof(guest2)-1, HAL_MAX_DELAY);
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	2206      	movs	r2, #6
 8002e04:	4913      	ldr	r1, [pc, #76]	@ (8002e54 <checkuser+0xf8>)
 8002e06:	480e      	ldr	r0, [pc, #56]	@ (8002e40 <checkuser+0xe4>)
 8002e08:	f003 fc1d 	bl	8006646 <HAL_UART_Transmit>
			break;
 8002e0c:	e00f      	b.n	8002e2e <checkuser+0xd2>
		case 3:
			HAL_UART_Transmit(&huart1, guest3, sizeof(guest3)-1, HAL_MAX_DELAY);
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e12:	2206      	movs	r2, #6
 8002e14:	4910      	ldr	r1, [pc, #64]	@ (8002e58 <checkuser+0xfc>)
 8002e16:	480a      	ldr	r0, [pc, #40]	@ (8002e40 <checkuser+0xe4>)
 8002e18:	f003 fc15 	bl	8006646 <HAL_UART_Transmit>
			break;
 8002e1c:	e007      	b.n	8002e2e <checkuser+0xd2>
		default:
			HAL_UART_Transmit(&huart1, guest4, sizeof(guest4)-1, HAL_MAX_DELAY);
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	2206      	movs	r2, #6
 8002e24:	490d      	ldr	r1, [pc, #52]	@ (8002e5c <checkuser+0x100>)
 8002e26:	4806      	ldr	r0, [pc, #24]	@ (8002e40 <checkuser+0xe4>)
 8002e28:	f003 fc0d 	bl	8006646 <HAL_UART_Transmit>
			break;
 8002e2c:	bf00      	nop
		}
	}

}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200001dc 	.word	0x200001dc
 8002e3c:	20000038 	.word	0x20000038
 8002e40:	20000198 	.word	0x20000198
 8002e44:	20000040 	.word	0x20000040
 8002e48:	20000048 	.word	0x20000048
 8002e4c:	20000050 	.word	0x20000050
 8002e50:	20000058 	.word	0x20000058
 8002e54:	20000060 	.word	0x20000060
 8002e58:	20000068 	.word	0x20000068
 8002e5c:	20000070 	.word	0x20000070

08002e60 <checkthe>:
void checkthe(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002e66:	4b69      	ldr	r3, [pc, #420]	@ (800300c <checkthe+0x1ac>)
 8002e68:	221e      	movs	r2, #30
 8002e6a:	701a      	strb	r2, [r3, #0]
	CLCD_Clear(&LCD1);
 8002e6c:	4868      	ldr	r0, [pc, #416]	@ (8003010 <checkthe+0x1b0>)
 8002e6e:	f7fd fb73 	bl	8000558 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	4866      	ldr	r0, [pc, #408]	@ (8003010 <checkthe+0x1b0>)
 8002e78:	f7fd fafc 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "SCAN CARD");
 8002e7c:	4965      	ldr	r1, [pc, #404]	@ (8003014 <checkthe+0x1b4>)
 8002e7e:	4864      	ldr	r0, [pc, #400]	@ (8003010 <checkthe+0x1b0>)
 8002e80:	f7fd fb53 	bl	800052a <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	2100      	movs	r1, #0
 8002e88:	4861      	ldr	r0, [pc, #388]	@ (8003010 <checkthe+0x1b0>)
 8002e8a:	f7fd faf3 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002e8e:	4962      	ldr	r1, [pc, #392]	@ (8003018 <checkthe+0x1b8>)
 8002e90:	485f      	ldr	r0, [pc, #380]	@ (8003010 <checkthe+0x1b0>)
 8002e92:	f7fd fb4a 	bl	800052a <CLCD_WriteString>
	while (exitmenu )
 8002e96:	e0af      	b.n	8002ff8 <checkthe+0x198>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002e98:	4860      	ldr	r0, [pc, #384]	@ (800301c <checkthe+0x1bc>)
 8002e9a:	f000 fb0f 	bl	80034bc <TM_MFRC522_Check>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 80a1 	bne.w	8002fe8 <checkthe+0x188>
		{
			if (CheckListUID(CardID) == 0)
 8002ea6:	485d      	ldr	r0, [pc, #372]	@ (800301c <checkthe+0x1bc>)
 8002ea8:	f7ff fe5e 	bl	8002b68 <CheckListUID>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d129      	bne.n	8002f06 <checkthe+0xa6>
			{
				CLCD_Clear(&LCD1);
 8002eb2:	4857      	ldr	r0, [pc, #348]	@ (8003010 <checkthe+0x1b0>)
 8002eb4:	f7fd fb50 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4854      	ldr	r0, [pc, #336]	@ (8003010 <checkthe+0x1b0>)
 8002ebe:	f7fd fad9 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "CARD NOT ADDED");
 8002ec2:	4957      	ldr	r1, [pc, #348]	@ (8003020 <checkthe+0x1c0>)
 8002ec4:	4852      	ldr	r0, [pc, #328]	@ (8003010 <checkthe+0x1b0>)
 8002ec6:	f7fd fb30 	bl	800052a <CLCD_WriteString>
				HAL_Delay(1000);
 8002eca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ece:	f000 ff45 	bl	8003d5c <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002ed2:	484f      	ldr	r0, [pc, #316]	@ (8003010 <checkthe+0x1b0>)
 8002ed4:	f7fd fb40 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	484c      	ldr	r0, [pc, #304]	@ (8003010 <checkthe+0x1b0>)
 8002ede:	f7fd fac9 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "SCAN CARD");
 8002ee2:	494c      	ldr	r1, [pc, #304]	@ (8003014 <checkthe+0x1b4>)
 8002ee4:	484a      	ldr	r0, [pc, #296]	@ (8003010 <checkthe+0x1b0>)
 8002ee6:	f7fd fb20 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002eea:	2201      	movs	r2, #1
 8002eec:	2100      	movs	r1, #0
 8002eee:	4848      	ldr	r0, [pc, #288]	@ (8003010 <checkthe+0x1b0>)
 8002ef0:	f7fd fac0 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002ef4:	4948      	ldr	r1, [pc, #288]	@ (8003018 <checkthe+0x1b8>)
 8002ef6:	4846      	ldr	r0, [pc, #280]	@ (8003010 <checkthe+0x1b0>)
 8002ef8:	f7fd fb17 	bl	800052a <CLCD_WriteString>
				HAL_Delay(1000);
 8002efc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f00:	f000 ff2c 	bl	8003d5c <HAL_Delay>
 8002f04:	e070      	b.n	8002fe8 <checkthe+0x188>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002f06:	4845      	ldr	r0, [pc, #276]	@ (800301c <checkthe+0x1bc>)
 8002f08:	f7ff fe2e 	bl	8002b68 <CheckListUID>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	717b      	strb	r3, [r7, #5]
				CLCD_Clear(&LCD1);
 8002f1e:	483c      	ldr	r0, [pc, #240]	@ (8003010 <checkthe+0x1b0>)
 8002f20:	f7fd fb1a 	bl	8000558 <CLCD_Clear>
				switch (key1)
 8002f24:	797b      	ldrb	r3, [r7, #5]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d109      	bne.n	8002f3e <checkthe+0xde>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4838      	ldr	r0, [pc, #224]	@ (8003010 <checkthe+0x1b0>)
 8002f30:	f7fd faa0 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "ADMIN CARD");
 8002f34:	493b      	ldr	r1, [pc, #236]	@ (8003024 <checkthe+0x1c4>)
 8002f36:	4836      	ldr	r0, [pc, #216]	@ (8003010 <checkthe+0x1b0>)
 8002f38:	f7fd faf7 	bl	800052a <CLCD_WriteString>
					break;
 8002f3c:	e009      	b.n	8002f52 <checkthe+0xf2>
				default:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	4833      	ldr	r0, [pc, #204]	@ (8003010 <checkthe+0x1b0>)
 8002f44:	f7fd fa96 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "GUEST CARD");
 8002f48:	4937      	ldr	r1, [pc, #220]	@ (8003028 <checkthe+0x1c8>)
 8002f4a:	4831      	ldr	r0, [pc, #196]	@ (8003010 <checkthe+0x1b0>)
 8002f4c:	f7fd faed 	bl	800052a <CLCD_WriteString>
					break;
 8002f50:	bf00      	nop
				}
				switch (key2)
 8002f52:	79bb      	ldrb	r3, [r7, #6]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d01a      	beq.n	8002f8e <checkthe+0x12e>
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	dc22      	bgt.n	8002fa2 <checkthe+0x142>
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d002      	beq.n	8002f66 <checkthe+0x106>
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d00a      	beq.n	8002f7a <checkthe+0x11a>
 8002f64:	e01d      	b.n	8002fa2 <checkthe+0x142>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f66:	2201      	movs	r2, #1
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4829      	ldr	r0, [pc, #164]	@ (8003010 <checkthe+0x1b0>)
 8002f6c:	f7fd fa82 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD 1");
 8002f70:	492e      	ldr	r1, [pc, #184]	@ (800302c <checkthe+0x1cc>)
 8002f72:	4827      	ldr	r0, [pc, #156]	@ (8003010 <checkthe+0x1b0>)
 8002f74:	f7fd fad9 	bl	800052a <CLCD_WriteString>
					break;
 8002f78:	e01d      	b.n	8002fb6 <checkthe+0x156>
				case 2:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4824      	ldr	r0, [pc, #144]	@ (8003010 <checkthe+0x1b0>)
 8002f80:	f7fd fa78 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD 2");
 8002f84:	492a      	ldr	r1, [pc, #168]	@ (8003030 <checkthe+0x1d0>)
 8002f86:	4822      	ldr	r0, [pc, #136]	@ (8003010 <checkthe+0x1b0>)
 8002f88:	f7fd facf 	bl	800052a <CLCD_WriteString>
					break;
 8002f8c:	e013      	b.n	8002fb6 <checkthe+0x156>
				case 3:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002f8e:	2201      	movs	r2, #1
 8002f90:	2100      	movs	r1, #0
 8002f92:	481f      	ldr	r0, [pc, #124]	@ (8003010 <checkthe+0x1b0>)
 8002f94:	f7fd fa6e 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD 3");
 8002f98:	4926      	ldr	r1, [pc, #152]	@ (8003034 <checkthe+0x1d4>)
 8002f9a:	481d      	ldr	r0, [pc, #116]	@ (8003010 <checkthe+0x1b0>)
 8002f9c:	f7fd fac5 	bl	800052a <CLCD_WriteString>
					break;
 8002fa0:	e009      	b.n	8002fb6 <checkthe+0x156>
				default:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	481a      	ldr	r0, [pc, #104]	@ (8003010 <checkthe+0x1b0>)
 8002fa8:	f7fd fa64 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD 4");
 8002fac:	4922      	ldr	r1, [pc, #136]	@ (8003038 <checkthe+0x1d8>)
 8002fae:	4818      	ldr	r0, [pc, #96]	@ (8003010 <checkthe+0x1b0>)
 8002fb0:	f7fd fabb 	bl	800052a <CLCD_WriteString>
					break;
 8002fb4:	bf00      	nop
				}
				HAL_Delay(1000);
 8002fb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fba:	f000 fecf 	bl	8003d5c <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002fbe:	4814      	ldr	r0, [pc, #80]	@ (8003010 <checkthe+0x1b0>)
 8002fc0:	f7fd faca 	bl	8000558 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4811      	ldr	r0, [pc, #68]	@ (8003010 <checkthe+0x1b0>)
 8002fca:	f7fd fa53 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "SCAN CARD");
 8002fce:	4911      	ldr	r1, [pc, #68]	@ (8003014 <checkthe+0x1b4>)
 8002fd0:	480f      	ldr	r0, [pc, #60]	@ (8003010 <checkthe+0x1b0>)
 8002fd2:	f7fd faaa 	bl	800052a <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2100      	movs	r1, #0
 8002fda:	480d      	ldr	r0, [pc, #52]	@ (8003010 <checkthe+0x1b0>)
 8002fdc:	f7fd fa4a 	bl	8000474 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002fe0:	490d      	ldr	r1, [pc, #52]	@ (8003018 <checkthe+0x1b8>)
 8002fe2:	480b      	ldr	r0, [pc, #44]	@ (8003010 <checkthe+0x1b0>)
 8002fe4:	f7fd faa1 	bl	800052a <CLCD_WriteString>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002fe8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fec:	4813      	ldr	r0, [pc, #76]	@ (800303c <checkthe+0x1dc>)
 8002fee:	f7fd fdad 	bl	8000b4c <checkbuton>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d005      	beq.n	8003004 <checkthe+0x1a4>
	while (exitmenu )
 8002ff8:	4b04      	ldr	r3, [pc, #16]	@ (800300c <checkthe+0x1ac>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f47f af4b 	bne.w	8002e98 <checkthe+0x38>
 8003002:	e000      	b.n	8003006 <checkthe+0x1a6>
		{
			return;
 8003004:	bf00      	nop
		}
	}
}
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000000 	.word	0x20000000
 8003010:	200001ec 	.word	0x200001ec
 8003014:	08006db4 	.word	0x08006db4
 8003018:	08006a58 	.word	0x08006a58
 800301c:	200001dc 	.word	0x200001dc
 8003020:	08006e04 	.word	0x08006e04
 8003024:	08006e14 	.word	0x08006e14
 8003028:	08006e20 	.word	0x08006e20
 800302c:	08006e2c 	.word	0x08006e2c
 8003030:	08006e34 	.word	0x08006e34
 8003034:	08006e3c 	.word	0x08006e3c
 8003038:	08006e44 	.word	0x08006e44
 800303c:	40010800 	.word	0x40010800

08003040 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <CheckKey+0x58>)
 800304c:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800304e:	e015      	b.n	800307c <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3306      	adds	r3, #6
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd f8dc 	bl	8000212 <Flash_Read_2Byte>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003062:	429a      	cmp	r2, r3
 8003064:	d107      	bne.n	8003076 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3305      	adds	r3, #5
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	79fa      	ldrb	r2, [r7, #7]
 800306e:	429a      	cmp	r2, r3
 8003070:	d101      	bne.n	8003076 <CheckKey+0x36>
				return pt;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	e00b      	b.n	800308e <CheckKey+0x4e>
		}
		pt = pt + 8;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3308      	adds	r3, #8
 800307a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3305      	adds	r3, #5
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd f8ba 	bl	80001fa <Flash_Read_Byte>
 8003086:	4603      	mov	r3, r0
 8003088:	2bff      	cmp	r3, #255	@ 0xff
 800308a:	d1e1      	bne.n	8003050 <CheckKey+0x10>
	}
	return 0;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	0800a000 	.word	0x0800a000

0800309c <removeuid>:
void removeuid(uint32_t addressrm)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3306      	adds	r3, #6
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd f86a 	bl	8000184 <Flash_Write_2Byte>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <startadd>:
void startadd(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 80030bc:	483b      	ldr	r0, [pc, #236]	@ (80031ac <startadd+0xf4>)
 80030be:	f7fd fa4b 	bl	8000558 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	4839      	ldr	r0, [pc, #228]	@ (80031ac <startadd+0xf4>)
 80030c8:	f7fd f9d4 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "SCAN CARD");
 80030cc:	4938      	ldr	r1, [pc, #224]	@ (80031b0 <startadd+0xf8>)
 80030ce:	4837      	ldr	r0, [pc, #220]	@ (80031ac <startadd+0xf4>)
 80030d0:	f7fd fa2b 	bl	800052a <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 80030d4:	2201      	movs	r2, #1
 80030d6:	2100      	movs	r1, #0
 80030d8:	4834      	ldr	r0, [pc, #208]	@ (80031ac <startadd+0xf4>)
 80030da:	f7fd f9cb 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "ADMIN CARD");
 80030de:	4935      	ldr	r1, [pc, #212]	@ (80031b4 <startadd+0xfc>)
 80030e0:	4832      	ldr	r0, [pc, #200]	@ (80031ac <startadd+0xf4>)
 80030e2:	f7fd fa22 	bl	800052a <CLCD_WriteString>
	setaddress();
 80030e6:	f000 f86f 	bl	80031c8 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 80030ea:	4833      	ldr	r0, [pc, #204]	@ (80031b8 <startadd+0x100>)
 80030ec:	f000 f9e6 	bl	80034bc <TM_MFRC522_Check>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f9      	bne.n	80030ea <startadd+0x32>
			{
				if (CheckListUID(CardID) == 0)
 80030f6:	4830      	ldr	r0, [pc, #192]	@ (80031b8 <startadd+0x100>)
 80030f8:	f7ff fd36 	bl	8002b68 <CheckListUID>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10f      	bne.n	8003122 <startadd+0x6a>
				{
					CardID[5] = 0x11;
 8003102:	4b2d      	ldr	r3, [pc, #180]	@ (80031b8 <startadd+0x100>)
 8003104:	2211      	movs	r2, #17
 8003106:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 8003108:	4b2c      	ldr	r3, [pc, #176]	@ (80031bc <startadd+0x104>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2206      	movs	r2, #6
 800310e:	492a      	ldr	r1, [pc, #168]	@ (80031b8 <startadd+0x100>)
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f84f 	bl	80001b4 <Flash_Write_Array>
					AddressUID += 8;
 8003116:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <startadd+0x104>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3308      	adds	r3, #8
 800311c:	4a27      	ldr	r2, [pc, #156]	@ (80031bc <startadd+0x104>)
 800311e:	6013      	str	r3, [r2, #0]
					break;
 8003120:	e025      	b.n	800316e <startadd+0xb6>
				}
				else
				{
					CLCD_Clear(&LCD1);
 8003122:	4822      	ldr	r0, [pc, #136]	@ (80031ac <startadd+0xf4>)
 8003124:	f7fd fa18 	bl	8000558 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	481f      	ldr	r0, [pc, #124]	@ (80031ac <startadd+0xf4>)
 800312e:	f7fd f9a1 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "CARD AVAILABLE");
 8003132:	4923      	ldr	r1, [pc, #140]	@ (80031c0 <startadd+0x108>)
 8003134:	481d      	ldr	r0, [pc, #116]	@ (80031ac <startadd+0xf4>)
 8003136:	f7fd f9f8 	bl	800052a <CLCD_WriteString>
					HAL_Delay(1000);
 800313a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800313e:	f000 fe0d 	bl	8003d5c <HAL_Delay>
					CLCD_Clear(&LCD1);
 8003142:	481a      	ldr	r0, [pc, #104]	@ (80031ac <startadd+0xf4>)
 8003144:	f7fd fa08 	bl	8000558 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 8003148:	2200      	movs	r2, #0
 800314a:	2100      	movs	r1, #0
 800314c:	4817      	ldr	r0, [pc, #92]	@ (80031ac <startadd+0xf4>)
 800314e:	f7fd f991 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "SCAN CARD");
 8003152:	4917      	ldr	r1, [pc, #92]	@ (80031b0 <startadd+0xf8>)
 8003154:	4815      	ldr	r0, [pc, #84]	@ (80031ac <startadd+0xf4>)
 8003156:	f7fd f9e8 	bl	800052a <CLCD_WriteString>
					CLCD_SetCursor(&LCD1, 0, 1);
 800315a:	2201      	movs	r2, #1
 800315c:	2100      	movs	r1, #0
 800315e:	4813      	ldr	r0, [pc, #76]	@ (80031ac <startadd+0xf4>)
 8003160:	f7fd f988 	bl	8000474 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "ADMIN CARD");
 8003164:	4913      	ldr	r1, [pc, #76]	@ (80031b4 <startadd+0xfc>)
 8003166:	4811      	ldr	r0, [pc, #68]	@ (80031ac <startadd+0xf4>)
 8003168:	f7fd f9df 	bl	800052a <CLCD_WriteString>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 800316c:	e7bd      	b.n	80030ea <startadd+0x32>
				}
			}
		}
	CLCD_Clear(&LCD1);
 800316e:	480f      	ldr	r0, [pc, #60]	@ (80031ac <startadd+0xf4>)
 8003170:	f7fd f9f2 	bl	8000558 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8003174:	2200      	movs	r2, #0
 8003176:	2100      	movs	r1, #0
 8003178:	480c      	ldr	r0, [pc, #48]	@ (80031ac <startadd+0xf4>)
 800317a:	f7fd f97b 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "ADD SUCCESSFUL");
 800317e:	4911      	ldr	r1, [pc, #68]	@ (80031c4 <startadd+0x10c>)
 8003180:	480a      	ldr	r0, [pc, #40]	@ (80031ac <startadd+0xf4>)
 8003182:	f7fd f9d2 	bl	800052a <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8003186:	2201      	movs	r2, #1
 8003188:	2100      	movs	r1, #0
 800318a:	4808      	ldr	r0, [pc, #32]	@ (80031ac <startadd+0xf4>)
 800318c:	f7fd f972 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "ADMIN CARD");
 8003190:	4908      	ldr	r1, [pc, #32]	@ (80031b4 <startadd+0xfc>)
 8003192:	4806      	ldr	r0, [pc, #24]	@ (80031ac <startadd+0xf4>)
 8003194:	f7fd f9c9 	bl	800052a <CLCD_WriteString>
	HAL_Delay(1000);
 8003198:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800319c:	f000 fdde 	bl	8003d5c <HAL_Delay>
	CLCD_Clear(&LCD1);
 80031a0:	4802      	ldr	r0, [pc, #8]	@ (80031ac <startadd+0xf4>)
 80031a2:	f7fd f9d9 	bl	8000558 <CLCD_Clear>
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200001ec 	.word	0x200001ec
 80031b0:	08006db4 	.word	0x08006db4
 80031b4:	08006e14 	.word	0x08006e14
 80031b8:	200001dc 	.word	0x200001dc
 80031bc:	20000004 	.word	0x20000004
 80031c0:	08006df4 	.word	0x08006df4
 80031c4:	08006e4c 	.word	0x08006e4c

080031c8 <setaddress>:
void setaddress(void){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <setaddress+0x30>)
 80031d0:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80031d2:	e002      	b.n	80031da <setaddress+0x12>
	{
		pt = pt + 8;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3308      	adds	r3, #8
 80031d8:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3305      	adds	r3, #5
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f80b 	bl	80001fa <Flash_Read_Byte>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2bff      	cmp	r3, #255	@ 0xff
 80031e8:	d1f4      	bne.n	80031d4 <setaddress+0xc>
	}
	AddressUID = pt;
 80031ea:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <setaddress+0x34>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6013      	str	r3, [r2, #0]
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	0800a000 	.word	0x0800a000
 80031fc:	20000004 	.word	0x20000004

08003200 <password_button>:
	      CLCD_WriteChar(&LCD1, 95);
	      while(KEYPAD_Read() != KEYPAD_NOT_PRESSED );
	    }
	  }
}
void password_button(void){
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 8003206:	486b      	ldr	r0, [pc, #428]	@ (80033b4 <password_button+0x1b4>)
 8003208:	f7fd f9a6 	bl	8000558 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	4868      	ldr	r0, [pc, #416]	@ (80033b4 <password_button+0x1b4>)
 8003212:	f7fd f92f 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "NHAP PASSWORD :");
 8003216:	4968      	ldr	r1, [pc, #416]	@ (80033b8 <password_button+0x1b8>)
 8003218:	4866      	ldr	r0, [pc, #408]	@ (80033b4 <password_button+0x1b4>)
 800321a:	f7fd f986 	bl	800052a <CLCD_WriteString>
	exitmenu =120;
 800321e:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <password_button+0x1bc>)
 8003220:	2278      	movs	r2, #120	@ 0x78
 8003222:	701a      	strb	r2, [r3, #0]
	uint8_t pass[16] = {-1};
 8003224:	23ff      	movs	r3, #255	@ 0xff
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
	uint8_t k=0;
 8003234:	2300      	movs	r3, #0
 8003236:	75fb      	strb	r3, [r7, #23]
	uint8_t ascii = -1;
 8003238:	23ff      	movs	r3, #255	@ 0xff
 800323a:	75bb      	strb	r3, [r7, #22]
	HAL_Delay(1000);
 800323c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003240:	f000 fd8c 	bl	8003d5c <HAL_Delay>
	CLCD_SetCursor(&LCD1, k, 1);
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2201      	movs	r2, #1
 8003248:	4619      	mov	r1, r3
 800324a:	485a      	ldr	r0, [pc, #360]	@ (80033b4 <password_button+0x1b4>)
 800324c:	f7fd f912 	bl	8000474 <CLCD_SetCursor>
	CLCD_WriteChar(&LCD1, 95);
 8003250:	215f      	movs	r1, #95	@ 0x5f
 8003252:	4858      	ldr	r0, [pc, #352]	@ (80033b4 <password_button+0x1b4>)
 8003254:	f7fd f938 	bl	80004c8 <CLCD_WriteChar>
	while(exitmenu){
 8003258:	e0a4      	b.n	80033a4 <password_button+0x1a4>
		if(checkbuton(SELECT_GPIO_Port, SELECT_Pin) == 1){
 800325a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800325e:	4858      	ldr	r0, [pc, #352]	@ (80033c0 <password_button+0x1c0>)
 8003260:	f7fd fc74 	bl	8000b4c <checkbuton>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d114      	bne.n	8003294 <password_button+0x94>
			ascii++;
 800326a:	7dbb      	ldrb	r3, [r7, #22]
 800326c:	3301      	adds	r3, #1
 800326e:	75bb      	strb	r3, [r7, #22]
			if(ascii == 10)	ascii = 0;
 8003270:	7dbb      	ldrb	r3, [r7, #22]
 8003272:	2b0a      	cmp	r3, #10
 8003274:	d101      	bne.n	800327a <password_button+0x7a>
 8003276:	2300      	movs	r3, #0
 8003278:	75bb      	strb	r3, [r7, #22]
			CLCD_SetCursor(&LCD1, k, 1);
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2201      	movs	r2, #1
 800327e:	4619      	mov	r1, r3
 8003280:	484c      	ldr	r0, [pc, #304]	@ (80033b4 <password_button+0x1b4>)
 8003282:	f7fd f8f7 	bl	8000474 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, ascii + 0x30);
 8003286:	7dbb      	ldrb	r3, [r7, #22]
 8003288:	3330      	adds	r3, #48	@ 0x30
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4619      	mov	r1, r3
 800328e:	4849      	ldr	r0, [pc, #292]	@ (80033b4 <password_button+0x1b4>)
 8003290:	f7fd f91a 	bl	80004c8 <CLCD_WriteChar>
		}
		if(checkbuton(MENU_GPIO_Port, MENU_Pin) == 1){
 8003294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003298:	484a      	ldr	r0, [pc, #296]	@ (80033c4 <password_button+0x1c4>)
 800329a:	f7fd fc57 	bl	8000b4c <checkbuton>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d17f      	bne.n	80033a4 <password_button+0x1a4>
			CLCD_SetCursor(&LCD1, k, 1);
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2201      	movs	r2, #1
 80032a8:	4619      	mov	r1, r3
 80032aa:	4842      	ldr	r0, [pc, #264]	@ (80033b4 <password_button+0x1b4>)
 80032ac:	f7fd f8e2 	bl	8000474 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, '*');
 80032b0:	212a      	movs	r1, #42	@ 0x2a
 80032b2:	4840      	ldr	r0, [pc, #256]	@ (80033b4 <password_button+0x1b4>)
 80032b4:	f7fd f908 	bl	80004c8 <CLCD_WriteChar>
			pass[k] = ascii;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	3318      	adds	r3, #24
 80032bc:	443b      	add	r3, r7
 80032be:	7dba      	ldrb	r2, [r7, #22]
 80032c0:	f803 2c14 	strb.w	r2, [r3, #-20]
			k = k+1;
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	3301      	adds	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
			ascii = -1;
 80032ca:	23ff      	movs	r3, #255	@ 0xff
 80032cc:	75bb      	strb	r3, [r7, #22]
			if(k == 6){
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	2b06      	cmp	r3, #6
 80032d2:	d154      	bne.n	800337e <password_button+0x17e>
				for(uint8_t i = 0; i<6; i++){
 80032d4:	2300      	movs	r3, #0
 80032d6:	757b      	strb	r3, [r7, #21]
 80032d8:	e024      	b.n	8003324 <password_button+0x124>
					if(pass[i] != PassWord[i]){
 80032da:	7d7b      	ldrb	r3, [r7, #21]
 80032dc:	3318      	adds	r3, #24
 80032de:	443b      	add	r3, r7
 80032e0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80032e4:	7d7b      	ldrb	r3, [r7, #21]
 80032e6:	4938      	ldr	r1, [pc, #224]	@ (80033c8 <password_button+0x1c8>)
 80032e8:	5ccb      	ldrb	r3, [r1, r3]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d017      	beq.n	800331e <password_button+0x11e>
						CLCD_Clear(&LCD1);
 80032ee:	4831      	ldr	r0, [pc, #196]	@ (80033b4 <password_button+0x1b4>)
 80032f0:	f7fd f932 	bl	8000558 <CLCD_Clear>
						CLCD_SetCursor(&LCD1, 0, 0);
 80032f4:	2200      	movs	r2, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	482e      	ldr	r0, [pc, #184]	@ (80033b4 <password_button+0x1b4>)
 80032fa:	f7fd f8bb 	bl	8000474 <CLCD_SetCursor>
						CLCD_WriteString(&LCD1, "WRONG PASSWORD!!");
 80032fe:	4933      	ldr	r1, [pc, #204]	@ (80033cc <password_button+0x1cc>)
 8003300:	482c      	ldr	r0, [pc, #176]	@ (80033b4 <password_button+0x1b4>)
 8003302:	f7fd f912 	bl	800052a <CLCD_WriteString>
						HAL_UART_Transmit(&huart1, wrongpass, sizeof(wrongpass)-1, HAL_MAX_DELAY);
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	220e      	movs	r2, #14
 800330c:	4930      	ldr	r1, [pc, #192]	@ (80033d0 <password_button+0x1d0>)
 800330e:	4831      	ldr	r0, [pc, #196]	@ (80033d4 <password_button+0x1d4>)
 8003310:	f003 f999 	bl	8006646 <HAL_UART_Transmit>
						HAL_Delay(3000);
 8003314:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003318:	f000 fd20 	bl	8003d5c <HAL_Delay>
 800331c:	e047      	b.n	80033ae <password_button+0x1ae>
				for(uint8_t i = 0; i<6; i++){
 800331e:	7d7b      	ldrb	r3, [r7, #21]
 8003320:	3301      	adds	r3, #1
 8003322:	757b      	strb	r3, [r7, #21]
 8003324:	7d7b      	ldrb	r3, [r7, #21]
 8003326:	2b05      	cmp	r3, #5
 8003328:	d9d7      	bls.n	80032da <password_button+0xda>
						return;
					}
				}
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800332a:	2201      	movs	r2, #1
 800332c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003330:	4823      	ldr	r0, [pc, #140]	@ (80033c0 <password_button+0x1c0>)
 8003332:	f001 f9e0 	bl	80046f6 <HAL_GPIO_WritePin>
			CLCD_Clear(&LCD1);
 8003336:	481f      	ldr	r0, [pc, #124]	@ (80033b4 <password_button+0x1b4>)
 8003338:	f7fd f90e 	bl	8000558 <CLCD_Clear>
			CLCD_SetCursor(&LCD1, 0, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2100      	movs	r1, #0
 8003340:	481c      	ldr	r0, [pc, #112]	@ (80033b4 <password_button+0x1b4>)
 8003342:	f7fd f897 	bl	8000474 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, "    WELCOME");
 8003346:	4924      	ldr	r1, [pc, #144]	@ (80033d8 <password_button+0x1d8>)
 8003348:	481a      	ldr	r0, [pc, #104]	@ (80033b4 <password_button+0x1b4>)
 800334a:	f7fd f8ee 	bl	800052a <CLCD_WriteString>
			HAL_Delay(500);
 800334e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003352:	f000 fd03 	bl	8003d5c <HAL_Delay>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8003356:	2200      	movs	r2, #0
 8003358:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800335c:	4818      	ldr	r0, [pc, #96]	@ (80033c0 <password_button+0x1c0>)
 800335e:	f001 f9ca 	bl	80046f6 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, opened, sizeof(opened)-1, HAL_MAX_DELAY);
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	2206      	movs	r2, #6
 8003368:	491c      	ldr	r1, [pc, #112]	@ (80033dc <password_button+0x1dc>)
 800336a:	481a      	ldr	r0, [pc, #104]	@ (80033d4 <password_button+0x1d4>)
 800336c:	f003 f96b 	bl	8006646 <HAL_UART_Transmit>
			HAL_Delay(4000);
 8003370:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8003374:	f000 fcf2 	bl	8003d5c <HAL_Delay>
	        exitmenu = 0;
 8003378:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <password_button+0x1bc>)
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
			}
			CLCD_SetCursor(&LCD1, k, 1);
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	2201      	movs	r2, #1
 8003382:	4619      	mov	r1, r3
 8003384:	480b      	ldr	r0, [pc, #44]	@ (80033b4 <password_button+0x1b4>)
 8003386:	f7fd f875 	bl	8000474 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, 95);
 800338a:	215f      	movs	r1, #95	@ 0x5f
 800338c:	4809      	ldr	r0, [pc, #36]	@ (80033b4 <password_button+0x1b4>)
 800338e:	f7fd f89b 	bl	80004c8 <CLCD_WriteChar>
			while(checkbuton(SELECT_GPIO_Port, SELECT_Pin) != KEYPAD_NOT_PRESSED );
 8003392:	bf00      	nop
 8003394:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003398:	4809      	ldr	r0, [pc, #36]	@ (80033c0 <password_button+0x1c0>)
 800339a:	f7fd fbd7 	bl	8000b4c <checkbuton>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f7      	bne.n	8003394 <password_button+0x194>
	while(exitmenu){
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <password_button+0x1bc>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f47f af56 	bne.w	800325a <password_button+0x5a>

		}

	}

}
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200001ec 	.word	0x200001ec
 80033b8:	08006e68 	.word	0x08006e68
 80033bc:	20000000 	.word	0x20000000
 80033c0:	40010c00 	.word	0x40010c00
 80033c4:	40010800 	.word	0x40010800
 80033c8:	20000008 	.word	0x20000008
 80033cc:	08006e78 	.word	0x08006e78
 80033d0:	20000028 	.word	0x20000028
 80033d4:	20000198 	.word	0x20000198
 80033d8:	080069bc 	.word	0x080069bc
 80033dc:	20000014 	.word	0x20000014

080033e0 <resetflash>:
//	}
//
//}

void resetflash()
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <resetflash+0x34>)
 80033e8:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 80033ea:	e002      	b.n	80033f2 <resetflash+0x12>
		Flash_Erase(pt);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fc fead 	bl	800014c <Flash_Erase>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fc ff19 	bl	800022a <Flash_Read_8Byte>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	bf08      	it	eq
 8003402:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8003406:	d1f1      	bne.n	80033ec <resetflash+0xc>
	}
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	0800a000 	.word	0x0800a000

08003418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <Error_Handler+0x8>

08003424 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003432:	bf00      	nop
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <TM_SPI_Send+0x4c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d1f8      	bne.n	8003434 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003442:	f107 0208 	add.w	r2, r7, #8
 8003446:	f107 010c 	add.w	r1, r7, #12
 800344a:	230a      	movs	r3, #10
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2301      	movs	r3, #1
 8003450:	4807      	ldr	r0, [pc, #28]	@ (8003470 <TM_SPI_Send+0x4c>)
 8003452:	f002 fa69 	bl	8005928 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003456:	bf00      	nop
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <TM_SPI_Send+0x4c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003462:	2b80      	cmp	r3, #128	@ 0x80
 8003464:	d0f8      	beq.n	8003458 <TM_SPI_Send+0x34>
	return data_re[0];
 8003466:	7a3b      	ldrb	r3, [r7, #8]

}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200000f8 	.word	0x200000f8

08003474 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003478:	f000 f8d5 	bl	8003626 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800347c:	218d      	movs	r1, #141	@ 0x8d
 800347e:	202a      	movs	r0, #42	@ 0x2a
 8003480:	f000 f836 	bl	80034f0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003484:	213e      	movs	r1, #62	@ 0x3e
 8003486:	202b      	movs	r0, #43	@ 0x2b
 8003488:	f000 f832 	bl	80034f0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 800348c:	211e      	movs	r1, #30
 800348e:	202d      	movs	r0, #45	@ 0x2d
 8003490:	f000 f82e 	bl	80034f0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003494:	2100      	movs	r1, #0
 8003496:	202c      	movs	r0, #44	@ 0x2c
 8003498:	f000 f82a 	bl	80034f0 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 800349c:	2170      	movs	r1, #112	@ 0x70
 800349e:	2026      	movs	r0, #38	@ 0x26
 80034a0:	f000 f826 	bl	80034f0 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80034a4:	2140      	movs	r1, #64	@ 0x40
 80034a6:	2015      	movs	r0, #21
 80034a8:	f000 f822 	bl	80034f0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80034ac:	213d      	movs	r1, #61	@ 0x3d
 80034ae:	2011      	movs	r0, #17
 80034b0:	f000 f81e 	bl	80034f0 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80034b4:	f000 f8a2 	bl	80035fc <TM_MFRC522_AntennaOn>
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}

080034bc <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	2026      	movs	r0, #38	@ 0x26
 80034c8:	f000 f8b5 	bl	8003636 <TM_MFRC522_Request>
 80034cc:	4603      	mov	r3, r0
 80034ce:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f9a1 	bl	800381e <TM_MFRC522_Anticoll>
 80034dc:	4603      	mov	r3, r0
 80034de:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 80034e0:	f000 fa23 	bl	800392a <TM_MFRC522_Halt>
	return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	460a      	mov	r2, r1
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003500:	2200      	movs	r2, #0
 8003502:	2110      	movs	r1, #16
 8003504:	480c      	ldr	r0, [pc, #48]	@ (8003538 <TM_MFRC522_WriteRegister+0x48>)
 8003506:	f001 f8f6 	bl	80046f6 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003514:	b2db      	uxtb	r3, r3
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff84 	bl	8003424 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 800351c:	79bb      	ldrb	r3, [r7, #6]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff80 	bl	8003424 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003524:	2201      	movs	r2, #1
 8003526:	2110      	movs	r1, #16
 8003528:	4803      	ldr	r0, [pc, #12]	@ (8003538 <TM_MFRC522_WriteRegister+0x48>)
 800352a:	f001 f8e4 	bl	80046f6 <HAL_GPIO_WritePin>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40010800 	.word	0x40010800

0800353c <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003546:	2200      	movs	r2, #0
 8003548:	2110      	movs	r1, #16
 800354a:	480f      	ldr	r0, [pc, #60]	@ (8003588 <TM_MFRC522_ReadRegister+0x4c>)
 800354c:	f001 f8d3 	bl	80046f6 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	b25b      	sxtb	r3, r3
 8003556:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800355a:	b25b      	sxtb	r3, r3
 800355c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003560:	b25b      	sxtb	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5d 	bl	8003424 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 800356a:	2000      	movs	r0, #0
 800356c:	f7ff ff5a 	bl	8003424 <TM_SPI_Send>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003574:	2201      	movs	r2, #1
 8003576:	2110      	movs	r1, #16
 8003578:	4803      	ldr	r0, [pc, #12]	@ (8003588 <TM_MFRC522_ReadRegister+0x4c>)
 800357a:	f001 f8bc 	bl	80046f6 <HAL_GPIO_WritePin>

	return val;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40010800 	.word	0x40010800

0800358c <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	460a      	mov	r2, r1
 8003596:	71fb      	strb	r3, [r7, #7]
 8003598:	4613      	mov	r3, r2
 800359a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ffcc 	bl	800353c <TM_MFRC522_ReadRegister>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	79bb      	ldrb	r3, [r7, #6]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ff9c 	bl	80034f0 <TM_MFRC522_WriteRegister>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	460a      	mov	r2, r1
 80035ca:	71fb      	strb	r3, [r7, #7]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ffb2 	bl	800353c <TM_MFRC522_ReadRegister>
 80035d8:	4603      	mov	r3, r0
 80035da:	b25a      	sxtb	r2, r3
 80035dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	4013      	ands	r3, r2
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff7e 	bl	80034f0 <TM_MFRC522_WriteRegister>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003602:	2014      	movs	r0, #20
 8003604:	f7ff ff9a 	bl	800353c <TM_MFRC522_ReadRegister>
 8003608:	4603      	mov	r3, r0
 800360a:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003616:	2103      	movs	r1, #3
 8003618:	2014      	movs	r0, #20
 800361a:	f7ff ffb7 	bl	800358c <TM_MFRC522_SetBitMask>
	}
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003626:	b580      	push	{r7, lr}
 8003628:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800362a:	210f      	movs	r1, #15
 800362c:	2001      	movs	r0, #1
 800362e:	f7ff ff5f 	bl	80034f0 <TM_MFRC522_WriteRegister>
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}

08003636 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af02      	add	r7, sp, #8
 800363c:	4603      	mov	r3, r0
 800363e:	6039      	str	r1, [r7, #0]
 8003640:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003642:	2107      	movs	r1, #7
 8003644:	200d      	movs	r0, #13
 8003646:	f7ff ff53 	bl	80034f0 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	79fa      	ldrb	r2, [r7, #7]
 800364e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	200c      	movs	r0, #12
 800365e:	f000 f80f 	bl	8003680 <TM_MFRC522_ToCard>
 8003662:	4603      	mov	r3, r0
 8003664:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <TM_MFRC522_Request+0x3c>
 800366c:	89bb      	ldrh	r3, [r7, #12]
 800366e:	2b10      	cmp	r3, #16
 8003670:	d001      	beq.n	8003676 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003672:	2302      	movs	r3, #2
 8003674:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	4603      	mov	r3, r0
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	4613      	mov	r3, r2
 8003690:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003692:	2302      	movs	r3, #2
 8003694:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003696:	2300      	movs	r3, #0
 8003698:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800369a:	2300      	movs	r3, #0
 800369c:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d006      	beq.n	80036b2 <TM_MFRC522_ToCard+0x32>
 80036a4:	2b0e      	cmp	r3, #14
 80036a6:	d109      	bne.n	80036bc <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80036a8:	2312      	movs	r3, #18
 80036aa:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80036ac:	2310      	movs	r3, #16
 80036ae:	757b      	strb	r3, [r7, #21]
			break;
 80036b0:	e005      	b.n	80036be <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80036b2:	2377      	movs	r3, #119	@ 0x77
 80036b4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80036b6:	2330      	movs	r3, #48	@ 0x30
 80036b8:	757b      	strb	r3, [r7, #21]
			break;
 80036ba:	e000      	b.n	80036be <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80036bc:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80036be:	7dbb      	ldrb	r3, [r7, #22]
 80036c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	2002      	movs	r0, #2
 80036ca:	f7ff ff11 	bl	80034f0 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	2004      	movs	r0, #4
 80036d2:	f7ff ff75 	bl	80035c0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80036d6:	2180      	movs	r1, #128	@ 0x80
 80036d8:	200a      	movs	r0, #10
 80036da:	f7ff ff57 	bl	800358c <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80036de:	2100      	movs	r1, #0
 80036e0:	2001      	movs	r0, #1
 80036e2:	f7ff ff05 	bl	80034f0 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80036e6:	2300      	movs	r3, #0
 80036e8:	827b      	strh	r3, [r7, #18]
 80036ea:	e00a      	b.n	8003702 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80036ec:	8a7b      	ldrh	r3, [r7, #18]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	2009      	movs	r0, #9
 80036f8:	f7ff fefa 	bl	80034f0 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80036fc:	8a7b      	ldrh	r3, [r7, #18]
 80036fe:	3301      	adds	r3, #1
 8003700:	827b      	strh	r3, [r7, #18]
 8003702:	7bbb      	ldrb	r3, [r7, #14]
 8003704:	b29b      	uxth	r3, r3
 8003706:	8a7a      	ldrh	r2, [r7, #18]
 8003708:	429a      	cmp	r2, r3
 800370a:	d3ef      	bcc.n	80036ec <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	4619      	mov	r1, r3
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff feed 	bl	80034f0 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d103      	bne.n	8003724 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 800371c:	2180      	movs	r1, #128	@ 0x80
 800371e:	200d      	movs	r0, #13
 8003720:	f7ff ff34 	bl	800358c <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003724:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003728:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800372a:	2004      	movs	r0, #4
 800372c:	f7ff ff06 	bl	800353c <TM_MFRC522_ReadRegister>
 8003730:	4603      	mov	r3, r0
 8003732:	753b      	strb	r3, [r7, #20]
		i--;
 8003734:	8a7b      	ldrh	r3, [r7, #18]
 8003736:	3b01      	subs	r3, #1
 8003738:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800373a:	8a7b      	ldrh	r3, [r7, #18]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <TM_MFRC522_ToCard+0xd6>
 8003740:	7d3b      	ldrb	r3, [r7, #20]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <TM_MFRC522_ToCard+0xd6>
 800374a:	7d3a      	ldrb	r2, [r7, #20]
 800374c:	7d7b      	ldrb	r3, [r7, #21]
 800374e:	4013      	ands	r3, r2
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0e9      	beq.n	800372a <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8003756:	2180      	movs	r1, #128	@ 0x80
 8003758:	200d      	movs	r0, #13
 800375a:	f7ff ff31 	bl	80035c0 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 800375e:	8a7b      	ldrh	r3, [r7, #18]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d057      	beq.n	8003814 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8003764:	2006      	movs	r0, #6
 8003766:	f7ff fee9 	bl	800353c <TM_MFRC522_ReadRegister>
 800376a:	4603      	mov	r3, r0
 800376c:	f003 031b 	and.w	r3, r3, #27
 8003770:	2b00      	cmp	r3, #0
 8003772:	d14d      	bne.n	8003810 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8003778:	7d3a      	ldrb	r2, [r7, #20]
 800377a:	7dbb      	ldrb	r3, [r7, #22]
 800377c:	4013      	ands	r3, r2
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8003788:	2301      	movs	r3, #1
 800378a:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d140      	bne.n	8003814 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003792:	200a      	movs	r0, #10
 8003794:	f7ff fed2 	bl	800353c <TM_MFRC522_ReadRegister>
 8003798:	4603      	mov	r3, r0
 800379a:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800379c:	200c      	movs	r0, #12
 800379e:	f7ff fecd 	bl	800353c <TM_MFRC522_ReadRegister>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 80037aa:	7c7b      	ldrb	r3, [r7, #17]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00b      	beq.n	80037c8 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 80037b0:	7d3b      	ldrb	r3, [r7, #20]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	7c7b      	ldrb	r3, [r7, #17]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	4413      	add	r3, r2
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c4:	801a      	strh	r2, [r3, #0]
 80037c6:	e005      	b.n	80037d4 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 80037c8:	7d3b      	ldrb	r3, [r7, #20]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d2:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80037d4:	7d3b      	ldrb	r3, [r7, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <TM_MFRC522_ToCard+0x15e>
					n = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80037de:	7d3b      	ldrb	r3, [r7, #20]
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d901      	bls.n	80037e8 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 80037e4:	2310      	movs	r3, #16
 80037e6:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80037e8:	2300      	movs	r3, #0
 80037ea:	827b      	strh	r3, [r7, #18]
 80037ec:	e00a      	b.n	8003804 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 80037ee:	8a7b      	ldrh	r3, [r7, #18]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	18d4      	adds	r4, r2, r3
 80037f4:	2009      	movs	r0, #9
 80037f6:	f7ff fea1 	bl	800353c <TM_MFRC522_ReadRegister>
 80037fa:	4603      	mov	r3, r0
 80037fc:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80037fe:	8a7b      	ldrh	r3, [r7, #18]
 8003800:	3301      	adds	r3, #1
 8003802:	827b      	strh	r3, [r7, #18]
 8003804:	7d3b      	ldrb	r3, [r7, #20]
 8003806:	b29b      	uxth	r3, r3
 8003808:	8a7a      	ldrh	r2, [r7, #18]
 800380a:	429a      	cmp	r2, r3
 800380c:	d3ef      	bcc.n	80037ee <TM_MFRC522_ToCard+0x16e>
 800380e:	e001      	b.n	8003814 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003810:	2302      	movs	r3, #2
 8003812:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
}
 8003816:	4618      	mov	r0, r3
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd90      	pop	{r4, r7, pc}

0800381e <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af02      	add	r7, sp, #8
 8003824:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800382a:	2100      	movs	r1, #0
 800382c:	200d      	movs	r0, #13
 800382e:	f7ff fe5f 	bl	80034f0 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2293      	movs	r2, #147	@ 0x93
 8003836:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3301      	adds	r3, #1
 800383c:	2220      	movs	r2, #32
 800383e:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003840:	f107 030a 	add.w	r3, r7, #10
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	200c      	movs	r0, #12
 800384e:	f7ff ff17 	bl	8003680 <TM_MFRC522_ToCard>
 8003852:	4603      	mov	r3, r0
 8003854:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d118      	bne.n	800388e <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 800385c:	2300      	movs	r3, #0
 800385e:	73bb      	strb	r3, [r7, #14]
 8003860:	e009      	b.n	8003876 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8003862:	7bbb      	ldrb	r3, [r7, #14]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4413      	add	r3, r2
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	7b7b      	ldrb	r3, [r7, #13]
 800386c:	4053      	eors	r3, r2
 800386e:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8003870:	7bbb      	ldrb	r3, [r7, #14]
 8003872:	3301      	adds	r3, #1
 8003874:	73bb      	strb	r3, [r7, #14]
 8003876:	7bbb      	ldrb	r3, [r7, #14]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d9f2      	bls.n	8003862 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 800387c:	7bbb      	ldrb	r3, [r7, #14]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	7b7a      	ldrb	r2, [r7, #13]
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800388a:	2302      	movs	r3, #2
 800388c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	460b      	mov	r3, r1
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 80038a6:	2104      	movs	r1, #4
 80038a8:	2005      	movs	r0, #5
 80038aa:	f7ff fe89 	bl	80035c0 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80038ae:	2180      	movs	r1, #128	@ 0x80
 80038b0:	200a      	movs	r0, #10
 80038b2:	f7ff fe6b 	bl	800358c <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
 80038ba:	e00a      	b.n	80038d2 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	4619      	mov	r1, r3
 80038c6:	2009      	movs	r0, #9
 80038c8:	f7ff fe12 	bl	80034f0 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	3301      	adds	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
 80038d2:	7dfa      	ldrb	r2, [r7, #23]
 80038d4:	7afb      	ldrb	r3, [r7, #11]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d3f0      	bcc.n	80038bc <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80038da:	2103      	movs	r1, #3
 80038dc:	2001      	movs	r0, #1
 80038de:	f7ff fe07 	bl	80034f0 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80038e2:	23ff      	movs	r3, #255	@ 0xff
 80038e4:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80038e6:	2005      	movs	r0, #5
 80038e8:	f7ff fe28 	bl	800353c <TM_MFRC522_ReadRegister>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75bb      	strb	r3, [r7, #22]
		i--;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <TM_MFRC522_CalculateCRC+0x6e>
 80038fc:	7dbb      	ldrb	r3, [r7, #22]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0ef      	beq.n	80038e6 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8003906:	2022      	movs	r0, #34	@ 0x22
 8003908:	f7ff fe18 	bl	800353c <TM_MFRC522_ReadRegister>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	1c5c      	adds	r4, r3, #1
 8003918:	2021      	movs	r0, #33	@ 0x21
 800391a:	f7ff fe0f 	bl	800353c <TM_MFRC522_ReadRegister>
 800391e:	4603      	mov	r3, r0
 8003920:	7023      	strb	r3, [r4, #0]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}

0800392a <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8003930:	2350      	movs	r3, #80	@ 0x50
 8003932:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003938:	463b      	mov	r3, r7
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	463b      	mov	r3, r7
 800393e:	2102      	movs	r1, #2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ffa9 	bl	8003898 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003946:	463a      	mov	r2, r7
 8003948:	4639      	mov	r1, r7
 800394a:	1dbb      	adds	r3, r7, #6
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	2204      	movs	r2, #4
 8003952:	200c      	movs	r0, #12
 8003954:	f7ff fe94 	bl	8003680 <TM_MFRC522_ToCard>



}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003966:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <HAL_MspInit+0x5c>)
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <HAL_MspInit+0x5c>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6193      	str	r3, [r2, #24]
 8003972:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <HAL_MspInit+0x5c>)
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	4b0f      	ldr	r3, [pc, #60]	@ (80039bc <HAL_MspInit+0x5c>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4a0e      	ldr	r2, [pc, #56]	@ (80039bc <HAL_MspInit+0x5c>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003988:	61d3      	str	r3, [r2, #28]
 800398a:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <HAL_MspInit+0x5c>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003996:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <HAL_MspInit+0x60>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	4a04      	ldr	r2, [pc, #16]	@ (80039c0 <HAL_MspInit+0x60>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40010000 	.word	0x40010000

080039c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	f107 0310 	add.w	r3, r7, #16
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a16      	ldr	r2, [pc, #88]	@ (8003a38 <HAL_I2C_MspInit+0x74>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d124      	bne.n	8003a2e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e4:	4b15      	ldr	r3, [pc, #84]	@ (8003a3c <HAL_I2C_MspInit+0x78>)
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	4a14      	ldr	r2, [pc, #80]	@ (8003a3c <HAL_I2C_MspInit+0x78>)
 80039ea:	f043 0308 	orr.w	r3, r3, #8
 80039ee:	6193      	str	r3, [r2, #24]
 80039f0:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <HAL_I2C_MspInit+0x78>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a02:	2312      	movs	r3, #18
 8003a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a06:	2303      	movs	r3, #3
 8003a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0a:	f107 0310 	add.w	r3, r7, #16
 8003a0e:	4619      	mov	r1, r3
 8003a10:	480b      	ldr	r0, [pc, #44]	@ (8003a40 <HAL_I2C_MspInit+0x7c>)
 8003a12:	f000 fcd5 	bl	80043c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a16:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <HAL_I2C_MspInit+0x78>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4a08      	ldr	r2, [pc, #32]	@ (8003a3c <HAL_I2C_MspInit+0x78>)
 8003a1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a20:	61d3      	str	r3, [r2, #28]
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_I2C_MspInit+0x78>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003a2e:	bf00      	nop
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40005800 	.word	0x40005800
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40010c00 	.word	0x40010c00

08003a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4c:	f107 0310 	add.w	r3, r7, #16
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <HAL_SPI_MspInit+0x88>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d12f      	bne.n	8003ac4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a6e:	6193      	str	r3, [r2, #24]
 8003a70:	4b17      	ldr	r3, [pc, #92]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	4a13      	ldr	r2, [pc, #76]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	6193      	str	r3, [r2, #24]
 8003a88:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a94:	23a0      	movs	r3, #160	@ 0xa0
 8003a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	480b      	ldr	r0, [pc, #44]	@ (8003ad4 <HAL_SPI_MspInit+0x90>)
 8003aa8:	f000 fc8a 	bl	80043c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003aac:	2340      	movs	r3, #64	@ 0x40
 8003aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab8:	f107 0310 	add.w	r3, r7, #16
 8003abc:	4619      	mov	r1, r3
 8003abe:	4805      	ldr	r0, [pc, #20]	@ (8003ad4 <HAL_SPI_MspInit+0x90>)
 8003ac0:	f000 fc7e 	bl	80043c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ac4:	bf00      	nop
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40013000 	.word	0x40013000
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40010800 	.word	0x40010800

08003ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d113      	bne.n	8003b12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aea:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <HAL_TIM_Base_MspInit+0x44>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	@ (8003b1c <HAL_TIM_Base_MspInit+0x44>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	61d3      	str	r3, [r2, #28]
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_TIM_Base_MspInit+0x44>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	201c      	movs	r0, #28
 8003b08:	f000 fa23 	bl	8003f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b0c:	201c      	movs	r0, #28
 8003b0e:	f000 fa3c 	bl	8003f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000

08003b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	@ 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 0314 	add.w	r3, r7, #20
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a22      	ldr	r2, [pc, #136]	@ (8003bc4 <HAL_UART_MspInit+0xa4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d13d      	bne.n	8003bbc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b40:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <HAL_UART_MspInit+0xa8>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	4a20      	ldr	r2, [pc, #128]	@ (8003bc8 <HAL_UART_MspInit+0xa8>)
 8003b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b4a:	6193      	str	r3, [r2, #24]
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_UART_MspInit+0xa8>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b58:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <HAL_UART_MspInit+0xa8>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc8 <HAL_UART_MspInit+0xa8>)
 8003b5e:	f043 0308 	orr.w	r3, r3, #8
 8003b62:	6193      	str	r3, [r2, #24]
 8003b64:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <HAL_UART_MspInit+0xa8>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b70:	2340      	movs	r3, #64	@ 0x40
 8003b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	2302      	movs	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	4619      	mov	r1, r3
 8003b82:	4812      	ldr	r0, [pc, #72]	@ (8003bcc <HAL_UART_MspInit+0xac>)
 8003b84:	f000 fc1c 	bl	80043c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b94:	f107 0314 	add.w	r3, r7, #20
 8003b98:	4619      	mov	r1, r3
 8003b9a:	480c      	ldr	r0, [pc, #48]	@ (8003bcc <HAL_UART_MspInit+0xac>)
 8003b9c:	f000 fc10 	bl	80043c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_UART_MspInit+0xb0>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb6:	4a06      	ldr	r2, [pc, #24]	@ (8003bd0 <HAL_UART_MspInit+0xb0>)
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003bbc:	bf00      	nop
 8003bbe:	3728      	adds	r7, #40	@ 0x28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40010c00 	.word	0x40010c00
 8003bd0:	40010000 	.word	0x40010000

08003bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <NMI_Handler+0x4>

08003bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <HardFault_Handler+0x4>

08003be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <MemManage_Handler+0x4>

08003bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <BusFault_Handler+0x4>

08003bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <UsageFault_Handler+0x4>

08003bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c24:	f000 f87e 	bl	8003d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c30:	4802      	ldr	r0, [pc, #8]	@ (8003c3c <TIM2_IRQHandler+0x10>)
 8003c32:	f002 f963 	bl	8005efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000150 	.word	0x20000150

08003c40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c4c:	480c      	ldr	r0, [pc, #48]	@ (8003c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c4e:	490d      	ldr	r1, [pc, #52]	@ (8003c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c50:	4a0d      	ldr	r2, [pc, #52]	@ (8003c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c54:	e002      	b.n	8003c5c <LoopCopyDataInit>

08003c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c5a:	3304      	adds	r3, #4

08003c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c60:	d3f9      	bcc.n	8003c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c62:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c64:	4c0a      	ldr	r4, [pc, #40]	@ (8003c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c68:	e001      	b.n	8003c6e <LoopFillZerobss>

08003c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c6c:	3204      	adds	r2, #4

08003c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c70:	d3fb      	bcc.n	8003c6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c72:	f7ff ffe5 	bl	8003c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c76:	f002 fe59 	bl	800692c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c7a:	f7fc fca1 	bl	80005c0 <main>
  bx lr
 8003c7e:	4770      	bx	lr
  ldr r0, =_sdata
 8003c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c84:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003c88:	08006ebc 	.word	0x08006ebc
  ldr r2, =_sbss
 8003c8c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003c90:	20000220 	.word	0x20000220

08003c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c94:	e7fe      	b.n	8003c94 <ADC1_2_IRQHandler>
	...

08003c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c9c:	4b08      	ldr	r3, [pc, #32]	@ (8003cc0 <HAL_Init+0x28>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a07      	ldr	r2, [pc, #28]	@ (8003cc0 <HAL_Init+0x28>)
 8003ca2:	f043 0310 	orr.w	r3, r3, #16
 8003ca6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ca8:	2003      	movs	r0, #3
 8003caa:	f000 f947 	bl	8003f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cae:	200f      	movs	r0, #15
 8003cb0:	f000 f808 	bl	8003cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cb4:	f7ff fe54 	bl	8003960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40022000 	.word	0x40022000

08003cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_InitTick+0x54>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <HAL_InitTick+0x58>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f95f 	bl	8003fa6 <HAL_SYSTICK_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e00e      	b.n	8003d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b0f      	cmp	r3, #15
 8003cf6:	d80a      	bhi.n	8003d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	f000 f927 	bl	8003f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d04:	4a06      	ldr	r2, [pc, #24]	@ (8003d20 <HAL_InitTick+0x5c>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000078 	.word	0x20000078
 8003d1c:	20000080 	.word	0x20000080
 8003d20:	2000007c 	.word	0x2000007c

08003d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <HAL_IncTick+0x1c>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4b05      	ldr	r3, [pc, #20]	@ (8003d44 <HAL_IncTick+0x20>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	4a03      	ldr	r2, [pc, #12]	@ (8003d44 <HAL_IncTick+0x20>)
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	20000080 	.word	0x20000080
 8003d44:	200001f8 	.word	0x200001f8

08003d48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d4c:	4b02      	ldr	r3, [pc, #8]	@ (8003d58 <HAL_GetTick+0x10>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	200001f8 	.word	0x200001f8

08003d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d64:	f7ff fff0 	bl	8003d48 <HAL_GetTick>
 8003d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d005      	beq.n	8003d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d76:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <HAL_Delay+0x44>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d82:	bf00      	nop
 8003d84:	f7ff ffe0 	bl	8003d48 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d8f7      	bhi.n	8003d84 <HAL_Delay+0x28>
  {
  }
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000080 	.word	0x20000080

08003da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db4:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd6:	4a04      	ldr	r2, [pc, #16]	@ (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	60d3      	str	r3, [r2, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df0:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <__NVIC_GetPriorityGrouping+0x18>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 0307 	and.w	r3, r3, #7
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	db0b      	blt.n	8003e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	4906      	ldr	r1, [pc, #24]	@ (8003e3c <__NVIC_EnableIRQ+0x34>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2001      	movs	r0, #1
 8003e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	@ (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	@ (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
         );
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	@ 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f08:	d301      	bcc.n	8003f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e00f      	b.n	8003f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f38 <SysTick_Config+0x40>)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f16:	210f      	movs	r1, #15
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	f7ff ff90 	bl	8003e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f20:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <SysTick_Config+0x40>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f26:	4b04      	ldr	r3, [pc, #16]	@ (8003f38 <SysTick_Config+0x40>)
 8003f28:	2207      	movs	r2, #7
 8003f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	e000e010 	.word	0xe000e010

08003f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ff2d 	bl	8003da4 <__NVIC_SetPriorityGrouping>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f64:	f7ff ff42 	bl	8003dec <__NVIC_GetPriorityGrouping>
 8003f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	f7ff ff90 	bl	8003e94 <NVIC_EncodePriority>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff5f 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f82:	bf00      	nop
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff35 	bl	8003e08 <__NVIC_EnableIRQ>
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ffa2 	bl	8003ef8 <SysTick_Config>
 8003fb4:	4603      	mov	r3, r0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003fda:	4b2f      	ldr	r3, [pc, #188]	@ (8004098 <HAL_FLASH_Program+0xd8>)
 8003fdc:	7e1b      	ldrb	r3, [r3, #24]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_FLASH_Program+0x26>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e054      	b.n	8004090 <HAL_FLASH_Program+0xd0>
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8004098 <HAL_FLASH_Program+0xd8>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003fec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ff0:	f000 f8a8 	bl	8004144 <FLASH_WaitForLastOperation>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d144      	bne.n	8004088 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d102      	bne.n	800400a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004004:	2301      	movs	r3, #1
 8004006:	757b      	strb	r3, [r7, #21]
 8004008:	e007      	b.n	800401a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d102      	bne.n	8004016 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004010:	2302      	movs	r3, #2
 8004012:	757b      	strb	r3, [r7, #21]
 8004014:	e001      	b.n	800401a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004016:	2304      	movs	r3, #4
 8004018:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800401a:	2300      	movs	r3, #0
 800401c:	75bb      	strb	r3, [r7, #22]
 800401e:	e02d      	b.n	800407c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004020:	7dbb      	ldrb	r3, [r7, #22]
 8004022:	005a      	lsls	r2, r3, #1
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	eb02 0c03 	add.w	ip, r2, r3
 800402a:	7dbb      	ldrb	r3, [r7, #22]
 800402c:	0119      	lsls	r1, r3, #4
 800402e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004032:	f1c1 0620 	rsb	r6, r1, #32
 8004036:	f1a1 0020 	sub.w	r0, r1, #32
 800403a:	fa22 f401 	lsr.w	r4, r2, r1
 800403e:	fa03 f606 	lsl.w	r6, r3, r6
 8004042:	4334      	orrs	r4, r6
 8004044:	fa23 f000 	lsr.w	r0, r3, r0
 8004048:	4304      	orrs	r4, r0
 800404a:	fa23 f501 	lsr.w	r5, r3, r1
 800404e:	b2a3      	uxth	r3, r4
 8004050:	4619      	mov	r1, r3
 8004052:	4660      	mov	r0, ip
 8004054:	f000 f85a 	bl	800410c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004058:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800405c:	f000 f872 	bl	8004144 <FLASH_WaitForLastOperation>
 8004060:	4603      	mov	r3, r0
 8004062:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004064:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <HAL_FLASH_Program+0xdc>)
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	4a0c      	ldr	r2, [pc, #48]	@ (800409c <HAL_FLASH_Program+0xdc>)
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004076:	7dbb      	ldrb	r3, [r7, #22]
 8004078:	3301      	adds	r3, #1
 800407a:	75bb      	strb	r3, [r7, #22]
 800407c:	7dba      	ldrb	r2, [r7, #22]
 800407e:	7d7b      	ldrb	r3, [r7, #21]
 8004080:	429a      	cmp	r2, r3
 8004082:	d3cd      	bcc.n	8004020 <HAL_FLASH_Program+0x60>
 8004084:	e000      	b.n	8004088 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004086:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004088:	4b03      	ldr	r3, [pc, #12]	@ (8004098 <HAL_FLASH_Program+0xd8>)
 800408a:	2200      	movs	r2, #0
 800408c:	761a      	strb	r2, [r3, #24]

  return status;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004098:	20000200 	.word	0x20000200
 800409c:	40022000 	.word	0x40022000

080040a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <HAL_FLASH_Unlock+0x40>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040b6:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <HAL_FLASH_Unlock+0x40>)
 80040b8:	4a0a      	ldr	r2, [pc, #40]	@ (80040e4 <HAL_FLASH_Unlock+0x44>)
 80040ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040bc:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <HAL_FLASH_Unlock+0x40>)
 80040be:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <HAL_FLASH_Unlock+0x48>)
 80040c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040c2:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <HAL_FLASH_Unlock+0x40>)
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80040d2:	79fb      	ldrb	r3, [r7, #7]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40022000 	.word	0x40022000
 80040e4:	45670123 	.word	0x45670123
 80040e8:	cdef89ab 	.word	0xcdef89ab

080040ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80040f0:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <HAL_FLASH_Lock+0x1c>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	4a04      	ldr	r2, [pc, #16]	@ (8004108 <HAL_FLASH_Lock+0x1c>)
 80040f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40022000 	.word	0x40022000

0800410c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004118:	4b08      	ldr	r3, [pc, #32]	@ (800413c <FLASH_Program_HalfWord+0x30>)
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800411e:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <FLASH_Program_HalfWord+0x34>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	4a07      	ldr	r2, [pc, #28]	@ (8004140 <FLASH_Program_HalfWord+0x34>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	887a      	ldrh	r2, [r7, #2]
 800412e:	801a      	strh	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000200 	.word	0x20000200
 8004140:	40022000 	.word	0x40022000

08004144 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800414c:	f7ff fdfc 	bl	8003d48 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004152:	e010      	b.n	8004176 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d00c      	beq.n	8004176 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <FLASH_WaitForLastOperation+0x2e>
 8004162:	f7ff fdf1 	bl	8003d48 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	429a      	cmp	r2, r3
 8004170:	d201      	bcs.n	8004176 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e025      	b.n	80041c2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004176:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <FLASH_WaitForLastOperation+0x88>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e8      	bne.n	8004154 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004182:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <FLASH_WaitForLastOperation+0x88>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800418e:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <FLASH_WaitForLastOperation+0x88>)
 8004190:	2220      	movs	r2, #32
 8004192:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004194:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <FLASH_WaitForLastOperation+0x88>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80041a0:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <FLASH_WaitForLastOperation+0x88>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80041ac:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <FLASH_WaitForLastOperation+0x88>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80041b8:	f000 f80a 	bl	80041d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40022000 	.word	0x40022000

080041d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80041da:	4b23      	ldr	r3, [pc, #140]	@ (8004268 <FLASH_SetErrorCode+0x98>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80041e6:	4b21      	ldr	r3, [pc, #132]	@ (800426c <FLASH_SetErrorCode+0x9c>)
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	4a1f      	ldr	r2, [pc, #124]	@ (800426c <FLASH_SetErrorCode+0x9c>)
 80041f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f043 0310 	orr.w	r3, r3, #16
 80041f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80041fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <FLASH_SetErrorCode+0x98>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004206:	4b19      	ldr	r3, [pc, #100]	@ (800426c <FLASH_SetErrorCode+0x9c>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	4a17      	ldr	r2, [pc, #92]	@ (800426c <FLASH_SetErrorCode+0x9c>)
 8004210:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800421a:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <FLASH_SetErrorCode+0x98>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <FLASH_SetErrorCode+0x9c>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f043 0304 	orr.w	r3, r3, #4
 800422e:	4a0f      	ldr	r2, [pc, #60]	@ (800426c <FLASH_SetErrorCode+0x9c>)
 8004230:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <FLASH_SetErrorCode+0x98>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4a0c      	ldr	r2, [pc, #48]	@ (8004268 <FLASH_SetErrorCode+0x98>)
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f240 1201 	movw	r2, #257	@ 0x101
 8004244:	4293      	cmp	r3, r2
 8004246:	d106      	bne.n	8004256 <FLASH_SetErrorCode+0x86>
 8004248:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <FLASH_SetErrorCode+0x98>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	4a06      	ldr	r2, [pc, #24]	@ (8004268 <FLASH_SetErrorCode+0x98>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	61d3      	str	r3, [r2, #28]
}  
 8004254:	e002      	b.n	800425c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004256:	4a04      	ldr	r2, [pc, #16]	@ (8004268 <FLASH_SetErrorCode+0x98>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60d3      	str	r3, [r2, #12]
}  
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40022000 	.word	0x40022000
 800426c:	20000200 	.word	0x20000200

08004270 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004282:	4b2f      	ldr	r3, [pc, #188]	@ (8004340 <HAL_FLASHEx_Erase+0xd0>)
 8004284:	7e1b      	ldrb	r3, [r3, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_FLASHEx_Erase+0x1e>
 800428a:	2302      	movs	r3, #2
 800428c:	e053      	b.n	8004336 <HAL_FLASHEx_Erase+0xc6>
 800428e:	4b2c      	ldr	r3, [pc, #176]	@ (8004340 <HAL_FLASHEx_Erase+0xd0>)
 8004290:	2201      	movs	r2, #1
 8004292:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d116      	bne.n	80042ca <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800429c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042a0:	f7ff ff50 	bl	8004144 <FLASH_WaitForLastOperation>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d141      	bne.n	800432e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f000 f84c 	bl	8004348 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042b4:	f7ff ff46 	bl	8004144 <FLASH_WaitForLastOperation>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80042bc:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_FLASHEx_Erase+0xd4>)
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	4a20      	ldr	r2, [pc, #128]	@ (8004344 <HAL_FLASHEx_Erase+0xd4>)
 80042c2:	f023 0304 	bic.w	r3, r3, #4
 80042c6:	6113      	str	r3, [r2, #16]
 80042c8:	e031      	b.n	800432e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80042ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042ce:	f7ff ff39 	bl	8004144 <FLASH_WaitForLastOperation>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d12a      	bne.n	800432e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	e019      	b.n	800431c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 f849 	bl	8004380 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042ee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042f2:	f7ff ff27 	bl	8004144 <FLASH_WaitForLastOperation>
 80042f6:	4603      	mov	r3, r0
 80042f8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80042fa:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <HAL_FLASHEx_Erase+0xd4>)
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	4a11      	ldr	r2, [pc, #68]	@ (8004344 <HAL_FLASHEx_Erase+0xd4>)
 8004300:	f023 0302 	bic.w	r3, r3, #2
 8004304:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	601a      	str	r2, [r3, #0]
            break;
 8004312:	e00c      	b.n	800432e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800431a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	029a      	lsls	r2, r3, #10
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	4413      	add	r3, r2
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	429a      	cmp	r2, r3
 800432c:	d3dc      	bcc.n	80042e8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800432e:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <HAL_FLASHEx_Erase+0xd0>)
 8004330:	2200      	movs	r2, #0
 8004332:	761a      	strb	r2, [r3, #24]

  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000200 	.word	0x20000200
 8004344:	40022000 	.word	0x40022000

08004348 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004350:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <FLASH_MassErase+0x30>)
 8004352:	2200      	movs	r2, #0
 8004354:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004356:	4b09      	ldr	r3, [pc, #36]	@ (800437c <FLASH_MassErase+0x34>)
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	4a08      	ldr	r2, [pc, #32]	@ (800437c <FLASH_MassErase+0x34>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <FLASH_MassErase+0x34>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	4a05      	ldr	r2, [pc, #20]	@ (800437c <FLASH_MassErase+0x34>)
 8004368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800436c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	20000200 	.word	0x20000200
 800437c:	40022000 	.word	0x40022000

08004380 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <FLASH_PageErase+0x38>)
 800438a:	2200      	movs	r2, #0
 800438c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <FLASH_PageErase+0x3c>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <FLASH_PageErase+0x3c>)
 8004394:	f043 0302 	orr.w	r3, r3, #2
 8004398:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800439a:	4a08      	ldr	r2, [pc, #32]	@ (80043bc <FLASH_PageErase+0x3c>)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <FLASH_PageErase+0x3c>)
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	4a05      	ldr	r2, [pc, #20]	@ (80043bc <FLASH_PageErase+0x3c>)
 80043a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000200 	.word	0x20000200
 80043bc:	40022000 	.word	0x40022000

080043c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b08b      	sub	sp, #44	@ 0x2c
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043ce:	2300      	movs	r3, #0
 80043d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043d2:	e169      	b.n	80046a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043d4:	2201      	movs	r2, #1
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	f040 8158 	bne.w	80046a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4a9a      	ldr	r2, [pc, #616]	@ (8004660 <HAL_GPIO_Init+0x2a0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d05e      	beq.n	80044ba <HAL_GPIO_Init+0xfa>
 80043fc:	4a98      	ldr	r2, [pc, #608]	@ (8004660 <HAL_GPIO_Init+0x2a0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d875      	bhi.n	80044ee <HAL_GPIO_Init+0x12e>
 8004402:	4a98      	ldr	r2, [pc, #608]	@ (8004664 <HAL_GPIO_Init+0x2a4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d058      	beq.n	80044ba <HAL_GPIO_Init+0xfa>
 8004408:	4a96      	ldr	r2, [pc, #600]	@ (8004664 <HAL_GPIO_Init+0x2a4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d86f      	bhi.n	80044ee <HAL_GPIO_Init+0x12e>
 800440e:	4a96      	ldr	r2, [pc, #600]	@ (8004668 <HAL_GPIO_Init+0x2a8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d052      	beq.n	80044ba <HAL_GPIO_Init+0xfa>
 8004414:	4a94      	ldr	r2, [pc, #592]	@ (8004668 <HAL_GPIO_Init+0x2a8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d869      	bhi.n	80044ee <HAL_GPIO_Init+0x12e>
 800441a:	4a94      	ldr	r2, [pc, #592]	@ (800466c <HAL_GPIO_Init+0x2ac>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d04c      	beq.n	80044ba <HAL_GPIO_Init+0xfa>
 8004420:	4a92      	ldr	r2, [pc, #584]	@ (800466c <HAL_GPIO_Init+0x2ac>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d863      	bhi.n	80044ee <HAL_GPIO_Init+0x12e>
 8004426:	4a92      	ldr	r2, [pc, #584]	@ (8004670 <HAL_GPIO_Init+0x2b0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d046      	beq.n	80044ba <HAL_GPIO_Init+0xfa>
 800442c:	4a90      	ldr	r2, [pc, #576]	@ (8004670 <HAL_GPIO_Init+0x2b0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d85d      	bhi.n	80044ee <HAL_GPIO_Init+0x12e>
 8004432:	2b12      	cmp	r3, #18
 8004434:	d82a      	bhi.n	800448c <HAL_GPIO_Init+0xcc>
 8004436:	2b12      	cmp	r3, #18
 8004438:	d859      	bhi.n	80044ee <HAL_GPIO_Init+0x12e>
 800443a:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <HAL_GPIO_Init+0x80>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	080044bb 	.word	0x080044bb
 8004444:	08004495 	.word	0x08004495
 8004448:	080044a7 	.word	0x080044a7
 800444c:	080044e9 	.word	0x080044e9
 8004450:	080044ef 	.word	0x080044ef
 8004454:	080044ef 	.word	0x080044ef
 8004458:	080044ef 	.word	0x080044ef
 800445c:	080044ef 	.word	0x080044ef
 8004460:	080044ef 	.word	0x080044ef
 8004464:	080044ef 	.word	0x080044ef
 8004468:	080044ef 	.word	0x080044ef
 800446c:	080044ef 	.word	0x080044ef
 8004470:	080044ef 	.word	0x080044ef
 8004474:	080044ef 	.word	0x080044ef
 8004478:	080044ef 	.word	0x080044ef
 800447c:	080044ef 	.word	0x080044ef
 8004480:	080044ef 	.word	0x080044ef
 8004484:	0800449d 	.word	0x0800449d
 8004488:	080044b1 	.word	0x080044b1
 800448c:	4a79      	ldr	r2, [pc, #484]	@ (8004674 <HAL_GPIO_Init+0x2b4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004492:	e02c      	b.n	80044ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	623b      	str	r3, [r7, #32]
          break;
 800449a:	e029      	b.n	80044f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	3304      	adds	r3, #4
 80044a2:	623b      	str	r3, [r7, #32]
          break;
 80044a4:	e024      	b.n	80044f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	3308      	adds	r3, #8
 80044ac:	623b      	str	r3, [r7, #32]
          break;
 80044ae:	e01f      	b.n	80044f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	330c      	adds	r3, #12
 80044b6:	623b      	str	r3, [r7, #32]
          break;
 80044b8:	e01a      	b.n	80044f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044c2:	2304      	movs	r3, #4
 80044c4:	623b      	str	r3, [r7, #32]
          break;
 80044c6:	e013      	b.n	80044f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044d0:	2308      	movs	r3, #8
 80044d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	611a      	str	r2, [r3, #16]
          break;
 80044da:	e009      	b.n	80044f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044dc:	2308      	movs	r3, #8
 80044de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	615a      	str	r2, [r3, #20]
          break;
 80044e6:	e003      	b.n	80044f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044e8:	2300      	movs	r3, #0
 80044ea:	623b      	str	r3, [r7, #32]
          break;
 80044ec:	e000      	b.n	80044f0 <HAL_GPIO_Init+0x130>
          break;
 80044ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2bff      	cmp	r3, #255	@ 0xff
 80044f4:	d801      	bhi.n	80044fa <HAL_GPIO_Init+0x13a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	e001      	b.n	80044fe <HAL_GPIO_Init+0x13e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2bff      	cmp	r3, #255	@ 0xff
 8004504:	d802      	bhi.n	800450c <HAL_GPIO_Init+0x14c>
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	e002      	b.n	8004512 <HAL_GPIO_Init+0x152>
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	3b08      	subs	r3, #8
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	210f      	movs	r1, #15
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	fa01 f303 	lsl.w	r3, r1, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	401a      	ands	r2, r3
 8004524:	6a39      	ldr	r1, [r7, #32]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	431a      	orrs	r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80b1 	beq.w	80046a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004540:	4b4d      	ldr	r3, [pc, #308]	@ (8004678 <HAL_GPIO_Init+0x2b8>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4a4c      	ldr	r2, [pc, #304]	@ (8004678 <HAL_GPIO_Init+0x2b8>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6193      	str	r3, [r2, #24]
 800454c:	4b4a      	ldr	r3, [pc, #296]	@ (8004678 <HAL_GPIO_Init+0x2b8>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004558:	4a48      	ldr	r2, [pc, #288]	@ (800467c <HAL_GPIO_Init+0x2bc>)
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	3302      	adds	r3, #2
 8004560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004564:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	220f      	movs	r2, #15
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4013      	ands	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a40      	ldr	r2, [pc, #256]	@ (8004680 <HAL_GPIO_Init+0x2c0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_GPIO_Init+0x1ec>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a3f      	ldr	r2, [pc, #252]	@ (8004684 <HAL_GPIO_Init+0x2c4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00d      	beq.n	80045a8 <HAL_GPIO_Init+0x1e8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a3e      	ldr	r2, [pc, #248]	@ (8004688 <HAL_GPIO_Init+0x2c8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d007      	beq.n	80045a4 <HAL_GPIO_Init+0x1e4>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3d      	ldr	r2, [pc, #244]	@ (800468c <HAL_GPIO_Init+0x2cc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_GPIO_Init+0x1e0>
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <HAL_GPIO_Init+0x1ee>
 80045a0:	2304      	movs	r3, #4
 80045a2:	e004      	b.n	80045ae <HAL_GPIO_Init+0x1ee>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e002      	b.n	80045ae <HAL_GPIO_Init+0x1ee>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <HAL_GPIO_Init+0x1ee>
 80045ac:	2300      	movs	r3, #0
 80045ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b0:	f002 0203 	and.w	r2, r2, #3
 80045b4:	0092      	lsls	r2, r2, #2
 80045b6:	4093      	lsls	r3, r2
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045be:	492f      	ldr	r1, [pc, #188]	@ (800467c <HAL_GPIO_Init+0x2bc>)
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	089b      	lsrs	r3, r3, #2
 80045c4:	3302      	adds	r3, #2
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d006      	beq.n	80045e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	492c      	ldr	r1, [pc, #176]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
 80045e4:	e006      	b.n	80045f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	4928      	ldr	r1, [pc, #160]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004600:	4b23      	ldr	r3, [pc, #140]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4922      	ldr	r1, [pc, #136]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
 800460c:	e006      	b.n	800461c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800460e:	4b20      	ldr	r3, [pc, #128]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	43db      	mvns	r3, r3
 8004616:	491e      	ldr	r1, [pc, #120]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 8004618:	4013      	ands	r3, r2
 800461a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004628:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	4918      	ldr	r1, [pc, #96]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
 8004634:	e006      	b.n	8004644 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004636:	4b16      	ldr	r3, [pc, #88]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	43db      	mvns	r3, r3
 800463e:	4914      	ldr	r1, [pc, #80]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 8004640:	4013      	ands	r3, r2
 8004642:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d021      	beq.n	8004694 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	490e      	ldr	r1, [pc, #56]	@ (8004690 <HAL_GPIO_Init+0x2d0>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	60cb      	str	r3, [r1, #12]
 800465c:	e021      	b.n	80046a2 <HAL_GPIO_Init+0x2e2>
 800465e:	bf00      	nop
 8004660:	10320000 	.word	0x10320000
 8004664:	10310000 	.word	0x10310000
 8004668:	10220000 	.word	0x10220000
 800466c:	10210000 	.word	0x10210000
 8004670:	10120000 	.word	0x10120000
 8004674:	10110000 	.word	0x10110000
 8004678:	40021000 	.word	0x40021000
 800467c:	40010000 	.word	0x40010000
 8004680:	40010800 	.word	0x40010800
 8004684:	40010c00 	.word	0x40010c00
 8004688:	40011000 	.word	0x40011000
 800468c:	40011400 	.word	0x40011400
 8004690:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <HAL_GPIO_Init+0x304>)
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	43db      	mvns	r3, r3
 800469c:	4909      	ldr	r1, [pc, #36]	@ (80046c4 <HAL_GPIO_Init+0x304>)
 800469e:	4013      	ands	r3, r2
 80046a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	3301      	adds	r3, #1
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	fa22 f303 	lsr.w	r3, r2, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f47f ae8e 	bne.w	80043d4 <HAL_GPIO_Init+0x14>
  }
}
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	372c      	adds	r7, #44	@ 0x2c
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	40010400 	.word	0x40010400

080046c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	887b      	ldrh	r3, [r7, #2]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	e001      	b.n	80046ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	460b      	mov	r3, r1
 8004700:	807b      	strh	r3, [r7, #2]
 8004702:	4613      	mov	r3, r2
 8004704:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004706:	787b      	ldrb	r3, [r7, #1]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800470c:	887a      	ldrh	r2, [r7, #2]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004712:	e003      	b.n	800471c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004714:	887b      	ldrh	r3, [r7, #2]
 8004716:	041a      	lsls	r2, r3, #16
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	611a      	str	r2, [r3, #16]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004738:	887a      	ldrh	r2, [r7, #2]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4013      	ands	r3, r2
 800473e:	041a      	lsls	r2, r3, #16
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	43d9      	mvns	r1, r3
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	400b      	ands	r3, r1
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e12b      	b.n	80049c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff f920 	bl	80039c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2224      	movs	r2, #36	@ 0x24
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047bc:	f000 ffea 	bl	8005794 <HAL_RCC_GetPCLK1Freq>
 80047c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4a81      	ldr	r2, [pc, #516]	@ (80049cc <HAL_I2C_Init+0x274>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d807      	bhi.n	80047dc <HAL_I2C_Init+0x84>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a80      	ldr	r2, [pc, #512]	@ (80049d0 <HAL_I2C_Init+0x278>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bf94      	ite	ls
 80047d4:	2301      	movls	r3, #1
 80047d6:	2300      	movhi	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e006      	b.n	80047ea <HAL_I2C_Init+0x92>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a7d      	ldr	r2, [pc, #500]	@ (80049d4 <HAL_I2C_Init+0x27c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bf94      	ite	ls
 80047e4:	2301      	movls	r3, #1
 80047e6:	2300      	movhi	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0e7      	b.n	80049c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a78      	ldr	r2, [pc, #480]	@ (80049d8 <HAL_I2C_Init+0x280>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	0c9b      	lsrs	r3, r3, #18
 80047fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a6a      	ldr	r2, [pc, #424]	@ (80049cc <HAL_I2C_Init+0x274>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d802      	bhi.n	800482c <HAL_I2C_Init+0xd4>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3301      	adds	r3, #1
 800482a:	e009      	b.n	8004840 <HAL_I2C_Init+0xe8>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	4a69      	ldr	r2, [pc, #420]	@ (80049dc <HAL_I2C_Init+0x284>)
 8004838:	fba2 2303 	umull	r2, r3, r2, r3
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	3301      	adds	r3, #1
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	430b      	orrs	r3, r1
 8004846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004852:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	495c      	ldr	r1, [pc, #368]	@ (80049cc <HAL_I2C_Init+0x274>)
 800485c:	428b      	cmp	r3, r1
 800485e:	d819      	bhi.n	8004894 <HAL_I2C_Init+0x13c>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1e59      	subs	r1, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	fbb1 f3f3 	udiv	r3, r1, r3
 800486e:	1c59      	adds	r1, r3, #1
 8004870:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004874:	400b      	ands	r3, r1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_I2C_Init+0x138>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1e59      	subs	r1, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	fbb1 f3f3 	udiv	r3, r1, r3
 8004888:	3301      	adds	r3, #1
 800488a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488e:	e051      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004890:	2304      	movs	r3, #4
 8004892:	e04f      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <HAL_I2C_Init+0x168>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1e58      	subs	r0, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	440b      	add	r3, r1
 80048aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e012      	b.n	80048e6 <HAL_I2C_Init+0x18e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1e58      	subs	r0, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	0099      	lsls	r1, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d6:	3301      	adds	r3, #1
 80048d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_I2C_Init+0x196>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e022      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10e      	bne.n	8004914 <HAL_I2C_Init+0x1bc>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1e58      	subs	r0, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	440b      	add	r3, r1
 8004904:	fbb0 f3f3 	udiv	r3, r0, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004912:	e00f      	b.n	8004934 <HAL_I2C_Init+0x1dc>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1e58      	subs	r0, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6859      	ldr	r1, [r3, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	0099      	lsls	r1, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	fbb0 f3f3 	udiv	r3, r0, r3
 800492a:	3301      	adds	r3, #1
 800492c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	6809      	ldr	r1, [r1, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6911      	ldr	r1, [r2, #16]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	4311      	orrs	r1, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	430b      	orrs	r3, r1
 8004976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	000186a0 	.word	0x000186a0
 80049d0:	001e847f 	.word	0x001e847f
 80049d4:	003d08ff 	.word	0x003d08ff
 80049d8:	431bde83 	.word	0x431bde83
 80049dc:	10624dd3 	.word	0x10624dd3

080049e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	461a      	mov	r2, r3
 80049ec:	460b      	mov	r3, r1
 80049ee:	817b      	strh	r3, [r7, #10]
 80049f0:	4613      	mov	r3, r2
 80049f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049f4:	f7ff f9a8 	bl	8003d48 <HAL_GetTick>
 80049f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	f040 80e0 	bne.w	8004bc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2319      	movs	r3, #25
 8004a0e:	2201      	movs	r2, #1
 8004a10:	4970      	ldr	r1, [pc, #448]	@ (8004bd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f964 	bl	8004ce0 <I2C_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0d3      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_I2C_Master_Transmit+0x50>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e0cc      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d007      	beq.n	8004a56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2221      	movs	r2, #33	@ 0x21
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2210      	movs	r2, #16
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	893a      	ldrh	r2, [r7, #8]
 8004a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a50      	ldr	r2, [pc, #320]	@ (8004bd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a98:	8979      	ldrh	r1, [r7, #10]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f89c 	bl	8004bdc <I2C_MasterRequestWrite>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e08d      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ac4:	e066      	b.n	8004b94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	6a39      	ldr	r1, [r7, #32]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f9de 	bl	8004e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d107      	bne.n	8004aee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e06b      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d11b      	bne.n	8004b68 <HAL_I2C_Master_Transmit+0x188>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	6a39      	ldr	r1, [r7, #32]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f9ce 	bl	8004f0e <I2C_WaitOnBTFFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00d      	beq.n	8004b94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d107      	bne.n	8004b90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e01a      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d194      	bne.n	8004ac6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	00100002 	.word	0x00100002
 8004bd8:	ffff0000 	.word	0xffff0000

08004bdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	460b      	mov	r3, r1
 8004bea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d006      	beq.n	8004c06 <I2C_MasterRequestWrite+0x2a>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d003      	beq.n	8004c06 <I2C_MasterRequestWrite+0x2a>
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c04:	d108      	bne.n	8004c18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e00b      	b.n	8004c30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1c:	2b12      	cmp	r3, #18
 8004c1e:	d107      	bne.n	8004c30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f84f 	bl	8004ce0 <I2C_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c56:	d103      	bne.n	8004c60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e035      	b.n	8004cd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c6c:	d108      	bne.n	8004c80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c6e:	897b      	ldrh	r3, [r7, #10]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c7c:	611a      	str	r2, [r3, #16]
 8004c7e:	e01b      	b.n	8004cb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c80:	897b      	ldrh	r3, [r7, #10]
 8004c82:	11db      	asrs	r3, r3, #7
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f003 0306 	and.w	r3, r3, #6
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f063 030f 	orn	r3, r3, #15
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	490e      	ldr	r1, [pc, #56]	@ (8004cd8 <I2C_MasterRequestWrite+0xfc>)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f875 	bl	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e010      	b.n	8004cd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cae:	897b      	ldrh	r3, [r7, #10]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4907      	ldr	r1, [pc, #28]	@ (8004cdc <I2C_MasterRequestWrite+0x100>)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f865 	bl	8004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	00010008 	.word	0x00010008
 8004cdc:	00010002 	.word	0x00010002

08004ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf0:	e025      	b.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d021      	beq.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfa:	f7ff f825 	bl	8003d48 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d302      	bcc.n	8004d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d116      	bne.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e023      	b.n	8004d86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d10d      	bne.n	8004d64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4013      	ands	r3, r2
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	e00c      	b.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d0b6      	beq.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d9c:	e051      	b.n	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dac:	d123      	bne.n	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de2:	f043 0204 	orr.w	r2, r3, #4
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e046      	b.n	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d021      	beq.n	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fe ffa3 	bl	8003d48 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d116      	bne.n	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e020      	b.n	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d10c      	bne.n	8004e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	43da      	mvns	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4013      	ands	r3, r2
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf14      	ite	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	2300      	moveq	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	e00b      	b.n	8004e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d18d      	bne.n	8004d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e98:	e02d      	b.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f878 	bl	8004f90 <I2C_IsAcknowledgeFailed>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e02d      	b.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d021      	beq.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fe ff49 	bl	8003d48 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d116      	bne.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e007      	b.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f00:	2b80      	cmp	r3, #128	@ 0x80
 8004f02:	d1ca      	bne.n	8004e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f1a:	e02d      	b.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f837 	bl	8004f90 <I2C_IsAcknowledgeFailed>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e02d      	b.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	d021      	beq.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f34:	f7fe ff08 	bl	8003d48 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d302      	bcc.n	8004f4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d116      	bne.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e007      	b.n	8004f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d1ca      	bne.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa6:	d11b      	bne.n	8004fe0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	f043 0204 	orr.w	r2, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e272      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8087 	beq.w	800511a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800500c:	4b92      	ldr	r3, [pc, #584]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b04      	cmp	r3, #4
 8005016:	d00c      	beq.n	8005032 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005018:	4b8f      	ldr	r3, [pc, #572]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b08      	cmp	r3, #8
 8005022:	d112      	bne.n	800504a <HAL_RCC_OscConfig+0x5e>
 8005024:	4b8c      	ldr	r3, [pc, #560]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005030:	d10b      	bne.n	800504a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005032:	4b89      	ldr	r3, [pc, #548]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d06c      	beq.n	8005118 <HAL_RCC_OscConfig+0x12c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d168      	bne.n	8005118 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e24c      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005052:	d106      	bne.n	8005062 <HAL_RCC_OscConfig+0x76>
 8005054:	4b80      	ldr	r3, [pc, #512]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a7f      	ldr	r2, [pc, #508]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 800505a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	e02e      	b.n	80050c0 <HAL_RCC_OscConfig+0xd4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10c      	bne.n	8005084 <HAL_RCC_OscConfig+0x98>
 800506a:	4b7b      	ldr	r3, [pc, #492]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a7a      	ldr	r2, [pc, #488]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	4b78      	ldr	r3, [pc, #480]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a77      	ldr	r2, [pc, #476]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 800507c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e01d      	b.n	80050c0 <HAL_RCC_OscConfig+0xd4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800508c:	d10c      	bne.n	80050a8 <HAL_RCC_OscConfig+0xbc>
 800508e:	4b72      	ldr	r3, [pc, #456]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a71      	ldr	r2, [pc, #452]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	4b6f      	ldr	r3, [pc, #444]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6e      	ldr	r2, [pc, #440]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e00b      	b.n	80050c0 <HAL_RCC_OscConfig+0xd4>
 80050a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b68      	ldr	r3, [pc, #416]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a67      	ldr	r2, [pc, #412]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fe fe3e 	bl	8003d48 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fe fe3a 	bl	8003d48 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	@ 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e200      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0xe4>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fe fe2a 	bl	8003d48 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fe fe26 	bl	8003d48 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	@ 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e1ec      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510a:	4b53      	ldr	r3, [pc, #332]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x10c>
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d063      	beq.n	80051ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005126:	4b4c      	ldr	r3, [pc, #304]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005132:	4b49      	ldr	r3, [pc, #292]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b08      	cmp	r3, #8
 800513c:	d11c      	bne.n	8005178 <HAL_RCC_OscConfig+0x18c>
 800513e:	4b46      	ldr	r3, [pc, #280]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d116      	bne.n	8005178 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514a:	4b43      	ldr	r3, [pc, #268]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_RCC_OscConfig+0x176>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e1c0      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005162:	4b3d      	ldr	r3, [pc, #244]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4939      	ldr	r1, [pc, #228]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	e03a      	b.n	80051ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005180:	4b36      	ldr	r3, [pc, #216]	@ (800525c <HAL_RCC_OscConfig+0x270>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005186:	f7fe fddf 	bl	8003d48 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518e:	f7fe fddb 	bl	8003d48 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e1a1      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4927      	ldr	r1, [pc, #156]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	600b      	str	r3, [r1, #0]
 80051c0:	e015      	b.n	80051ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c2:	4b26      	ldr	r3, [pc, #152]	@ (800525c <HAL_RCC_OscConfig+0x270>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fe fdbe 	bl	8003d48 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d0:	f7fe fdba 	bl	8003d48 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e180      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d03a      	beq.n	8005270 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d019      	beq.n	8005236 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005202:	4b17      	ldr	r3, [pc, #92]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005208:	f7fe fd9e 	bl	8003d48 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005210:	f7fe fd9a 	bl	8003d48 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e160      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <HAL_RCC_OscConfig+0x26c>)
 8005224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800522e:	2001      	movs	r0, #1
 8005230:	f000 fad8 	bl	80057e4 <RCC_Delay>
 8005234:	e01c      	b.n	8005270 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <HAL_RCC_OscConfig+0x274>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523c:	f7fe fd84 	bl	8003d48 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005242:	e00f      	b.n	8005264 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005244:	f7fe fd80 	bl	8003d48 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d908      	bls.n	8005264 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e146      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	42420000 	.word	0x42420000
 8005260:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	4b92      	ldr	r3, [pc, #584]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e9      	bne.n	8005244 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80a6 	beq.w	80053ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005282:	4b8b      	ldr	r3, [pc, #556]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	4b88      	ldr	r3, [pc, #544]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	4a87      	ldr	r2, [pc, #540]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005298:	61d3      	str	r3, [r2, #28]
 800529a:	4b85      	ldr	r3, [pc, #532]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052aa:	4b82      	ldr	r3, [pc, #520]	@ (80054b4 <HAL_RCC_OscConfig+0x4c8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d118      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b6:	4b7f      	ldr	r3, [pc, #508]	@ (80054b4 <HAL_RCC_OscConfig+0x4c8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a7e      	ldr	r2, [pc, #504]	@ (80054b4 <HAL_RCC_OscConfig+0x4c8>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fe fd41 	bl	8003d48 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ca:	f7fe fd3d 	bl	8003d48 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b64      	cmp	r3, #100	@ 0x64
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e103      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052dc:	4b75      	ldr	r3, [pc, #468]	@ (80054b4 <HAL_RCC_OscConfig+0x4c8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f0      	beq.n	80052ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d106      	bne.n	80052fe <HAL_RCC_OscConfig+0x312>
 80052f0:	4b6f      	ldr	r3, [pc, #444]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	4a6e      	ldr	r2, [pc, #440]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	6213      	str	r3, [r2, #32]
 80052fc:	e02d      	b.n	800535a <HAL_RCC_OscConfig+0x36e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10c      	bne.n	8005320 <HAL_RCC_OscConfig+0x334>
 8005306:	4b6a      	ldr	r3, [pc, #424]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	4a69      	ldr	r2, [pc, #420]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6213      	str	r3, [r2, #32]
 8005312:	4b67      	ldr	r3, [pc, #412]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	4a66      	ldr	r2, [pc, #408]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005318:	f023 0304 	bic.w	r3, r3, #4
 800531c:	6213      	str	r3, [r2, #32]
 800531e:	e01c      	b.n	800535a <HAL_RCC_OscConfig+0x36e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b05      	cmp	r3, #5
 8005326:	d10c      	bne.n	8005342 <HAL_RCC_OscConfig+0x356>
 8005328:	4b61      	ldr	r3, [pc, #388]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	4a60      	ldr	r2, [pc, #384]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 800532e:	f043 0304 	orr.w	r3, r3, #4
 8005332:	6213      	str	r3, [r2, #32]
 8005334:	4b5e      	ldr	r3, [pc, #376]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	4a5d      	ldr	r2, [pc, #372]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6213      	str	r3, [r2, #32]
 8005340:	e00b      	b.n	800535a <HAL_RCC_OscConfig+0x36e>
 8005342:	4b5b      	ldr	r3, [pc, #364]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	4a5a      	ldr	r2, [pc, #360]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	6213      	str	r3, [r2, #32]
 800534e:	4b58      	ldr	r3, [pc, #352]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	4a57      	ldr	r2, [pc, #348]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d015      	beq.n	800538e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005362:	f7fe fcf1 	bl	8003d48 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536a:	f7fe fced 	bl	8003d48 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e0b1      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005380:	4b4b      	ldr	r3, [pc, #300]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ee      	beq.n	800536a <HAL_RCC_OscConfig+0x37e>
 800538c:	e014      	b.n	80053b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538e:	f7fe fcdb 	bl	8003d48 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005394:	e00a      	b.n	80053ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fe fcd7 	bl	8003d48 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e09b      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ac:	4b40      	ldr	r3, [pc, #256]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ee      	bne.n	8005396 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053be:	4b3c      	ldr	r3, [pc, #240]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4a3b      	ldr	r2, [pc, #236]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 80053c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8087 	beq.w	80054e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053d4:	4b36      	ldr	r3, [pc, #216]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d061      	beq.n	80054a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d146      	bne.n	8005476 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e8:	4b33      	ldr	r3, [pc, #204]	@ (80054b8 <HAL_RCC_OscConfig+0x4cc>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7fe fcab 	bl	8003d48 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fe fca7 	bl	8003d48 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e06d      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005408:	4b29      	ldr	r3, [pc, #164]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800541c:	d108      	bne.n	8005430 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800541e:	4b24      	ldr	r3, [pc, #144]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4921      	ldr	r1, [pc, #132]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005430:	4b1f      	ldr	r3, [pc, #124]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a19      	ldr	r1, [r3, #32]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	430b      	orrs	r3, r1
 8005442:	491b      	ldr	r1, [pc, #108]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005444:	4313      	orrs	r3, r2
 8005446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005448:	4b1b      	ldr	r3, [pc, #108]	@ (80054b8 <HAL_RCC_OscConfig+0x4cc>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544e:	f7fe fc7b 	bl	8003d48 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005456:	f7fe fc77 	bl	8003d48 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e03d      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005468:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0f0      	beq.n	8005456 <HAL_RCC_OscConfig+0x46a>
 8005474:	e035      	b.n	80054e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005476:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <HAL_RCC_OscConfig+0x4cc>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7fe fc64 	bl	8003d48 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fe fc60 	bl	8003d48 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e026      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005496:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <HAL_RCC_OscConfig+0x4c4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x498>
 80054a2:	e01e      	b.n	80054e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e019      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40007000 	.word	0x40007000
 80054b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054bc:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <HAL_RCC_OscConfig+0x500>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d106      	bne.n	80054de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d001      	beq.n	80054e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000

080054f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0d0      	b.n	80056a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005504:	4b6a      	ldr	r3, [pc, #424]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d910      	bls.n	8005534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005512:	4b67      	ldr	r3, [pc, #412]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f023 0207 	bic.w	r2, r3, #7
 800551a:	4965      	ldr	r1, [pc, #404]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005522:	4b63      	ldr	r3, [pc, #396]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0b8      	b.n	80056a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d020      	beq.n	8005582 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800554c:	4b59      	ldr	r3, [pc, #356]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a58      	ldr	r2, [pc, #352]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005556:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005564:	4b53      	ldr	r3, [pc, #332]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a52      	ldr	r2, [pc, #328]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 800556a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800556e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005570:	4b50      	ldr	r3, [pc, #320]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	494d      	ldr	r1, [pc, #308]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d040      	beq.n	8005610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d107      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005596:	4b47      	ldr	r3, [pc, #284]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d115      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e07f      	b.n	80056a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d107      	bne.n	80055be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ae:	4b41      	ldr	r3, [pc, #260]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e073      	b.n	80056a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055be:	4b3d      	ldr	r3, [pc, #244]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e06b      	b.n	80056a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ce:	4b39      	ldr	r3, [pc, #228]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f023 0203 	bic.w	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4936      	ldr	r1, [pc, #216]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055e0:	f7fe fbb2 	bl	8003d48 <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fe fbae 	bl	8003d48 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e053      	b.n	80056a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	4b2d      	ldr	r3, [pc, #180]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 020c 	and.w	r2, r3, #12
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	429a      	cmp	r2, r3
 800560e:	d1eb      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005610:	4b27      	ldr	r3, [pc, #156]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d210      	bcs.n	8005640 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b24      	ldr	r3, [pc, #144]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 0207 	bic.w	r2, r3, #7
 8005626:	4922      	ldr	r1, [pc, #136]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d001      	beq.n	8005640 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e032      	b.n	80056a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800564c:	4b19      	ldr	r3, [pc, #100]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4916      	ldr	r1, [pc, #88]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800566a:	4b12      	ldr	r3, [pc, #72]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	490e      	ldr	r1, [pc, #56]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800567e:	f000 f821 	bl	80056c4 <HAL_RCC_GetSysClockFreq>
 8005682:	4602      	mov	r2, r0
 8005684:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	490a      	ldr	r1, [pc, #40]	@ (80056b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	5ccb      	ldrb	r3, [r1, r3]
 8005692:	fa22 f303 	lsr.w	r3, r2, r3
 8005696:	4a09      	ldr	r2, [pc, #36]	@ (80056bc <HAL_RCC_ClockConfig+0x1cc>)
 8005698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800569a:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <HAL_RCC_ClockConfig+0x1d0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fb10 	bl	8003cc4 <HAL_InitTick>

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40022000 	.word	0x40022000
 80056b4:	40021000 	.word	0x40021000
 80056b8:	08006e9c 	.word	0x08006e9c
 80056bc:	20000078 	.word	0x20000078
 80056c0:	2000007c 	.word	0x2000007c

080056c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c4:	b490      	push	{r4, r7}
 80056c6:	b08a      	sub	sp, #40	@ 0x28
 80056c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80056ca:	4b29      	ldr	r3, [pc, #164]	@ (8005770 <HAL_RCC_GetSysClockFreq+0xac>)
 80056cc:	1d3c      	adds	r4, r7, #4
 80056ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80056d4:	f240 2301 	movw	r3, #513	@ 0x201
 80056d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	2300      	movs	r3, #0
 80056e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056ee:	4b21      	ldr	r3, [pc, #132]	@ (8005774 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 030c 	and.w	r3, r3, #12
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d002      	beq.n	8005704 <HAL_RCC_GetSysClockFreq+0x40>
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d003      	beq.n	800570a <HAL_RCC_GetSysClockFreq+0x46>
 8005702:	e02b      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005704:	4b1c      	ldr	r3, [pc, #112]	@ (8005778 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005706:	623b      	str	r3, [r7, #32]
      break;
 8005708:	e02b      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	0c9b      	lsrs	r3, r3, #18
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	3328      	adds	r3, #40	@ 0x28
 8005714:	443b      	add	r3, r7
 8005716:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800571a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d012      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005726:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	0c5b      	lsrs	r3, r3, #17
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	3328      	adds	r3, #40	@ 0x28
 8005732:	443b      	add	r3, r7
 8005734:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005738:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4a0e      	ldr	r2, [pc, #56]	@ (8005778 <HAL_RCC_GetSysClockFreq+0xb4>)
 800573e:	fb03 f202 	mul.w	r2, r3, r2
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
 800574a:	e004      	b.n	8005756 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4a0b      	ldr	r2, [pc, #44]	@ (800577c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005750:	fb02 f303 	mul.w	r3, r2, r3
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	623b      	str	r3, [r7, #32]
      break;
 800575a:	e002      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800575c:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <HAL_RCC_GetSysClockFreq+0xb4>)
 800575e:	623b      	str	r3, [r7, #32]
      break;
 8005760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005762:	6a3b      	ldr	r3, [r7, #32]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3728      	adds	r7, #40	@ 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bc90      	pop	{r4, r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	08006e8c 	.word	0x08006e8c
 8005774:	40021000 	.word	0x40021000
 8005778:	007a1200 	.word	0x007a1200
 800577c:	003d0900 	.word	0x003d0900

08005780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005784:	4b02      	ldr	r3, [pc, #8]	@ (8005790 <HAL_RCC_GetHCLKFreq+0x10>)
 8005786:	681b      	ldr	r3, [r3, #0]
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr
 8005790:	20000078 	.word	0x20000078

08005794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005798:	f7ff fff2 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 800579c:	4602      	mov	r2, r0
 800579e:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	4903      	ldr	r1, [pc, #12]	@ (80057b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40021000 	.word	0x40021000
 80057b8:	08006eac 	.word	0x08006eac

080057bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057c0:	f7ff ffde 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	0adb      	lsrs	r3, r3, #11
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4903      	ldr	r1, [pc, #12]	@ (80057e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40021000 	.word	0x40021000
 80057e0:	08006eac 	.word	0x08006eac

080057e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005818 <RCC_Delay+0x34>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <RCC_Delay+0x38>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	0a5b      	lsrs	r3, r3, #9
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005800:	bf00      	nop
  }
  while (Delay --);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1e5a      	subs	r2, r3, #1
 8005806:	60fa      	str	r2, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f9      	bne.n	8005800 <RCC_Delay+0x1c>
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr
 8005818:	20000078 	.word	0x20000078
 800581c:	10624dd3 	.word	0x10624dd3

08005820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e076      	b.n	8005920 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d108      	bne.n	800584c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005842:	d009      	beq.n	8005858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	61da      	str	r2, [r3, #28]
 800584a:	e005      	b.n	8005858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fe f8e6 	bl	8003a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800588e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058dc:	ea42 0103 	orr.w	r1, r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	0c1a      	lsrs	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f002 0204 	and.w	r2, r2, #4
 80058fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800590e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08c      	sub	sp, #48	@ 0x30
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005936:	2301      	movs	r3, #1
 8005938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_SPI_TransmitReceive+0x26>
 800594a:	2302      	movs	r3, #2
 800594c:	e18a      	b.n	8005c64 <HAL_SPI_TransmitReceive+0x33c>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005956:	f7fe f9f7 	bl	8003d48 <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800596c:	887b      	ldrh	r3, [r7, #2]
 800596e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005970:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005974:	2b01      	cmp	r3, #1
 8005976:	d00f      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x70>
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800597e:	d107      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d103      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x68>
 8005988:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800598c:	2b04      	cmp	r3, #4
 800598e:	d003      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005990:	2302      	movs	r3, #2
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005996:	e15b      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_SPI_TransmitReceive+0x82>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_SPI_TransmitReceive+0x82>
 80059a4:	887b      	ldrh	r3, [r7, #2]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80059b0:	e14e      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d003      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2205      	movs	r2, #5
 80059c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	887a      	ldrh	r2, [r7, #2]
 80059d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	887a      	ldrh	r2, [r7, #2]
 80059dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	887a      	ldrh	r2, [r7, #2]
 80059ee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a06:	2b40      	cmp	r3, #64	@ 0x40
 8005a08:	d007      	beq.n	8005a1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a22:	d178      	bne.n	8005b16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_SPI_TransmitReceive+0x10a>
 8005a2c:	8b7b      	ldrh	r3, [r7, #26]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d166      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a36:	881a      	ldrh	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	1c9a      	adds	r2, r3, #2
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a56:	e053      	b.n	8005b00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d11b      	bne.n	8005a9e <HAL_SPI_TransmitReceive+0x176>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d016      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0x176>
 8005a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d113      	bne.n	8005a9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7a:	881a      	ldrh	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a86:	1c9a      	adds	r2, r3, #2
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d119      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x1b8>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d014      	beq.n	8005ae0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	b292      	uxth	r2, r2
 8005ac2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	1c9a      	adds	r2, r3, #2
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005adc:	2301      	movs	r3, #1
 8005ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ae0:	f7fe f932 	bl	8003d48 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d807      	bhi.n	8005b00 <HAL_SPI_TransmitReceive+0x1d8>
 8005af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d003      	beq.n	8005b00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005afe:	e0a7      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1a6      	bne.n	8005a58 <HAL_SPI_TransmitReceive+0x130>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1a1      	bne.n	8005a58 <HAL_SPI_TransmitReceive+0x130>
 8005b14:	e07c      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_SPI_TransmitReceive+0x1fc>
 8005b1e:	8b7b      	ldrh	r3, [r7, #26]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d16b      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b4a:	e057      	b.n	8005bfc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d11c      	bne.n	8005b94 <HAL_SPI_TransmitReceive+0x26c>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d017      	beq.n	8005b94 <HAL_SPI_TransmitReceive+0x26c>
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d114      	bne.n	8005b94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d119      	bne.n	8005bd6 <HAL_SPI_TransmitReceive+0x2ae>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d014      	beq.n	8005bd6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bd6:	f7fe f8b7 	bl	8003d48 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d803      	bhi.n	8005bee <HAL_SPI_TransmitReceive+0x2c6>
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d102      	bne.n	8005bf4 <HAL_SPI_TransmitReceive+0x2cc>
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005bfa:	e029      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1a2      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x224>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d19d      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f8b1 	bl	8005d7c <SPI_EndRxTxTransaction>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005c2c:	e010      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10b      	bne.n	8005c4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	e000      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3730      	adds	r7, #48	@ 0x30
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c7c:	f7fe f864 	bl	8003d48 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4413      	add	r3, r2
 8005c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c8c:	f7fe f85c 	bl	8003d48 <HAL_GetTick>
 8005c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c92:	4b39      	ldr	r3, [pc, #228]	@ (8005d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	015b      	lsls	r3, r3, #5
 8005c98:	0d1b      	lsrs	r3, r3, #20
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	e054      	b.n	8005d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d050      	beq.n	8005d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cac:	f7fe f84c 	bl	8003d48 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d902      	bls.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d13d      	bne.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cda:	d111      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce4:	d004      	beq.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cee:	d107      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d08:	d10f      	bne.n	8005d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e017      	b.n	8005d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4013      	ands	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2301      	moveq	r3, #1
 8005d60:	2300      	movne	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d19b      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3720      	adds	r7, #32
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000078 	.word	0x20000078

08005d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2180      	movs	r1, #128	@ 0x80
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f7ff ff6a 	bl	8005c6c <SPI_WaitFlagStateUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da2:	f043 0220 	orr.w	r2, r3, #32
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e000      	b.n	8005db0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e041      	b.n	8005e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fd fe7a 	bl	8003ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f000 fa70 	bl	80062dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d001      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e03a      	b.n	8005ee6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <HAL_TIM_Base_Start_IT+0x98>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00e      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x58>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9a:	d009      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x58>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a14      	ldr	r2, [pc, #80]	@ (8005ef4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d004      	beq.n	8005eb0 <HAL_TIM_Base_Start_IT+0x58>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a13      	ldr	r2, [pc, #76]	@ (8005ef8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d111      	bne.n	8005ed4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b06      	cmp	r3, #6
 8005ec0:	d010      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0201 	orr.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed2:	e007      	b.n	8005ee4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800

08005efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d122      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d11b      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0202 	mvn.w	r2, #2
 8005f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9b1 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9a4 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f9b3 	bl	80062b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d122      	bne.n	8005fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d11b      	bne.n	8005fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0204 	mvn.w	r2, #4
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f987 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f97a 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f989 	bl	80062b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d122      	bne.n	8006000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d11b      	bne.n	8006000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0208 	mvn.w	r2, #8
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f95d 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f950 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f95f 	bl	80062b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b10      	cmp	r3, #16
 800600c:	d122      	bne.n	8006054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b10      	cmp	r3, #16
 800601a:	d11b      	bne.n	8006054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0210 	mvn.w	r2, #16
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2208      	movs	r2, #8
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f933 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f926 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f935 	bl	80062b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b01      	cmp	r3, #1
 8006060:	d10e      	bne.n	8006080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b01      	cmp	r3, #1
 800606e:	d107      	bne.n	8006080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0201 	mvn.w	r2, #1
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fa fa80 	bl	8000580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608a:	2b80      	cmp	r3, #128	@ 0x80
 800608c:	d10e      	bne.n	80060ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006098:	2b80      	cmp	r3, #128	@ 0x80
 800609a:	d107      	bne.n	80060ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa77 	bl	800659a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b6:	2b40      	cmp	r3, #64	@ 0x40
 80060b8:	d10e      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c4:	2b40      	cmp	r3, #64	@ 0x40
 80060c6:	d107      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8f9 	bl	80062ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d10e      	bne.n	8006104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d107      	bne.n	8006104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0220 	mvn.w	r2, #32
 80060fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa42 	bl	8006588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006104:	bf00      	nop
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_TIM_ConfigClockSource+0x18>
 8006120:	2302      	movs	r3, #2
 8006122:	e0b3      	b.n	800628c <HAL_TIM_ConfigClockSource+0x180>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006142:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800614a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615c:	d03e      	beq.n	80061dc <HAL_TIM_ConfigClockSource+0xd0>
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006162:	f200 8087 	bhi.w	8006274 <HAL_TIM_ConfigClockSource+0x168>
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616a:	f000 8085 	beq.w	8006278 <HAL_TIM_ConfigClockSource+0x16c>
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006172:	d87f      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x168>
 8006174:	2b70      	cmp	r3, #112	@ 0x70
 8006176:	d01a      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0xa2>
 8006178:	2b70      	cmp	r3, #112	@ 0x70
 800617a:	d87b      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x168>
 800617c:	2b60      	cmp	r3, #96	@ 0x60
 800617e:	d050      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x116>
 8006180:	2b60      	cmp	r3, #96	@ 0x60
 8006182:	d877      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x168>
 8006184:	2b50      	cmp	r3, #80	@ 0x50
 8006186:	d03c      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0xf6>
 8006188:	2b50      	cmp	r3, #80	@ 0x50
 800618a:	d873      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x168>
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	d058      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x136>
 8006190:	2b40      	cmp	r3, #64	@ 0x40
 8006192:	d86f      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x168>
 8006194:	2b30      	cmp	r3, #48	@ 0x30
 8006196:	d064      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x156>
 8006198:	2b30      	cmp	r3, #48	@ 0x30
 800619a:	d86b      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x168>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d060      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x156>
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d867      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x168>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d05c      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x156>
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d05a      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061ac:	e062      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6899      	ldr	r1, [r3, #8]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f000 f966 	bl	800648e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	609a      	str	r2, [r3, #8]
      break;
 80061da:	e04e      	b.n	800627a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6899      	ldr	r1, [r3, #8]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f000 f94f 	bl	800648e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061fe:	609a      	str	r2, [r3, #8]
      break;
 8006200:	e03b      	b.n	800627a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	461a      	mov	r2, r3
 8006210:	f000 f8c6 	bl	80063a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2150      	movs	r1, #80	@ 0x50
 800621a:	4618      	mov	r0, r3
 800621c:	f000 f91d 	bl	800645a <TIM_ITRx_SetConfig>
      break;
 8006220:	e02b      	b.n	800627a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6859      	ldr	r1, [r3, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	461a      	mov	r2, r3
 8006230:	f000 f8e4 	bl	80063fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2160      	movs	r1, #96	@ 0x60
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f90d 	bl	800645a <TIM_ITRx_SetConfig>
      break;
 8006240:	e01b      	b.n	800627a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	461a      	mov	r2, r3
 8006250:	f000 f8a6 	bl	80063a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2140      	movs	r1, #64	@ 0x40
 800625a:	4618      	mov	r0, r3
 800625c:	f000 f8fd 	bl	800645a <TIM_ITRx_SetConfig>
      break;
 8006260:	e00b      	b.n	800627a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f000 f8f4 	bl	800645a <TIM_ITRx_SetConfig>
        break;
 8006272:	e002      	b.n	800627a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006278:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr

080062a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a29      	ldr	r2, [pc, #164]	@ (8006394 <TIM_Base_SetConfig+0xb8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00b      	beq.n	800630c <TIM_Base_SetConfig+0x30>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fa:	d007      	beq.n	800630c <TIM_Base_SetConfig+0x30>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a26      	ldr	r2, [pc, #152]	@ (8006398 <TIM_Base_SetConfig+0xbc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_Base_SetConfig+0x30>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a25      	ldr	r2, [pc, #148]	@ (800639c <TIM_Base_SetConfig+0xc0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d108      	bne.n	800631e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a1c      	ldr	r2, [pc, #112]	@ (8006394 <TIM_Base_SetConfig+0xb8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00b      	beq.n	800633e <TIM_Base_SetConfig+0x62>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632c:	d007      	beq.n	800633e <TIM_Base_SetConfig+0x62>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a19      	ldr	r2, [pc, #100]	@ (8006398 <TIM_Base_SetConfig+0xbc>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_Base_SetConfig+0x62>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a18      	ldr	r2, [pc, #96]	@ (800639c <TIM_Base_SetConfig+0xc0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d108      	bne.n	8006350 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a07      	ldr	r2, [pc, #28]	@ (8006394 <TIM_Base_SetConfig+0xb8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d103      	bne.n	8006384 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	615a      	str	r2, [r3, #20]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800

080063a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f023 0201 	bic.w	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 030a 	bic.w	r3, r3, #10
 80063dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f023 0210 	bic.w	r2, r3, #16
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006426:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	031b      	lsls	r3, r3, #12
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006438:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr

0800645a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	f043 0307 	orr.w	r3, r3, #7
 800647c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr

0800648e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	021a      	lsls	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	609a      	str	r2, [r3, #8]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e046      	b.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a16      	ldr	r2, [pc, #88]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006530:	d009      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a12      	ldr	r2, [pc, #72]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a10      	ldr	r2, [pc, #64]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d10c      	bne.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800654c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	4313      	orrs	r3, r2
 8006556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800

08006588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr

0800659a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e03f      	b.n	800663e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fd faa4 	bl	8003b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2224      	movs	r2, #36	@ 0x24
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f905 	bl	8006800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695a      	ldr	r2, [r3, #20]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b08a      	sub	sp, #40	@ 0x28
 800664a:	af02      	add	r7, sp, #8
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b20      	cmp	r3, #32
 8006664:	d17c      	bne.n	8006760 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <HAL_UART_Transmit+0x2c>
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e075      	b.n	8006762 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_UART_Transmit+0x3e>
 8006680:	2302      	movs	r3, #2
 8006682:	e06e      	b.n	8006762 <HAL_UART_Transmit+0x11c>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2221      	movs	r2, #33	@ 0x21
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800669a:	f7fd fb55 	bl	8003d48 <HAL_GetTick>
 800669e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b4:	d108      	bne.n	80066c8 <HAL_UART_Transmit+0x82>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e003      	b.n	80066d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80066d8:	e02a      	b.n	8006730 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	@ 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f840 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e036      	b.n	8006762 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006708:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3302      	adds	r3, #2
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e007      	b.n	8006722 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3301      	adds	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1cf      	bne.n	80066da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2200      	movs	r2, #0
 8006742:	2140      	movs	r1, #64	@ 0x40
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f810 	bl	800676a <UART_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e006      	b.n	8006762 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	3720      	adds	r7, #32
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	4613      	mov	r3, r2
 8006778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677a:	e02c      	b.n	80067d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	d028      	beq.n	80067d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x30>
 800678a:	f7fd fadd 	bl	8003d48 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	429a      	cmp	r2, r3
 8006798:	d21d      	bcs.n	80067d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80067a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0201 	bic.w	r2, r2, #1
 80067b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e00f      	b.n	80067f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4013      	ands	r3, r2
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	bf0c      	ite	eq
 80067e6:	2301      	moveq	r3, #1
 80067e8:	2300      	movne	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d0c3      	beq.n	800677c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800683a:	f023 030c 	bic.w	r3, r3, #12
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	430b      	orrs	r3, r1
 8006846:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a2c      	ldr	r2, [pc, #176]	@ (8006914 <UART_SetConfig+0x114>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d103      	bne.n	8006870 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006868:	f7fe ffa8 	bl	80057bc <HAL_RCC_GetPCLK2Freq>
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	e002      	b.n	8006876 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006870:	f7fe ff90 	bl	8005794 <HAL_RCC_GetPCLK1Freq>
 8006874:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009a      	lsls	r2, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	4a22      	ldr	r2, [pc, #136]	@ (8006918 <UART_SetConfig+0x118>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	0119      	lsls	r1, r3, #4
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009a      	lsls	r2, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80068ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006918 <UART_SetConfig+0x118>)
 80068ae:	fba3 0302 	umull	r0, r3, r3, r2
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	2064      	movs	r0, #100	@ 0x64
 80068b6:	fb00 f303 	mul.w	r3, r0, r3
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	3332      	adds	r3, #50	@ 0x32
 80068c0:	4a15      	ldr	r2, [pc, #84]	@ (8006918 <UART_SetConfig+0x118>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068cc:	4419      	add	r1, r3
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009a      	lsls	r2, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <UART_SetConfig+0x118>)
 80068e6:	fba3 0302 	umull	r0, r3, r3, r2
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	2064      	movs	r0, #100	@ 0x64
 80068ee:	fb00 f303 	mul.w	r3, r0, r3
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	3332      	adds	r3, #50	@ 0x32
 80068f8:	4a07      	ldr	r2, [pc, #28]	@ (8006918 <UART_SetConfig+0x118>)
 80068fa:	fba2 2303 	umull	r2, r3, r2, r3
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	f003 020f 	and.w	r2, r3, #15
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	440a      	add	r2, r1
 800690a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	40013800 	.word	0x40013800
 8006918:	51eb851f 	.word	0x51eb851f

0800691c <memset>:
 800691c:	4603      	mov	r3, r0
 800691e:	4402      	add	r2, r0
 8006920:	4293      	cmp	r3, r2
 8006922:	d100      	bne.n	8006926 <memset+0xa>
 8006924:	4770      	bx	lr
 8006926:	f803 1b01 	strb.w	r1, [r3], #1
 800692a:	e7f9      	b.n	8006920 <memset+0x4>

0800692c <__libc_init_array>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	2600      	movs	r6, #0
 8006930:	4d0c      	ldr	r5, [pc, #48]	@ (8006964 <__libc_init_array+0x38>)
 8006932:	4c0d      	ldr	r4, [pc, #52]	@ (8006968 <__libc_init_array+0x3c>)
 8006934:	1b64      	subs	r4, r4, r5
 8006936:	10a4      	asrs	r4, r4, #2
 8006938:	42a6      	cmp	r6, r4
 800693a:	d109      	bne.n	8006950 <__libc_init_array+0x24>
 800693c:	f000 f81a 	bl	8006974 <_init>
 8006940:	2600      	movs	r6, #0
 8006942:	4d0a      	ldr	r5, [pc, #40]	@ (800696c <__libc_init_array+0x40>)
 8006944:	4c0a      	ldr	r4, [pc, #40]	@ (8006970 <__libc_init_array+0x44>)
 8006946:	1b64      	subs	r4, r4, r5
 8006948:	10a4      	asrs	r4, r4, #2
 800694a:	42a6      	cmp	r6, r4
 800694c:	d105      	bne.n	800695a <__libc_init_array+0x2e>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	f855 3b04 	ldr.w	r3, [r5], #4
 8006954:	4798      	blx	r3
 8006956:	3601      	adds	r6, #1
 8006958:	e7ee      	b.n	8006938 <__libc_init_array+0xc>
 800695a:	f855 3b04 	ldr.w	r3, [r5], #4
 800695e:	4798      	blx	r3
 8006960:	3601      	adds	r6, #1
 8006962:	e7f2      	b.n	800694a <__libc_init_array+0x1e>
 8006964:	08006eb4 	.word	0x08006eb4
 8006968:	08006eb4 	.word	0x08006eb4
 800696c:	08006eb4 	.word	0x08006eb4
 8006970:	08006eb8 	.word	0x08006eb8

08006974 <_init>:
 8006974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006976:	bf00      	nop
 8006978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697a:	bc08      	pop	{r3}
 800697c:	469e      	mov	lr, r3
 800697e:	4770      	bx	lr

08006980 <_fini>:
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006982:	bf00      	nop
 8006984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006986:	bc08      	pop	{r3}
 8006988:	469e      	mov	lr, r3
 800698a:	4770      	bx	lr
